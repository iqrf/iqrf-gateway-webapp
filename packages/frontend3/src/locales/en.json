{
	"$vuetify": {
		"badge": "Badge",
		"loading": "Loading",
		"calendar": {
			"moreEvents": "{0} more"
		},
		"carousel": {
			"ariaLabel": {
				"delimiter": "Carousel slide {0} of {1}"
			},
			"next": "Next visual",
			"prev": "Previous visual"
		},
		"open": "Open",
		"close": "Close",
		"dataFooter": {
			"firstPage": "First page",
			"itemsPerPageAll": "All",
			"itemsPerPageText": "Items per page:",
			"lastPage": "Last page",
			"nextPage": "Next page",
			"pageText": "{0}-{1} of {2}",
			"prevPage": "Previous page"
		},
		"dataIterator": {
			"loadingText": "Loading items...",
			"noResultsText": "No matching records found"
		},
		"dataTable": {
			"ariaLabel": {
				"activateAscending": "Activate to sort ascending.",
				"activateDescending": "Activate to sort descending.",
				"activateNone": "Activate to remove sorting.",
				"sortAscending": "Sorted ascending.",
				"sortDescending": "Sorted descending.",
				"sortNone": "Not sorted."
			},
			"itemsPerPageText": "Rows per page:",
			"sortBy": "Sort by"
		},
		"datePicker": {
			"itemsSelected": "{0} selected",
			"nextMonthAriaLabel": "Next month",
			"nextYearAriaLabel": "Next year",
			"prevMonthAriaLabel": "Previous month",
			"prevYearAriaLabel": "Previous year"
		},
		"fileInput": {
			"counter": "{0} files",
			"counterSize": "{0} files ({1} in total)"
		},
		"input": {
			"appendAction": "{0} appended action",
			"clear": "Clear {0}",
			"prependAction": "{0} prepended action"
		},
		"noDataText": "No data available",
		"pagination": {
			"ariaLabel": {
				"currentPage": "Page {0}, Current page",
				"first": "First page",
				"last": "Last page",
				"next": "Next page",
				"page": "Go to page {0}",
				"previous": "Previous page",
				"root": "Pagination Navigation"
			}
		},
		"rating": {
			"ariaLabel": {
				"item": "Rating {0} of {1}"
			}
		},
		"timePicker": {
			"am": "AM",
			"pm": "PM"
		}
	},
	"title": "IQRF Gateway Webapp",
	"auth": {
		"sign": {
			"in": {
				"title": "Sign in",
				"expiration": "Session expiration",
				"expirations": {
					"default": "90 minutes",
					"day": "1 day",
					"week": "1 week",
					"month": "1 month",
					"year": "1 year"
				},
				"recoverPassword": "Forgot password?",
				"messages": {
					"incorrectUsernameOrPassword": "The username or password you entered is incorrect.",
					"success": "You have been signed in successfully."
				}
			},
			"out": {
				"title": "Sign out",
				"message": "You have been signed out.",
				"expired": "Your sign-in session has expired. Please sign in again."
			}
		}
	},
	"account": {
		"profile": {
			"title": "User profile",
			"details": {
				"title": "Profile details",
				"messages": {
					"success": "User profile has been successfully updated.",
					"failure": "Failed to update user profile: {error}"
				}
			},
			"password": {
				"title": "Change password",
				"current": "Current password",
				"new": "New password",
				"validation": {
					"current": "Please enter current password.",
					"new": "Please enter new password."
				}
			}
		},
		"recovery": {
			"title": "Account recovery",
			"prompt": "Please enter username and a password recovery email will be sent to the associated address.",
			"success": "An email containing further instructions to reset your password was sent to the address associated with the account.",
			"button": "Submit request",
			"messages": {
				"success": "Password recovery request successfully sent.",
				"failure": "An error has occured during password recovery request."
			}
		},
		"verification": {
			"title": "Account verification",
			"missing": "Your account does not have an e-mail address set up. Without the verified e-mail address, you can not reset your password if it is forgotten.",
			"unverified": "Your e-mail address ({email}) is not verified. Without the verified e-mail address, you can not reset your password if it is forgotten.",
			"addEmail": "Add e-mail address",
			"resend": "Resend verification e-mail",
			"messages": {
				"success": "Your account has been successfully verified.",
				"redirect": "You will be redirected to the dashboard in {countdown}.",
				"failure": "Account verification failed, {error}.",
				"requestSuccess": "Verification e-mail successfully sent.",
				"requestFailure": "An error has occured while sending verification e-mail."
			}
		}
	},
	"user": {
		"username": "Username",
		"email": "E-mail address",
		"password": "Password",
		"language": "Language",
		"role": "Role",
		"roles": {
			"admin": "Administrator",
			"normal": "Normal user",
			"basicadmin": "Basic admin",
			"basic": "Basic user"
		},
		"state": "State",
		"states": {
			"unverified": "Unverified",
			"verified": "Verified"
		},
		"validation": {
			"username": "Please enter your username.",
			"missingEmail": "Please enter your e-mail address.",
			"invalidEmail": "Invalid e-mail address format.",
			"password": "Please enter your password."
		},
		"messages": {
			"createFailure": "Failed to create new user: {error}",
			"verificationSent": "An email containing instructions to verify your account was sent to your address."
		}
	},
	"locale": {
		"languages": {
			"cs": "Czech",
			"en": "English"
		},
		"messages": {
			"set": "Locale changed to: {locale}."
		}
	},
	"errors": {
		"404": {
			"title": "Page not found",
			"header": "Error 404",
			"text": "The page you requested could not be found. The address may be incorrect, or the page no longer exists."
		}
	},
	"install": {
		"title": "Installation wizard",
		"invitation": "Welcome to IQRF Gateway Webapp. Before getting started, you have to create the webapp's first user.",
		"steps": {
			"introduction": "Introduction",
			"smtp": "Configure SMTP server",
			"webappUser": "Create webapp user",
			"gatewayUser": "Set gateway user",
			"sshKeys": "Add SSH keys",
			"sshService": "SSH service"
		},
		"createUser": {
			"title": "Create a new user",
			"failure": "Failed to create new webapp user: {error}",
			"note": "Create a new Webapp user to access the web interface.",
			"createButton": "Create user"
		},
		"gwUser": {
			"title": "Set gateway user password",
			"note": "Set gateway user password to access the device via login shell."
		},
		"error": {
			"howToFix": "How to fix it",
			"missingDependency": {
				"title": "One or more dependencies are missing",
				"description": "IQRF Gateway Webapp did not detect the following dependencies: {dependencies}.",
				"details": "Details",
				"command": "Missing command",
				"package": "Package"
			},
			"missingExtension": {
				"title": "One or more PHP extensions are missing",
				"description": "IQRF Gateway Webapp did not detect the following required extensions: {extensions}.",
				"fixDescription": "Install packages containing missing PHP extensions.",
				"fixDescriptionDebian": "Use the following commands to install packages containing the required PHP extensions:"
			},
			"missingMigration": {
				"title": "Some database table is missing",
				"description": "IQRF Gateway Webapp cannot find some table in the SQLite3 database.",
				"fixDescription": "Run these commands in terminal:"
			},
			"sudo": {
				"title": "Sudo error",
				"missing": "IQRF Gateway Webapp did not detect the sudo utility.",
				"invalid": "IQRF Gateway Webapp cannot execute commands with sudo.",
				"fixMissing": "Enter interactive shell as root and install sudo utility using the following commands:",
				"fixInvalid": "Allow user www-data to execute commands with sudo using the following commands:"
			}
		},
		"gwInfo": {
			"title": "Some information about this gateway",
			"button": "Show GW info",
			"download": "Download as JSON"
		},
		"restore": {
			"title": "Restore gateway from backup",
			"button": "Restore gateway"
		},
		"messages": {
			"check": "Running installation checkâ€¦",
			"finished": "Installation process successfully completed."
		}
	},
	"common": {
		"buttons": {
			"add": "Add",
			"edit": "Edit",
			"delete": "Delete",
			"save": "Save",
			"cancel": "Cancel",
			"close": "Close",
			"skip": "Skip",
			"reload": "Reload",
			"refresh": "Refresh",
			"backup": "Backup",
			"restore": "Restore",
			"selectAll": "Select all",
			"deselectAll": "Deselect all",
			"upload": "Upload",
			"clipboard": "Copy to clipboard"
		},
		"labels": {
			"general": "General",
			"protocol": "Protocol",
			"protocols": {
				"tcp": "Insecure TCP",
				"ssl": "Encrypted SSL/TLS",
				"ws": "Insecure websocket",
				"wss": "Secure websocket"
			},
			"hostname": "Hostname",
			"port": "Port",
			"path": "Path",
			"username": "Username",
			"password": "Password",
			"description": "Description",
			"severity": {
				"debug": "Debug",
				"info": "Information",
				"error": "Error",
				"warning": "Warning",
				"trace": "Trace"
			},
			"returnVerbose": "Verbose response",
			"none": "None"
		},
		"states": {
			"active": "Active",
			"inactive": "Inactive",
			"enabled": "Enabled",
			"disabled": "Disabled",
			"valid": "Valid",
			"invalid": "Invalid"
		},
		"columns": {
			"id": "ID",
			"description": "Description",
			"actions": "Actions"
		},
		"validation": {
			"hostnameMissing": "Please enter hostname.",
			"hostnameInvalid": "Hostname should be IPv4, IPv6, localhost or fully-qualified domain name.",
			"portMissing": "Please enter port.",
			"portInvalid": "Port should be an integer between 1 and 65535.",
			"usernameMissing": "Please enter username.",
			"passwordMissing": "Please enter password.",
			"credentialsMissing": "Please enter both username and password, or leave both fields empty."
		}
	},
	"components": {
		"status": {
			"monitor": {
				"mode": "Daemon mode",
				"modes": {
					"operational": "Operational",
					"forwarding": "Forwarding",
					"service": "Service",
					"unknown": "Unknown"
				},
				"notified": "Last notified",
				"queue": "Queue length",
				"version": "Daemon version",
				"enumeration": {
					"running": "Enumeration in progress.",
					"notRunning": "Enumeration not running.",
					"unavailable": "Enumeration status not available."
				}
			},
			"locale": {
				"languages": {
					"cs": "Czech",
					"en": "English"
				},
				"messages": {
					"set": "Locale changed to: {locale}."
				}
			},
			"sessionExpiration": {
				"title": "Session expiration warning",
				"prompt": "Your session is about to expire and you will be logged out. Click the renew session button to renew the session and dismiss this windows.",
				"renew": "Renew session",
				"success": "Your session has been successfully renewed.",
				"failed": "Failed to renew session.",
				"indicator": "Session will expire in: "
			}
		},
		"configuration": {
			"controller": {
				"form": {
					"sections": {
						"websocket": "Websocket",
						"logging": "Logging",
						"factoryReset": "Factory reset",
						"button": "Action button",
						"pins": "Pin configuration"
					},
					"websocket": {
						"api": "Daemon API",
						"monitor": "Monitor"
					},
					"logging": {
						"path": "Path to log file",
						"severity": "Severity level",
						"sinks": {
							"file": "Log to file",
							"syslog": "Log to syslog"
						}
					},
					"factoryReset": {
						"coordinator": "Coordinator",
						"iqaros": "IQAROS",
						"network": "IP network"
					},
					"button": {
						"action": "Action",
						"actions": {
							"none": "None",
							"autonetwork": "Autonetwork",
							"discovery": "Discovery"
						},
						"configure": "Configure"
					},
					"pins": {
						"greenLed": "Green LED GPIO pin",
						"redLed": "Red LED GPIO pin",
						"button": "Action button GPIO pin",
						"useWatchdogPins": "Use hardware Watchdog Timer pins",
						"sck": "I2C clock GPIO pin",
						"sda": "I2C data GPIO pin"
					},
					"autonetwork": {
						"actionRetries": "Action retries",
						"discoveryTxPower": "Discovery TX power",
						"discoveryBeforeStart": "Run discovery before starting autonetwork",
						"skipDiscoveryEachWave": "Skip discovery in each wave",
						"stopConditions": "Stop conditions",
						"waves": "Maximum number of waves",
						"emptyWaves": "Maximum number of empty waves",
						"abortOnTooManyNodesFound": "Abort Autonetwork if more nodes than the network can contain are found"
					},
					"discovery": {
						"maxAddr": "Maximum node address",
						"txPower": "TX power"
					}
				},
				"validation": {
					"logPath": "Please enter path to log file.",
					"buttonPin": "Please enter action button GPIO pin as an integer.",
					"greenLed": "Please enter green LED GPIO pin as an integer.",
					"redLed": "Please enter red LED GPIO pin as an integer.",
					"sck": "Please enter I2C clock GPIO pin as an integer.",
					"sda": "Please enter I2C data GPIO pin as an integer."
				},
				"messages": {
					"save": {
						"success": "IQRF Gateway Controller configuration was successfully saved. Restart the service for changes to take effect."
					}
				}
			},
			"daemon": {
				"component": "Component name",
				"instance": "Instance name",
				"interfaces": {
					"profiles": {
						"spi": "SPI device profiles",
						"uart": "UART device profiles"
					},
					"apply": "Apply interface",
					"interface": "Interface name",
					"active": {
						"title": "Active IQRF interface",
						"interface": "IQRF interface",
						"messages": {
							"save": {
								"success": "IQRF interface successfully changed."
							}
						}
					},
					"cdc": {
						"devices": "CDC interfaces",
						"messages": {
							"save": {
								"success": "IQRF USB CDC configuration successfully saved."
							}
						}
					},
					"busPin": "Bus enable GPIO pin",
					"powerPin": "Power enable GPIO pin",
					"pgmPin": "Programming mode switch GPIO pin",
					"interfacePins": "Use communication interface pins",
					"i2cPin": "I2C enable GPIO pin",
					"spiPin": "SPI enable GPIO pin",
					"uartPin": "UART enable GPIO pin",
					"spi": {
						"devices": "SPI interfaces",
						"spiReset": "Enable SPI reset",
						"messages": {
							"save": {
								"success": "IQRF SPI configuration successfully saved."
							}
						}
					},
					"uart": {
						"devices": "UART interfaces",
						"baudRate": "Baud rate",
						"uartReset": "Enable UART reset",
						"messages": {
							"save": {
								"success": "IQRF UART configuration successfully saved."
							}
						}
					},
					"dpa": {
						"timeout": "DPA handler timeout",
						"validation": {
							"timeoutMissing": "Please enter DPA handler timeout",
							"timeoutInvalid": "DPA handler timeout should be an integer greater or equal to 0."
						},
						"messages": {
							"save": {
								"success": "IQRF DPA configuration successfully saved."
							}
						}
					},
					"validation": {
						"interfaceMissing": "Please enter interface name.",
						"busPinMissing": "Please enter bus enable GPIO pin",
						"busPinInvalid": "Bus enable GPIO pin should be an integer.",
						"powerPinMissing": "Please enter power enable GPIO pin.",
						"powerPinInvalid": "Power enable GPIO pin should be an integer.",
						"pgmPinMissing": "Please enter programming mode switch GPIO pin.",
						"pgmPinInvalid": "Programming mode switch GPIO pin should be an integer.",
						"i2cPinMissing": "Please enter I2C enable GPIO pin.",
						"i2cPinInvalid": "I2C enable GPIO pin should be an integer.",
						"spiPinMissing": "Please enter SPI enable GPIO pin.",
						"spiPinInvalid": "SPI enable GPIO pin should be an integer.",
						"uartPinMissing": "Please enter UART enable GPIO pin.",
						"uartPinInvalid": "UART enable GPIO pin should be an integer."
					}
				},
				"connections": {
					"profile": "Connection profile",
					"acceptAsyncMessages": "Accept asynchronous messages",
					"validation": {
						"profileMissing": "Please enter connection profile name."
					},
					"trustStore": "Trust store",
					"keyStore": "Key store",
					"enableTls": "Enable TLS",
					"privateKey": "Private key",
					"privateKeyPassword": "Private key password",
					"cipherSuites": "Cipher suites",
					"serverCertAuth": "Enable server certificate authentication",
					"mqtt": {
						"clouds": {
							"add": "Add MQTT cloud connection profile",
							"aws": {
								"title": "Amazon AWS IoT",
								"endpoint": "Endpoint",
								"certificate": "Certificate",
								"privateKey": "Private key",
								"validation": {
									"endpointMissing": "Please enter enpoint.",
									"certificateMissing": "Please select certificate file.",
									"privateKeyMissing": "Please select private key file."
								}
							},
							"azure": {
								"title": "Microsoft Azure IoT Hub",
								"connectionString": "IoT Hub device connection string",
								"validation": {
									"connectionStringMissing": "Please enter IoT Hub device connection string."
								}
							},
							"ibm": {
								"title": "IBM Cloud",
								"orgId": "Organization ID",
								"deviceType": "Device type",
								"deviceId": "Device ID",
								"token": "Authentication token",
								"eventId": "Command and event ID",
								"validation": {
									"orgIdMissing": "Please enter organization ID.",
									"deviceTypeMissing": "Please enter device type.",
									"deviceIdMissing": "Please enter device ID.",
									"tokenMissing": "Please enter authentication token.",
									"eventIdMissing": "Please enter command and event ID."
								}
							},
							"messages": {
								"save": {
									"success": "MQTT cloud connection successfully added."
								}
							}
						},
						"actions": {
							"add": "Add MQTT connection profile",
							"edit": "Edit MQTT connection profile",
							"delete": "Delete MQTT connection profile",
							"reload": "Reload MQTT connection profiles"
						},
						"broker": "Broker URL",
						"clientId": "Client ID",
						"requestTopic": "Request topic",
						"responseTopic": "Response topic",
						"qos": "Quality of Service",
						"qosLevels": {
							"atMostOnce": "QoS 0 - At most once",
							"atLeastOnce": "QoS 1 - At least once",
							"exactlyOnce": "QoS 2 - Exactly once"
						},
						"persistence": "Persistence",
						"persistenceLevels": {
							"memory": "In-memory",
							"filesystem": "File system-based",
							"application": "Application-specific"
						},
						"keepAlive": "Keep-alive interval",
						"timeout": "Connection timeout",
						"minReconnect": "Minimum reconnect period",
						"maxReconnect": "Maximum reconnect period",
						"delete": {
							"title": "MQTT connection profile delete confirmation",
							"prompt": "Are you sure you want to delete MQTT connection profile {name}?"
						},
						"validation": {
							"clientIdMissing": "Please enter MQTT client ID.",
							"requestTopicMissing": "Please enter request topic.",
							"responseTopicMissing": "Please enter response topic.",
							"keepAliveMissing": "Please enter keep alive interval.",
							"keepAliveInvalid": "Keep alive interval should be a positive integer.",
							"timeoutMissing": "Please enter connection timeout.",
							"timeoutInvalid": "Connection timeout should be a positive integer.",
							"minReconnectMissing": "Please enter minimum reconnect period.",
							"minReconnectInvalid": "Minimum reconnect period should be an integer greater or equal to 1 second.",
							"minReconnectHigh": "Minimum reconnect period should be less or equal to maximum reconnect period.",
							"maxReconnectMissing": "Please enter maximum reconnect period.",
							"maxReconnectInvalid": "Maximum reconnect period should be at integer greater or equal to 1 second.",
							"maxReconnectLow": "Maximum reconnect period should be greater or equal to minimum reconnect period."
						},
						"messages": {
							"qos": {
								"atMostOnce": "Fastest method, but the delivery of a message is not guaranteed.",
								"atLeastOnce": "Messages are guaranteed to be delivered at least once by acknowledging receipt of a message.",
								"exactlyOnce": "Safest but slowest method. Message is guaranteed to be delivered exactly once utilizing a 4-part handshake."
							},
							"persistence": {
								"memory": "State of in-flight messages is lost in case of a client shutdown or failure. Some messages may not be delivered even with QoS 1 or higher.",
								"filesystem": "State of in-flight messages is held in persistent storage and prevents loss of messages to some degree in case of a client failure.",
								"application": "Persistence control is delegated to the application."
							},
							"save": {
								"success": "MQTT connection profile {name} successfully saved."
							},
							"delete": {
								"success": "MQTT connection profile {name} successfully deleted."
							}
						}
					},
					"udp": {
						"actions": {
							"add": "Add UDP connection profile",
							"edit": "Edit UDP connection profile",
							"delete": "Delete UDP connection profile",
							"reload": "Reload UDP connection profiles"
						},
						"localPort": "Local port",
						"remotePort": "Remote port",
						"expiration": "UDP client records expiration (in seconds)",
						"delete": {
							"title": "UDP connection profile delete confirmation",
							"prompt": "Are you sure you want to delete UDP connection profile {name}?"
						},
						"validation": {
							"localPortMissing": "Please enter local port.",
							"localPortInvalid": "Local port should be an integer between 1 and 65535.",
							"remotePortMissing": "Please enter remote port.",
							"remotePortInvalid": "Remote port should be an integer between 1 and 65535.",
							"expirationMissing": "Please enter client records expiration.",
							"expirationInvalid": "Client records expiration should be an integer greater or equal to 0."
						},
						"messages": {
							"save": {
								"success": "UDP connection profile {name} successfully saved."
							},
							"delete": {
								"success": "UDP connection profile {name} successfully deleted."
							}
						}
					}
				},
				"cache": {
					"url": "IQRF repository URL",
					"update": "Update cache periodically",
					"updatePeriod": "Cache update period (in minutes)",
					"validation": {
						"urlMissing": "Please enter IQRF repository url.",
						"updatePeriodMissing": "Please enter cache update period.",
						"updatePeriodInvalid": "Cache update period should be an integer greater or equal to 0."
					},
					"messages": {
						"save": {
							"success": "Cache and repository configuration sucessfully saved."
						}
					}
				},
				"db": {
					"autoEnumerate": "Run enumeration automatically without manual invocation",
					"enumerateOnLaunch": "Run enumeration on Daemon launch",
					"includeMetadata": "Include device metadata in response messages",
					"messages": {
						"save": {
							"success": "Database configuration successfully saved."
						}
					}
				},
				"jsonApi": {
					"raw": {
						"title": "Generic messages",
						"asyncMessages": "Allow asynchronous generic DPA messages",
						"messages": {
							"save": {
								"success": "Generic messages configuration successfully saved."
							}
						}
					},
					"splitter": {
						"title": "JSON splitter",
						"instanceId": "Instance ID",
						"validateResponses": "Validate JSON responses",
						"validation": {
							"instanceIdMissing": "Please enter instance ID."
						},
						"messages": {
							"save": {
								"success": "JSON splitter configuration successfully saved."
							}
						}
					}
				},
				"validation": {
					"instanceMissing": "Please enter instance name."
				}
			},
			"profiles": {
				"title": "Device profiles",
				"actions": {
					"apply": "Apply device profile",
					"add": "Add device profile",
					"edit": "Edit device profile",
					"delete": "Delete device profile"
				},
				"id": "Profile ID",
				"name": "Profile name",
				"deviceType": "Device type",
				"deviceTypes": {
					"adapter": "Adapter",
					"board": "Board"
				},
				"profileType": "Profile type",
				"profileTypes": {
					"spi": "SPI",
					"uart": "UART"
				},
				"delete": {
					"title": "Device configuration profile delete confirmation",
					"prompt": "Are you sure you want to delete device configuration profile {name}?"
				},
				"validation": {
					"nameMissing": "Please enter device profile name."
				},
				"messages": {
					"save": {
						"success": "Device configuration profile {name} successfully saved."
					},
					"delete": {
						"success": "Device configuration profile {name} successfully deleted."
					}
				}
			},
			"influxdb-bridge": {
				"influx": "InfluxDB client",
				"mqtt": "MQTT client",
				"org": "Organization",
				"token": "Authentication token",
				"devicesBucket": "Devices bucket name",
				"gatewayBucket": "Gateway bucket name",
				"sensorsBucket": "Sensor bucket name",
				"topicTitle": "Subscriptions",
				"topic": "Topic",
				"actions": {
					"add": "Add subscription topic",
					"edit": "Edit subscription topic",
					"delete": "Delete subscription topic",
					"deleteAll": "Delete all subscription topics"
				},
				"noTopics": "No subscription topics specified.",
				"validation": {
					"orgMissing": "Please enter organization name.",
					"devicesBucketMissing": "Please enter devices bucket name.",
					"gatewayBucketMissing": "Please enter gateway bucket name.",
					"sensorsBucketMissing": "Please enter sensors bucket name.",
					"topic": "Please enter subscription topic."
				},
				"messages": {
					"save": {
						"success": "IQRF Gateway InfluxDB Bridge configuration successfully saved."
					}
				},
				"notes": {
					"oldAuth": "User and password are used for v1.x authentication.",
					"newAuth": "Token is used for v2+ authentication. A token can be used for authentication in version 1.8 with the format <user:password>."
				}
			},
			"smtp": {
				"test": "Test configuration",
				"form": {
					"security": "Connection security",
					"securityLevels": {
						"none": "None",
						"starttls": "STARTTLS",
						"tls": "TLS"
					},
					"sender": "Sender"
				},
				"validation": {
					"hostMissing": "Please enter SMTP host.",
					"hostInvalid": "Invalid SMTP host address.",
					"portMissing": "Please enter SMTP port.",
					"portInvalid": "Invalid SMTP port number.",
					"usernameMissing": "Please enter SMTP username.",
					"passwordMissing": "Please enter SMTP password.",
					"senderMissing": "Please enter sender email.",
					"senderInvalid": "Invalid e-mail address."
				},
				"messages": {
					"save": {
						"success": "SMTP configuration successfully saved."
					}
				}
			},
			"time": {
				"gatewayDateTime": "Gateway date and time: ",
				"timezone": "Time zone",
				"datetime": "Date and time",
				"ntpSync": "Synchronize time automatically",
				"ntpServers": {
					"title": "NTP servers",
					"address": "NTP server address",
					"add": "Add NTP server",
					"edit": "Edit NTP server",
					"delete": "Delete NTP server",
					"deleteAll": "Delete all NTP servers",
					"noRecords": "No custom NTP server defined. Default NTP servers will be used for time synchronization.",
					"validation": {
						"serverMissing": "Please enter NTP server address.",
						"serverInvalid": "NTP server address should be a valid IP or fully qualified domain name."
					}
				},
				"messages": {
					"save": {
						"success": "Time and NTP configuration successfully saved."
					}
				}
			},
			"journal": {
				"forwardToSyslog": "Forward journal to syslog",
				"storage": "Storage method",
				"storages": {
					"volatile": "In-memory persistence",
					"persistent": "Filesystem persistence"
				},
				"maxSize": "Maximum disk space used by journal in MB",
				"maxFiles": "Maximum number of log files to keep",
				"maxFileSize": "Maximum log size in MB",
				"sizeRotation": "File-size based log rotation",
				"timeRotation": "Time-based log rotation",
				"timeUnit": "Time unit",
				"timeUnits": {
					"seconds": "Seconds",
					"minutes": "Minutes",
					"hours": "Hours",
					"days": "Days",
					"weeks": "Weeks",
					"months": "Months",
					"years": "Years"
				},
				"unitCount": "Unit count",
				"notes": {
					"systemDefault": "Set value to 0 to use systemd default.",
					"maxFiles": "Systemd default value is 100 files."
				},
				"validation": {
					"maxSizeMissing": "Please enter maximum disk space usable by journal.",
					"maxSizeInvalid": "Maximum disk space used should be an integer greater or equal to 0.",
					"maxFilesMissing": "Please enter maximum number of log files to keep.",
					"maxFilesInvalid": "Maximum number of files to keep should be an integer greater or equal to 1.",
					"maxFileSizeMissing": "Please enter maximum log file size.",
					"maxFileSizeInvalid": "Maximum log file size should be an integer greater or equal to 0.",
					"unitCountMissing": "Please enter unit count.",
					"unitCountInvalid": "Unit count should be an integer greater or equal to 1."
				},
				"messages": {
					"save": {
						"success": "Journal configuration successfully saved."
					}
				}
			},
			"unattendedUpgrades": {
				"interval": "Day(s)",
				"packageListUpdateInterval": "Package list update interval",
				"packageUpdateInterval": "Package update interval",
				"packageRemovalInterval": "Unnecessary package removal interval",
				"rebootOnKernelUpdate": "Reboot on kernel update",
				"notes": {
					"packageListUpdateInterval": "Set value 0 to disable automatic package list updates.",
					"packageUpdateInterval": "Set value 0 to disable automatic package updates.",
					"packageRemovalInterval": "Set value 0 to disable automatic package removal."
				},
				"validation": {
					"packageListUpdateIntervalMissing": "Please enter package list update interval.",
					"packageListUpdateIntervalInvalid": "Package list update interval should be an integer greater or equal to 0.",
					"packageUpdateIntervalMissing": "Please enter package update interval.",
					"packageUpdateIntervalInvalid": "Package update interval should be an integer greater or equal to 0.",
					"packageRemovalIntervalMissing": "Please enter package removal interval.",
					"packageRemovalIntervalInvalid": "Package removal interval should be an integer greater or equal to 0."
				}
			},
			"monit": {
				"checks": {
					"title": "System checks",
					"name": "Check name",
					"noRecords": "No checks detected."
				},
				"mmonit": {
					"title": "M/Monit connection",
					"enable": "Enable M/Monit server connection",
					"server": "M/Monit server URL"
				},
				"validation": {
					"serverMissing": "Please enter M/Monit server URL.",
					"serverInvalid": "M/Monit server URL should be IPv4, IPv6, localhost or fully-qualified domain name."
				},
				"messages": {
					"save": {
						"success": "Monit configuration has been successfully saved."
					}
				}
			},
			"mender": {
				"connection": "Connection",
				"inventory": "Inventory",
				"features": "Enabled features",
				"client": {
					"server": "Mender server URL",
					"cert": "Path to certificate",
					"tenantToken": "Tenant token",
					"inventoryPollInterval": "Inventory update interval (seconds)",
					"retryPollInterval": "Connection retry interval (seconds)",
					"updatePollInterval": "Update check interval (seconds)"
				},
				"connect": {
					"fileTransfer": "File Transfer",
					"portForward": "Port Forwarding"
				},
				"upload": {
					"title": "Mender certificate upload",
					"cert": "Certificate to upload",
					"certPath": "Path to uploaded certificate"
				},
				"validation": {
					"serverMissing": "Please enter Mender server URL.",
					"serverInvalid": "Mender server URL should be IPv4, IPv6, localhost or fully-qualified domain name.",
					"inventoryPollIntervalMissing": "Please enter inventory poll interval.",
					"inventoryPollIntervalInvalid": "Inventory poll interval should be an integer greater or equal to 0.",
					"retryPollIntervalMissing": "Please enter connection retry interval.",
					"retryPollIntervalInvalid": "Connnection retry interval should be an integer greater or equal to 0.",
					"updatePollIntervalMissing": "Please enter update check interval.",
					"updatePollIntervalInvalid": "Update check interval should be an integer greater or equal to 0.",
					"tenantTokenMissing": "Please enter Tenant token.",
					"certificateMissing": "Please select certificate file to upload."
				},
				"messages": {
					"save": {
						"success": "Mender configuration has been successfully saved."
					},
					"upload": {
						"success": "Certificate has been successfully uploaded."
					}
				}
			}
		},
		"gateway": {
			"information": {
				"board": "Board",
				"os": "Operating system",
				"gwId": "IQRF Gateway ID",
				"gwImage": "IQRF Gateway Image",
				"version": {
					"iqrfCloudProvisioning": "IQRF Cloud Provisioning",
					"iqrfGatewayController": "IQRF Gateway Controller",
					"iqrfGatewayDaemon": "IQRF Gateway Daemon",
					"iqrfGatewayInfluxdbBridge": "IQRF Gateway InfluxDB Bridge",
					"iqrfGatewaySetter": "IQRF Gateway Setter",
					"iqrfGatewayUploader": "IQRF Gateway Uploader",
					"iqrfGatewayWebapp": "IQRF Gateway Webapp"
				},
				"hostname": "Hostname",
				"hostnameChange": {
					"title": "Change hostname",
					"setSplitterId": "Set hostname as IQRF Gateway Daemon instance ID",
					"setIdeHostname": "Set hostname as IQRF IDE GW hostname",
					"validation": {
						"hostname": "Please enter hostname."
					},
					"messages": {
						"daemonRestart": "IQRF Gateway Daemon restart is required to apply the changes.",
						"save": {
							"success": "Hostname has been successfully changed."
						}
					}
				},
				"uptime": "Uptime",
				"addresses": {
					"ip": "IP addresses",
					"mac": "MAC addresses"
				},
				"tr": {
					"title": "TR info",
					"error": "Cannot get information about the Coordinator.",
					"moduleType": "Module type",
					"mcuType": "MCU type",
					"moduleId": "MID",
					"os": "OS",
					"dpa": "DPA",
					"hwpid": "HWPID",
					"hwpidVersion": "HWPID ver.",
					"voltage": "Supply voltage"
				},
				"usages": {
					"memory": "Memory usage",
					"disks": "Disk usages",
					"swap": "Swap usage",
					"used": "Used"
				},
				"gwMode": "Daemon mode",
				"diagnostics": "Download diagnostics"
			},
			"mode": {
				"current": "Current mode",
				"startup": "Startup mode",
				"modes": {
					"forwarding": "Forwarding mode",
					"operational": "Operational mode",
					"service": "Service mode",
					"unknown": "Unknown"
				},
				"messages": {
					"setFailed": "Mode change request failed.",
					"setSuccess": "Mode successfully changed to {mode}.",
					"setTimeout": "Mode change request timed out."
				}
			},
			"power": {
				"powerOff": {
					"action": "Power off",
					"title": "Power off confirmation",
					"prompt": "The gateway will power off within 60 seconds."
				},
				"reboot": {
					"action": "Reboot",
					"title": "Reboot confirmation",
					"prompt": "The gateway will reboot within 60 seconds."
				},
				"messages": {
					"powerOffSuccess": "Your device will be powered off at {time}.",
					"powerOffFailed": "Failed to schedule gateway poweroff: {error}.",
					"rebootSuccess": "Your device will be rebooted at {time}, the reboot may take tens of seconds.",
					"rebootFailed": "Failed to schedule gateway reboot: {error}."
				},
				"stats": {
					"title": "Power statistics",
					"columns":{
						"start": "Startup time",
						"shutdown": "Shutdown time",
						"graceful": "Graceful shutdown",
						"uptime": "Uptime",
						"downtime": "Downtime"
					},
					"messages": {
						"tuptimeMissing": "Tuptime utility is not installed. Please install it to see power statistics.",
						"fetchFailed": "Failed to retrieve power statistics."
					}
				}
			},
			"services": {
				"actions": {
					"enable": "Enable service",
					"disable": "Disable service",
					"start": "Start service",
					"stop": "Stop service",
					"restart": "Restart service",
					"refresh": "Refresh service",
					"refreshAll": "Refresh services",
					"status": "Toggle status"
				},
				"service": {
					"apcupsd": {
						"name": "APC UPS Daemon",
						"description": ""
					},
					"iqrf-gateway-controller": {
						"name": "IQRF Gateway Controller",
						"description": ""
					},
					"iqrf-gateway-daemon": {
						"name": "IQRF Gateway Daemon",
						"description": "IQRF Gateway Daemon is a core component of the IQRF Gateway."
					},
					"iqrf-gateway-influxdb-bridge": {
						"name": "IQRF Gateway InfluxDB Bridge",
						"description": "Stores sensor measurement data in InfluxDB."
					},
					"iqrf-gateway-translator": {
						"name": "IQRF Gateway Translator",
						"description": ""
					},
					"mender-client": {
						"name": "Mender",
						"description": "Mender is an over-the-air update manager for IoT and embedded devices."
					},
					"monit": {
						"name": "Monit",
						"description": "Monit is a utility for management and monitoring of Unix systems."
					},
					"ModemManager": {
						"name": "Modem Manager",
						"description": "Modem Manager is used to manage GSM modems."
					},
					"nodered": {
						"name": "Node-RED",
						"description": ""
					},
					"ssh": {
						"name": "SSH daemon",
						"description": "SSH daemon is used to access the device via SSH protocol."
					},
					"systemd-journald": {
						"name": "Systemd Journal",
						"description": "Systemd Journal collects and stores logging data from services and processes."
					},
					"systemd-timesyncd": {
						"name": "Systemd Time Sync Service",
						"description": ""
					},
					"unattended-upgrades": {
						"name": "Unattended Upgrades",
						"description": "Unattended upgrades is a service used to keep device software up-to-date automatically."
					}
				},
				"table": {
					"service": "Service"
				}
			}
		},
		"maintenance": {
			"backup": {
				"backup": {
					"title": "Gateway backup",
					"item": "Software and system configuration",
					"software": {
						"iqrf": "IQRF Gateway Software",
						"mender": "Mender",
						"monit": "Monit"
					},
					"system": {
						"hostname": "Hostname",
						"network": "Network manager",
						"time": "Time synchronization",
						"journal": "Journal"
					}
				},
				"restore": {
					"title": "Gateway restore",
					"archive": "Backup archive",
					"validation": {
						"archiveMissing": "Please select gateway backup archive."
					},
					"messages": {
						"save": {
							"success": "Gateway successfully restored from backup archive and will reboot at {time}."
						}
					}
				}
			},
			"mender": {
				"update": {
					"artifact": "Mender artifact",
					"install": "Install artifact",
					"commit": "Commit update",
					"rollback": "Rollback update",
					"log": {
						"title": "Mender log",
						"button": "Show log"
					},
					"validation": {
						"artifactMissing": "Please select mender artifact file."
					},
					"messages": {
						"install": {
							"success": "Mender artifact update has been successfully installed."
						},
						"commit": {
							"success": "Update has been succesfully commited."
						},
						"rollback": {
							"success": "Update has been succesfully rolled back."
						}
					}
				},
				"remount": {
					"title": "Re-mount filesystem",
					"readonly": "Read-only",
					"readwrite": "Read-write",
					"messages": {
						"success": "Filesystem has been successfully re-mounted."
					}
				}
			}
		},
		"accessControl": {
			"users": {
				"actions": {
					"add": "Add user",
					"edit": "Edit user",
					"delete": "Delete user"
				},
				"delete": {
					"title": "User delete confirmation",
					"prompt": "Are you sure you want to delete user {user}?"
				},
				"username": "Username",
				"email": "E-mail address",
				"password": "Password",
				"language": "Language",
				"role": "Role",
				"roles": {
					"admin": "Administrator",
					"normal": "Normal user",
					"basicadmin": "Basic admin",
					"basic": "Basic user"
				},
				"state": "State",
				"states": {
					"unverified": "Unverified",
					"verified": "Verified"
				},
				"validation": {
					"username": "Please enter the username.",
					"password": "Please enter the password.",
					"emailInvalid": "Invalid e-mail address format."
				},
				"messages": {
					"delete": {
						"success": "User {user} has been deleted successfully."
					}
				}
			},
			"apiKeys": {
				"actions": {
					"add": "Add API key",
					"edit": "Edit API key",
					"delete": "Delete API key"
				},
				"form": {
					"addTitle": "Add API key",
					"editTitle": "Edit API key",
					"expiration": "Set expiration"
				},
				"table": {
					"expiration": "Expiration"
				},
				"delete": {
					"title": "API key delete confirmation",
					"prompt": "Are you sure you want to delete API key ID {id}?"
				},
				"validation": {
					"descriptionMissing": "Please enter API key description."
				}
			},
			"sshKeys": {
				"actions": {
					"add": "Add SSH key",
					"edit": "Edit SSH key",
					"delete": "Delete SSH key"
				},
				"form": {
					"addTitle": "Add SSH key",
					"editTitle": "Edit SSH key"
				},
				"table": {
					"createdAt": "Date created",
					"type": "Key type",
					"hash": "Hash",
					"key": "Public key"
				},
				"delete": {
					"title": "SSH public key delete confirmation",
					"prompt": "Are you sure you want to delete SSH public key ID {id}?"
				},
				"installNote": "Add SSH public keys to be used for key-based authorization when accessing the device.",
				"supported": "The following SSH key types are supported.",
				"noneSupported": "No SSH key type supported.",
				"fetchFailed": "Failed to retrieve list of supported SSH key types."
			}
		},
		"sshService": {
			"note": "Set SSH service status.",
			"enable": "Start SSH service on every boot.",
			"start": "Start SSH service now, once.",
			"disable": "Do not start SSH service."
		}
	},
	"pages": {
		"gateway": {
			"title": "Gateway",
			"description": "Display gateway information, services and power controls.",
			"information": {
				"title": "Information",
				"description": "Information about this gateway."
			},
			"logs": {
				"title": "Logs",
				"description": "Display gateway logs."
			},
			"mode": {
				"title": "Mode",
				"description": "Change gateway mode."
			},
			"power": {
				"title": "Power control",
				"description": "Powers off or reboots this gateway."
			},
			"services": {
				"title": "Services",
				"description": "Control services and display their status."
			}
		},
		"configuration": {
			"title": "Configuration",
			"description": "Configure gateway, IQRF software and other services.",
			"controller": {
				"title": "IQRF GW Controller",
				"description": "Configure IQRF Gateway Controller.",
				"settings": {
					"title": "Settings",
					"description": "Update IQRF Gateway Controller settings."
				}
			},
			"daemon": {
				"title": "IQRF GW Daemon",
				"description": "Configure IQRF Gateway Daemon.",
				"interfaces": {
					"title": "Interfaces",
					"description": "Configure IQRF communication interfaces.",
					"dpa": {
						"title": "DPA",
						"description": "Configure DPA channel and active IQRF interface."
					},
					"uart": {
						"title": "UART",
						"description": "Configure UART interface."
					},
					"spi": {
						"title": "SPI",
						"description": "Configure SPI interface."
					},
					"cdc": {
						"title": "USB CDC",
						"description": "Configure USB CDC interface."
					}
				},
				"connections": {
					"title": "Connections",
					"description": "Configure WebSocket, MQTT, MQ and UDP connections.",
					"mqtt": {
						"title": "MQTT",
						"description": "Configure MQTT connections."
					},
					"udp": {
						"title": "UDP",
						"description": "Configure UDP connections."
					}
				},
				"cache": {
					"title": "Cache and repository",
					"description": "Configure cache and IQRF repository."
				},
				"db": {
					"title": "Device database",
					"description": "Configure device database."
				},
				"jsonApi": {
					"title": "JSON API",
					"description": "Configure JSON API."
				}
			},
			"influxdb-bridge": {
				"title": "IQRF GW InfluxDB Bridge",
				"description": "Configure IQRF Gateway InfluxDB Bridge."
			},
			"smtp": {
				"title": "SMTP",
				"description": "Configure SMTP server."
			},
			"time": {
				"title": "Time",
				"description": "Configure time, timezone and NTP synchronization."
			},
			"journal": {
				"title": "Journal",
				"description": "Configure systemd Journal logging."
			},
			"unattendedUpgrades": {
				"title": "Automatic upgrades",
				"description": "Configure automatic unattended upgrades service."
			},
			"monit": {
				"title": "Monit",
				"description": "Configure Monit client and system health checks."
			},
			"mender": {
				"title": "Mender",
				"description": "Configure Mender client for remote and features."
			}
		},
		"maintenance": {
			"title": "Maintenance",
			"description": "Gateway maintenance tools and utilities.",
			"backup": {
				"title": "Backup and restore",
				"description": "Backup or restore gateway."
			},
			"mender": {
				"title": "Mender update",
				"description": "Update gateway using Mender artifacts."
			}
		},
		"install": {
			"title": "Installation wizard",
			"user": {
				"title": "Create a new user"
			},
			"smtp": {
				"title": "Configure SMTP server"
			},
			"sshKeys": {
				"title": "Add SSH keys"
			},
			"sshService": {
				"title": "SSH service"
			}
		},
		"accessControl": {
			"title": "Access control",
			"description": "Manage access via users, API or SSH keys.",
			"users": {
				"title": "Users",
				"description": "Manager Webapp users."
			},
			"apiKeys": {
				"title": "API keys",
				"description": "Manage API keys."
			},
			"sshKeys": {
				"title": "SSH keys",
				"description": "Manage SSH keys."
			}
		},
		"docs": {
			"title": "Documentation",
			"description": "Opens documentation in a new tab."
		}
	}
}
