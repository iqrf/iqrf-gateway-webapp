#!/bin/bash

# Copyright 2017-2024 IQRF Tech s.r.o.
# Copyright 2019-2024 MICRORISC s.r.o.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# postinst script for iqrf-gateway-webapp

set -e

GATEWAY_FILE=/etc/iqrf-gateway.json

fix_gateway_file() {
	if [ -f "${GATEWAY_FILE}" ] ; then
		CONTENT=$(cat "${GATEWAY_FILE}")
		echo "${CONTENT}" | jq --tab 'del(.gwToken)' > "${GATEWAY_FILE}"
	fi
}

nginx_default_site() {
	SITE_AVAILABLE_PATH=/etc/nginx/sites-available/iqrf-gateway-webapp.localhost
	SITE_AVAILABLE_PATH_HTTPS=/etc/nginx/sites-available/iqrf-gateway-webapp-https.localhost
	WEBAPP_CONFIG_DIR=/etc/iqrf-gateway-webapp/nginx
	if [ -f "${GATEWAY_FILE}" ] ; then
		image=$(jq -r '.gwImage' "${GATEWAY_FILE}")
		case "${image}" in
			industrial*)
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-industrial.localhost" "${SITE_AVAILABLE_PATH}"
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-industrial-https.localhost" "${SITE_AVAILABLE_PATH_HTTPS}" ;;
			iqaros-*-v2*)
				: ;;
			iqaros*|nakit*)
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-iqaros.localhost" "${SITE_AVAILABLE_PATH}"
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-iqaros-https.localhost" "${SITE_AVAILABLE_PATH_HTTPS}" ;;
			iqube*)
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-iqube.localhost" "${SITE_AVAILABLE_PATH}"
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-iqube-https.localhost" "${SITE_AVAILABLE_PATH_HTTPS}" ;;
			*)
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp.localhost" "${SITE_AVAILABLE_PATH}"
				ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-https.localhost" "${SITE_AVAILABLE_PATH_HTTPS}" ;;
		esac
	else
		ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp.localhost" "${SITE_AVAILABLE_PATH}"
		ln -sf "${WEBAPP_CONFIG_DIR}/iqrf-gateway-webapp-https.localhost" "${SITE_AVAILABLE_PATH_HTTPS}"
	fi
}

nginx_virtualhost_enable() {
	if [ -f "${GATEWAY_FILE}" ] ; then
		image=$(jq -r '.gwImage' "${GATEWAY_FILE}")
		if [[ ! "${image}" =~ iqaros-.*-v2.* ]] ; then
			ln -s "${SITES_AVAILABLE}/${DEFAULT_CONFIG}" "${SITES_ENABLED}/${DEFAULT_CONFIG}"
		fi
	else
		ln -s "${SITES_AVAILABLE}/${DEFAULT_CONFIG}" "${SITES_ENABLED}/${DEFAULT_CONFIG}"
	fi
}

nginx_virtualhost_install() {
	# nginx virtualhost directories
	SITES_AVAILABLE=/etc/nginx/sites-available
	SITES_ENABLED=/etc/nginx/sites-enabled
	# Default virtualhost path
	DEFAULT_CONFIG=iqrf-gateway-webapp.localhost
	# HTTPS redirect virtualhost path
	HTTPS_CONFIG=iqrf-gateway-webapp-https.localhost

	# Disable default virtualhost
	if [ -e "${SITES_ENABLED}/default" ] ; then
		rm "${SITES_ENABLED}/default"
	fi

	# Remove broken symlinks to virtualhosts and non-symlinked virtualhosts
	for SITES in ${SITES_AVAILABLE} ${SITES_ENABLED} ; do
		for CONFIG in ${DEFAULT_CONFIG} ${HTTPS_CONFIG} ; do
			if [ -L "${SITES}/${CONFIG}" ] && [ ! -e "${SITES}/${CONFIG}" ] ; then
				rm "${SITES}/${CONFIG}"
			elif [ ! -L "${SITES}/${CONFIG}" ] && [ -e "${SITES}/${CONFIG}" ] ; then
				rm "${SITES}/${CONFIG}"
			fi
		done
	done

	# Create symlinks to virtualhosts
	if [ ! -e "${SITES_AVAILABLE}/${DEFAULT_CONFIG}" ] || [ ! -e "${SITES_AVAILABLE}/${HTTPS_CONFIG}" ] ; then
		nginx_default_site
	fi

	# Enable default virtualhost when no other virtualhost is enabled
	if [ ! -L "${SITES_ENABLED}/${DEFAULT_CONFIG}" ] && [ ! -L "${SITES_ENABLED}/${HTTPS_CONFIG}" ] ; then
		nginx_virtualhost_enable
	fi

	# Reload nginx
	if deb-systemd-invoke is-enabled nginx.service ; then
		deb-systemd-invoke reload nginx.service
	fi
}

openssl_create_ca() {
	DAEMON_CERT_DIR=/etc/iqrf-gateway-daemon/certs/core
	WEBAPP_CERT_DIR=/etc/iqrf-gateway-webapp/certs
	if [ -f "${DAEMON_CERT_DIR}/cert.pem" ] && [ -f "${DAEMON_CERT_DIR}/privkey.pem" ] ; then
		rm -rf "${WEBAPP_CERT_DIR}/cert.pem" "${WEBAPP_CERT_DIR}/privkey.pem"
		ln -s "${DAEMON_CERT_DIR}/cert.pem" "${WEBAPP_CERT_DIR}/cert.pem"
		ln -s "${DAEMON_CERT_DIR}/privkey.pem" "${WEBAPP_CERT_DIR}/privkey.pem"
		chmod 600 ${WEBAPP_CERT_DIR}/*.pem
	fi
	if [ ! -f "${WEBAPP_CERT_DIR}/cert.pem" ] || [ ! -f "${WEBAPP_CERT_DIR}/privkey.pem" ] ; then
		openssl ecparam -name secp384r1 -genkey -param_enc named_curve -out ${WEBAPP_CERT_DIR}/privkey.pem
    openssl req -new -x509 -sha256 -nodes -days 3650 \
      -subj "/CN=IQRF Gateway/C=CZ/ST=Hradec Kralove Region/L=Jicin/O=IQRF Tech s.r.o." \
      -key ${WEBAPP_CERT_DIR}/privkey.pem -out ${WEBAPP_CERT_DIR}/cert.pem
		chmod 600 ${WEBAPP_CERT_DIR}/*.pem
	fi
}

webapp_database_migration() {
	if [ ! -f /var/lib/iqrf-gateway-webapp/database.db ] && [ -f /usr/share/iqrf-gateway-webapp/app/config/database.db ] ; then
		mv /usr/share/iqrf-gateway-webapp/app/config/database.db /var/lib/iqrf-gateway-webapp/database.db
		chown www-data:www-data /var/lib/iqrf-gateway-webapp/database.db
	fi
	su - www-data -s /bin/bash -c '/usr/sbin/iqrf-gateway-webapp-manager database:create > /dev/null'
	su - www-data -s /bin/bash -c '/usr/sbin/iqrf-gateway-webapp-manager migrations:migrate --no-interaction > /dev/null'
}

webapp_database_fixtures() {
	su - www-data -s /bin/bash -c '/usr/sbin/iqrf-gateway-webapp-manager doctrine:fixtures:load --append --no-interaction > /dev/null'
}

webapp_iqrf_os_patches_import() {
	su - www-data -s /bin/bash -c '/usr/sbin/iqrf-gateway-webapp-manager iqrf-os:import-patches > /dev/null'
}

webapp_remove_cache() {
	if [ -d /var/cache/iqrf-gateway-webapp/cache ] ; then
		rm -rf /var/cache/iqrf-gateway-webapp/cache
	fi
}

webapp_remove_old_dirs() {
	if [ -d /usr/share/iqrf-gateway-webapp/log ] ; then
		mv /usr/share/iqrf-gateway-webapp/log/* /var/log/iqrf-gateway-webapp/
		rm -rf /usr/share/iqrf-gateway-webapp/log
	fi
	if [ -d /usr/share/iqrf-gateway-webapp/temp ] ; then
		rm -rf /usr/share/iqrf-gateway-webapp/temp
	fi
}

webapp_repair_permissions() {
	chown -R www-data:www-data /var/cache/iqrf-gateway-webapp
	chown -R www-data:www-data /var/lib/iqrf-gateway-webapp
	chown -R www-data:www-data /var/log/iqrf-gateway-webapp
}

if [ "$1" = "configure" ]; then
	fix_gateway_file
	openssl_create_ca
	if [ -d /etc/nginx/ ] ; then
		nginx_virtualhost_install
	fi
	webapp_remove_cache
	webapp_remove_old_dirs
	webapp_repair_permissions
	webapp_database_migration
	webapp_database_fixtures
	webapp_iqrf_os_patches_import
fi

if true; then
	if [ -e /usr/share/apache2/apache2-maintscript-helper ] ; then
		. /usr/share/apache2/apache2-maintscript-helper
		a2dissite 000-default.conf
		for mod in deflate filter headers http2 proxy proxy_http proxy_fcgi proxy_wstunnel rewrite ssl ; do
			apache2_invoke enmod $mod || true
		done
		apache2_invoke ensite iqrf-gateway-webapp.conf || exit 1
	fi
fi

#DEBHELPER#
