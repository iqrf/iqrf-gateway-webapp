{
	"cloud": {
		"title": "Clouds",
		"description": "Add a connection into cloud services.",
		"messages": {
			"downloadFailure": "The webapp has not been able to download the root CA certificate. Probably the gateway has not been connected into the Internet.",
			"cannotCreateDir": "The webapp has not been able to create a directory for the certificates.",
			"success": "The new connection to the cloud service has been created successfully.",
			"timeout": "Request to create new connection has timed out."
		},
		"amazonAws": {
			"title": "Amazon AWS IoT",
			"description": "Adds a new MQTT connection into Amazon AWS IoT.",
			"form": {
				"title": "Amazon AWS IoT MQTT connection wizard",
				"endpoint": "Endpoint"
			},
			"messages": {
				"mismatchedCrtAndKey": "The private key does not correspond to the certificate."
			},
			"errors": {
				"endpoint": "Please enter the endpoint.",
				"certificate": "Please enter the certificate.",
				"key": "Please enter the private key."
			}
		},
		"hexio": {
			"title": "Hexio IoT Platform",
			"description": "Adds a new MQTT connection into Hexio IoT Platform.",
			"form": {
				"title": "Hexio IoT Platform MQTT connection wizard"
			}
		},
		"ibmCloud": {
			"title": "IBM Cloud",
			"description": "Adds a new MQTT connection into IBM Cloud.",
			"form": {
				"title": "IBM Cloud MQTT connection wizard",
				"organizationId": "Organization ID",
				"deviceType": "Device type",
				"deviceId": "Device ID",
				"token": "Authentication token",
				"eventId": "Command and event ID"
			},
			"errors": {
				"organizationId": "Please enter the organization ID.",
				"deviceType": "Please enter the device type.",
				"deviceId": "Please enter the device ID.",
				"token": "Please enter the authentication token.",
				"eventId": "Please enter command and event ID."
			}
		},
		"intelimentsInteliGlue": {
			"title": "Inteliments InteliGlue",
			"description": "Adds a new MQTT connection into Inteliments InteliGlue.",
			"form": {
				"title": "Inteliments InteliGlue MQTT connection wizard",
				"rootTopic": "Root Topic",
				"assignedPort": "Assigned Port"
			},
			"errors": {
				"rootTopic": "Please enter the root topic.",
				"assignedPort": "Please enter the assigned port.",
				"assignedPortRange": "Port has to be an integer in range from 0 to 65535."
			}
		},
		"msAzure": {
			"title": "Microsoft Azure IoT hub",
			"description": "Adds a new MQTT connection into Microsoft Azure IoT Hub.",
			"form": {
				"title": "Microsoft Azure IoT Hub MQTT connection wizard",
				"connectionString": "IoT Hub Connection String for Device"
			},
			"messages": {
				"invalidConnectionString": "Invalid MS Azure IoT Hub connection string for device."
			},
			"errors": {
				"connectionString": "Please enter IoT Hub Connection String for Device."
			}
		},
		"pixla": {
			"title": "PIXLA device management",
			"description": "Manages PIXLA client service.",
			"dashboard": "Visit dashboard",
			"editModal": {
				"title": "Set new PIXLA platform token",
				"token": "New PIXLA token"
			},
			"token": "Token",
			"messages": {
				"disabled": "PIXLA manager is disabled.",
				"failure": "An error occurred while saving the new PIXLA token.",
				"success": "New PIXLA token has been successfully saved."
			},
			"errors": {
				"token": "Please enter PIXLA platform token."
			}
		},
		"guides": {
			"pdf": "PDF guide",
			"video": "Video guide"
		}
	},
	"daemonStatus": {
		"mode": "Daemon mode",
		"modes": {
			"operational": "Operational",
			"forwarding": "Forwarding",
			"service": "Service",
			"unknown": "Unknown"
		},
		"websocket": {
			"title": "Websocket status",
			"connected": "Connected",
			"notConnected": "Not connected"
		},
		"modalTitle": "Daemon mode notice",
		"modalPrompt": "IQRF GW Daemon is in service mode. Change Daemon mode to operational or forwarding before using this feature."
	},
	"states": {
		"disabled": "Disabled",
		"enabled": "Enabled"
	},
	"forms": {
		"fields": {
			"address": "Address",
			"id": "ID",
			"username": "User name",
			"password": "Password",
			"certificate": "Certificate",
			"privateKey": "Private Key",
			"clientId":"Client ID",
			"requestTopic": "Topic for requests",
			"responseTopic": "Topic for responses",
			"instanceName": "Name of instance",
			"messageLevel": {
				"trace": "Trace",
				"debug": "Debug",
				"info": "Info",
				"warning": "Warning",
				"error": "Error"
			},
			"verbose": "Verbose mode",
			"coordinator": "Coordinator"
		},
		"errors": {
			"username": "Please enter the username.",
			"password": "Please enter the password.",
			"clientId": "Please enter the client ID.",
			"requestTopic": "Please enter the topic for requests.",
			"responseTopic": "Please enter the topic for responses.",
			"integer": "This parameter should be an integer."
		},
		"import": "Import",
		"export": "Export",
		"ok": "OK",
		"add": "Add",
		"close": "Close",
		"cancel": "Cancel",
		"edit": "Edit",
		"pingNodes": "Ping nodes",
		"no": "No",
		"refresh": "Refresh",
		"read": "Read",
		"save": "Save",
		"saveRestart": "Save and restart",
		"send": "Send",
		"yes": "Yes",
		"write": "Write",
		"runAutonetwork": "Run AutoNetwork",
		"runDiscovery": "Run Discovery",
		"bond": "Bond Node",
		"unbond": "Unbond Node",
		"clearBonds": "Clear All Bonds",
		"enumerate": "Enumerate",
		"upload": "Upload",
		"update": "Update",
		"backup": "Backup",
		"restore": "Restore",
		"verify": "Verify",
		"load": "Load",
		"allSteps": "Run All Steps",
		"on": "On",
		"off": "Off",
		"skip": "Skip",
		"downloadBackup": "Download backup",
		"messages": {
			"getConfTimeout": "The request to retrieve current configuration timed out.",
			"saveConfTimeout": "The request to save new configuration timed out.",
			"saveSuccess": "Configuration has been successfully saved.",
			"submitBadRequest": "Invalid JSON syntax.",
			"submitServerError": "Internal server error has occurred.",
			"componentNotFound": "Component or instance not found.",
			"fetchFail": "Failed to retrieve component or instance configuration.",
			"deviceOffline": "Device at address {address} is offline.",
			"noDevice": "No device is bonded at address {address}.",
			"coordinatorOffline": "Coordinator device is offline."
		}
	},
	"config": {
		"title": "Configuration",
		"description": "Edit configuration.",
		"success": "The configuration has been saved successfully.",
		"migration": {
			"title": "Migration",
			"description": "Migration of gateway service configurations.",
			"form": {
				"importButton": "Configuration to import",
				"import": "Import configuration",
				"export": "Export configuration"
			},
			"messages": {
				"importButton": "Please select a ZIP archive with a configuration to import.",
				"imported": "The configuration has been imported.",
				"invalidConfig": "The ZIP archive contains invalid configuration.",
				"invalidFormat": "Uploaded invalid file format.",
				"readConfig": "Cannot read zip archive with a configuration."
			}
		},
		"daemon": {
			"title": "IQRF GW daemon",
			"description": "IQRF Daemon configuration",
			"main": {
				"title": "Main configuration",
				"description": "Main configuration of IQRF Gateway Daemon.",
				"form": {
					"applicationName": "Application name",
					"resourceDir": "Resource directory",
					"dataDir": "Data directory",
					"cacheDir": "Cache directory",
					"userDir": "User directory",
					"configurationDir": "Configuration directory",
					"deploymentDir": "Deployment directory"
				}
			},
			"components": {
				"title": "Components",
				"description": "Manage components.",
				"add": "Add component",
				"edit": "Edit component",
				"form": {
					"name": "Component name",
					"libraryPath": "Library path",
					"libraryName": "Library name",
					"startLevel": "Start level"
				},
				"messages": {
					"deletePrompt": "Do you really want to delete component {component}?",
					"deleteTitle": "Delete component",
					"deleteSuccess": "Configuration of component {component} has been successfully deleted.",
					"addSuccess": "Configuration of component {component} has been successfully added.",
					"editSuccess": "Configuration of component {component} has been successfully updated.",
					"multipleInterfaces": "Only one IQRF interface can be enabled at a time."
				},
				"errors": {
					"name": "Please enter name of component.",
					"libraryPath": "Please enter path to component's library directory.",
					"libraryName": "Please enter name of component's library file.",
					"startLevel": "Please enter component's start level."
				}
			},
			"interfaces": {
				"title": "Interfaces",
				"description": "Configuration of IQRF communication interfaces.",
				"messages": {
					"noInterface": "All IQRF communication interfaces are disabled.",
					"updateSuccess": "Interface {interface} has been successfully enabled. Restart IQRF Gateway Daemon for changes to take effect.",
					"updateFailed": "An error occured while updating interface settings."
				},
				"form": {
					"interface": "Select active interface",
					"placeholder": "Please select communication interface."
				},
				"types": {
					"cdc": "CDC",
					"spi": "SPI",
					"uart": "UART"
				},
				"iqrfCdc": {
					"title": "IQRF CDC interface",
					"description": "IQRF CDC interface settings.",
					"form": {
						"interface": "CDC interface name"
					},
					"errors": {
						"instance": "Please enter CDC interface instance name.",
						"iqrfInterface": "Please enter CDC interface name."
					},
					"mappings": "Available CDC mappings"
				},
				"iqrfSpi": {
					"title": "IQRF SPI interface",
					"description": "IQRF SPI interface settings.",
					"form": {
						"iqrfInterface": "SPI interface name",
						"spiReset": "Enable SPI reset"
					},
					"errors": {
						"instance": "Please enter SPI interface instance name.",
						"iqrfInterface": "Please enter SPI interface name."
					},
					"mappings": "Available SPI mappings"
				},
				"iqrfUart": {
					"title": "IQRF UART interface",
					"description": "IQRF UART interface settings.",
					"form": {
						"iqrfInterface": "UART interface name",
						"baudRate": "UART baud rate",
						"uartReset": "UART reset"
					},
					"errors": {
						"instance": "Please enter UART interface instance name.",
						"iqrfInterface": "Please enter UART interface name.",
						"baudRate": "Please select UART baud rate."
					},
					"mappings": "Available UART mappings"
				},
				"iqrfDpa":{
					"title": "IQRF DPA interface",
					"description": "IQRF DPA interface settings.",
					"form": {
						"DpaHandlerTimeout": "DPA Confirmation/Response timeout in milliseconds"
					},
					"errors": {
						"instance": "Please enter name of IQRF DPA instance.",
						"DpaHandlerTimeout": "Please enter default DPA Confirmation/Response timeout greater or equal to 0."
					}
				},
				"interfaceMapping": {
					"boards": "Boards",
					"interfaces": "Interfaces",
					"add": "Add mapping",
					"edit": "Edit mapping",
					"set": "Set mapping",
					"remove": "Remove mapping",
					"form": {
						"type": "Mapping type",
						"name": "Mapping name",
						"interface": "Mapping device name",
						"powerPin": "Power enable GPIO pin",
						"busPin": "Bus enable GPIO pin",
						"pgmPin": "Programming mode switch GPIO pin",
						"gateway": "IQRF Gateway mapping",
						"i2cPin": "I2C interface enable GPIO pin *",
						"spiPin": "SPI interface enable GPIO pin *",
						"uartPin": "UART interface enable GPIO pin *",
						"gwOnly": "* IQRF Gateway only"
					},
					"errors": {
						"typeSelect": "Please select mapping type.",
						"name": "Please enter mapping name.",
						"interface": "Please enter device name.",
						"busPin": "Please enter bus enable GPIO pin number.",
						"pgmPin": "Please enter programming mode switch GPIO pin number.",
						"powerPin": "Please enter power enable GPIO pin number.",
						"i2cPin": "Please enter I2C interface enable GPIO pin number.",
						"spiPin": "Please enter SPI interface enable GPIO pin number.",
						"uartPin": "Please enter UART interface enable GPIO pin number."
					},
					"messages": {
						"invalid": "Invalid mapping content.",
						"notFound": "Mapping not found.",
						"removePrompt": "Do you really want to remove mapping {mapping}?",
						"removeSuccess": "Mapping {mapping} has been successfully removed.",
						"addSuccess": "Mapping {mapping} has been succesfully created.",
						"editSuccess": "Mapping {mapping} has been successfully edited."
					}
				}
			},
			"messagings": {
				"title": "Messagings",
				"description": "Configuration of messagings.",
				"mqtt": {
					"title": "MQTT interface",
					"description": "MQTT interface settings.",
					"add": "Add MQTT interface",
					"edit": "Edit MQTT interface",
					"form": {
						"BrokerAddr": "Broker address",
						"Persistence": "Persistence",
						"QoS": "QoS",
						"QoSes": {
							"0": "QoS 0 - At most once",
							"1": "QoS 1 - At least once",
							"2": "QoS 2 - Exactly once"
						},
						"User": "User",
						"EnabledSSL": "Enabled TLS",
						"KeepAliveInterval": "Keep alive interval",
						"ConnectTimeout": "Connection timeout",
						"MinReconnect": "Minimal count of reconnects",
						"MaxReconnect": "Maximal count of reconnects",
						"TrustStore": "CA certificate",
						"PrivateKeyPassword": "Private key password",
						"EnabledCipherSuites": "Enabled cipher suites",
						"EnableServerCertAuth": "Enable server certificate authentication"
					},
					"messages": {
						"addSuccess": "MQTT interface instance {instance} has been added.",
						"deletePrompt": "Do you really want to delete MQTT interface instance {instance}?",
						"deleteTitle": "Delete MQTT interface instance",
						"deleteSuccess": "MQTT interface instance {instance} has been deleted.",
						"editSuccess": "MQTT interface instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of MQTT instance.",
						"BrokerAddr": "Please enter address of MQTT broker.",
						"Persistence": "Please enter persistence.",
						"QoS": "Please select QoS.",
						"KeepAliveInterval": "Please enter keep alive interval greater or equal to 0 (disabled).",
						"ConnectTimeout": "Please enter connection timeout greater or equal to 0 (disabled).",
						"MinReconnect": "Please enter minimum number of reconnects greater or equal to 0 (disabled) and less or equal to maximum number of reconnects.",
						"MaxReconnect": "Please enter maximum number of reconnects greater or equal to minimum number of reconnects."
					}
				},
				"websocket": {
					"title": "WebSocket interface",
					"description": "IQRF WebSocket interface settings.",
					"form": {
						"WebsocketPort": "WebSocket port",
						"acceptOnlyLocalhost": "Accept only connection from localhost",
						"tlsEnabled": "Enable TLS",
						"tlsMode": "TLS mode",
						"tlsModes": {
							"intermediate": "Intermediate",
							"modern": "Modern",
							"old": "Old",
							"descriptions": {
								"intermediate": "General-purpose servers with a variety of clients, recommended for almost all systems. Supports Firefox 27, Android 4.4.2, Chrome 31, Edge, IE 11 on Windows 7, Java 8u31, OpenSSL 1.0.1, Opera 20, and Safari 9.",
								"modern": "Services with clients that support TLS 1.3 and don't need backward compatibility. Supports Firefox 63, Android 10.0, Chrome 70, Edge 75, Java 11, OpenSSL 1.1.1, Opera 57, and Safari 12.1.",
								"old": "Compatible with a number of very old clients, and should be used only as a last resort. Supports Firefox 1, Android 2.3, Chrome 1, Edge 12, IE8 on Windows XP, Java 6, OpenSSL 0.9.8, Opera 5, and Safari 1."
							}
						},
						"requiredInterfaces": "Required interfaces",
						"requiredInterface": {
							"add": "Add another interface",
							"remove": "Remove this interface",
							"name": "Required interface name",
							"instance": "Required WebSocket service"
						}
					},
					"interface": {
						"title": "Websocket interfaces",
						"add": "Add WebSocket interface",
						"edit": "Edit WebSocket interface"
					},
					"messaging": {
						"title": "WebSocket messagings",
						"add": "Add WebSocket messaging",
						"edit": "Edit WebSocket messaging",
						"messages": {
							"deleteTitle": "Delete WebSocket messaging",
							"deletePrompt": "Do you really want to delete WebSocket messaging {messaging}?",
							"deleteSuccess": "Configuration of WebSocket messaging {messaging} has been successfully deleted.",
							"addSuccess": "Configuration of WebSocket messaging {messaging} has been successfully added.",
							"editSuccess": "Configuration of WebSocket messaging {messaging} has been successfully edited."
						}
					},
					"service": {
						"title": "WebSocket services",
						"add": "Add WebSocket service",
						"edit": "Edit WebSocket service",
						"messages": {
							"deleteTitle": "Delete WebSocket service",
							"deletePrompt": "Do you really want to delete WebSocket service {service}?",
							"deleteSuccess": "Configuration of WebSocket service {service} has been successfully deleted.",
							"addSuccess": "Configuration of WebSocket service {service} has been successfully added.",
							"editSuccess": "Configuration of WebSocket service {service} has been successfully edited."
						}
					},
					"messages": {
						"addSuccess": "WebSocket interface instance {instance} has been added.",
						"deletePrompt": "Do you really want to delete WebSocket interface instance {instance}?",
						"deleteTitle": "Delete WebSocket interface instance",
						"deleteSuccess": "WebSocket interface instance {instance} has been deleted.",
						"editSuccess": "WebSocket interface instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of WebSocket interface.",
						"messagingInstance": "Please enter name of WebSocket messaging.",
						"serviceInstance": "Please enter name of WebSocket service.",
						"WebsocketPort": "Please enter WebSocket port number.",
						"interfaceName": "Please select the name of required interface.",
						"interfaceInstance": "Please select the required WebSocket service instance.",
						"tlsMode": "Please select TLS mode."
					}
				},
				"mq": {
					"title": "MQ interface",
					"description": "MQ interface settings.",
					"add": "Add MQ interface",
					"edit": "Edit MQ interface",
					"form": {
						"LocalMqName": "Local MQ name",
						"RemoteMqName": "Remote MQ name"
					},
					"messages": {
						"addSuccess": "MQ interface instance {instance} has been added.",
						"deletePrompt": "Do you really want to delete MQ interface instance {instance}?",
						"deleteTitle": "Delete MQ interface instance",
						"deleteSuccess": "MQ interface instance {instance} has been deleted.",
						"editSuccess": "MQ interface instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of MQ instance.",
						"LocalMqName": "Please enter local MQ name.",
						"RemoteMqName": "Please enter remote MQ name."
					}
				},
				"udp": {
					"title": "UDP interface",
					"description": "IQRF UDP interface settings.",
					"add": "Add UDP interface",
					"edit": "Edit UDP interface",
					"form": {
						"RemotePort": "Remote port",
						"LocalPort": "Local port"
					},
					"messages": {
						"addSuccess": "UDP interface instance {instance} has been added.",
						"deletePrompt": "Do you really want to delete UDP interface instance {instance}?",
						"deleteTitle": "Delete UDP interface instance",
						"deleteSuccess": "UDP interface instance {instance} has been deleted.",
						"editSuccess": "UDP interface instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of UDP interface.",
						"RemotePort": "Please enter remote port - integer between 1 and 49151.",
						"LocalPort": "Please enter local port - integer between 1 and 49151."
					}
				},
				"acceptAsyncMsg": "Accept asynchronous messages"
			},
			"scheduler": {
				"title": "Scheduler",
				"description": "Scheduler settings.",
				"add": "Add task",
				"edit": "Edit task",
				"table": {
					"time": "Time",
					"service": "Service",
					"mType": "Message types"
				},
				"form": {
					"task": {
						"taskId": "Task ID",
						"cronTime": "Time in cron format",
						"exactTime": "Exact time",
						"periodic": "Periodic",
						"period": "Period in seconds",
						"startTime": "Start time"
					},
					"message": {
						"title": "Messages",
						"label": "Message (JSON request)",
						"messagePlaceholder": "Select message",
						"add": "Add another message",
						"remove": "Remove message"
					}
				},
				"errors": {
					"nums": "Please enter a valid integer",
					"service": "Please select service.",
					"messaging": "Please select messaging.",
					"message": "Please enter a message.",
					"period": "Period should be an integer greater than 0."
				},
				"import": {
					"title": "Import task(s)",
					"file": "JSON task file or ZIP archive with tasks",
					"errors": {
						"fileEmpty": "Please select file to import."
					}
				},
				"messages": {
					"importSuccess": "The tasks has been imported successfully.",
					"importInvalidFormat": "The uploaded file is not JSON file or ZIP archive.",
					"importInvalidFile": "The uploaded file is invalid.",
					"deleteTitle": "Delete scheduler task",
					"deletePrompt": "Do you really want to delete scheduler task {task}?",
					"deleteSuccess": "Scheduler task has been successfully deleted.",
					"deleteFail": "An error occurred while removing task.",
					"getFail": "Could not retrieve task {task}.",
					"listFailed": "Failed to retrieve list of scheduler tasks",
					"addSuccess": "Scheduler task has been successfully added.",
					"editSuccess": "Scheduler task {task} has been successfully edited.",
					"processError": "An error has occurred while processing Daemon API request.",
					"rest": {
						"invalidTask": "Task configuration is not valid.",
						"invalidFile": "Imported scheduler configuration is not valid.",
						"notFound": "Task does not exist.",
						"exists": "Task with this ID already exists.",
						"messagingFail": "Failed to retrieve messaging services."
					}
				}
			},
			"misc": {
				"title": "Misc",
				"description": "Configuration of miscellaneous Daemon components",
				"jsonApi": {
					"title": "JSON API",
					"messages": {
						"success": "JSON API configuration has been successfully updated.",
						"noChanges": "No configuration changes detected."
					}
				},
				"jsonMngMetaDataApi": {
					"title": "JSON Metadata API",
					"description": "JSON Metadata API settings.",
					"form": {
						"metaDataToMessages": "Add metadata into the messages"
					},
					"errors": {
						"instance": "Please enter name of JSON Metadata API instance."
					}
				},
				"jsonRawApi": {
					"title": "JSON Raw API",
					"description": "JSON Raw API settings.",
					"form": {
						"asyncDpaMessage": "Async DPA message"
					},
					"errors": {
						"instance": "Please enter name of JSON Raw API instance."
					}
				},
				"jsonSplitter": {
					"title": "JSON Splitter",
					"description": "JSON Splitter settings.",
					"form": {
						"validateJsonResponse": "Validate JSON response",
						"insId": "JSON Splitter instance ID"
					},
					"errors": {
						"instance": "Please enter name of JSON Splitter instance.",
						"insId": "Please enter ID of JSON Splitter instance."
					}
				},
				"iqrfRepository": {
					"title": "IQRF Repository",
					"description": "Manage IQRF Repository's settings.",
					"form": {
						"urlRepo": "IQRF Repository URL",
						"checkPeriod": "Check period in minutes",
						"downloadIfEmpty": "Download if repository cache is empty"
					},
					"errors": {
						"instance": "Please enter name of IQRF Repository instance.",
						"urlRepo": "Please enter IQRF Repository URL.",
						"checkPeriod": "Please enter an integer greater or equal to 0."
					}
				},
				"iqrfInfo": {
					"title": "Lite DB",
					"description": "IQRF Info database settings.",
					"form": {
						"enumAtStartUp": "Initialize network full enumeration just after startup",
						"enumPeriod": "Enumeration check period in minutes",
						"enumUniformDpaVer": "Obtain only HWPID and HWPID version from nodes"
					},
					"errors": {
						"instance": "Please enter name of IQRF Info instance.",
						"enumPeriod": "Period must be greater or equal to 0."
					}
				},
				"iqmesh": {
					"title": "IQMESH services",
					"description": "Manage IQMESH services.",
					"otaUpload": {
						"title": "IQRF OTA upload service",
						"form": {
							"uploadPath": "Path to a directory with files to upload"
						},
						"errors": {
							"instance": "Please enter name of OTA upload service instance.",
							"uploadPath": "Please enter path to a directory with files to upload."
						}
					}
				},
				"monitor": {
					"title": "Monitoring service",
					"description": "Monitoring service configuration.",
					"add": "Add a new monitoring service",
					"edit": "Edit the monitoring service",
					"form": {
						"reportPeriod": "Reporting period in seconds",
						"WebsocketPort": "WebSocket server port",
						"acceptOnlyLocalhost": "Accept only connection from localhost"
					},
					"messages": {
						"addEuccess": "Monitoring service instance {instance} has been added.",
						"deletePrompt": "Do you really want to delete Monitoring service instance {instance}?",
						"deleteTitle": "Delete Monitoring service instance",
						"deleteSuccess": "Monitoring service instance {instance} has been deleted.",
						"editSuccess": "Monitoring service instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of monitor instance.",
						"reportPeriod": "Please enter the reporting period in seconds.",
						"WebsocketPort": "Please enter the port of monitoring WebSocket server."
					}
				},
				"tracer": {
					"title": "Logging service",
					"description": "Logging service settings.",
					"add": "Add logging service configuration",
					"edit": "Edit logging service configuration",
					"form": {
						"path": "Path to directory with logs",
						"filename": "File name",
						"maxSize": "Maximum size in bytes",
						"maxAgeMinutes": "Maximum lifespan of timestamped files in minutes",
						"maxNumber": "Maximum number of timestamped files",
						"timestampFiles": "Enable timestamp files",
						"verbosityLevels": {
							"title": "Verbosity levels",
							"add": "Add verbosity level",
							"remove": "Remove verbosity level"
						},
						"channel": "Verbosity channel",
						"level": "Verbosity level"
					},
					"messages": {
						"zeroValues": "Disabled if value is set to 0.",
						"removeItem": "Do you really want to delete Tracer file instance {instance}?",
						"removeTitle": "Delete Tracer file instance",
						"removeSuccess": "Tracer file instance {instance} has been removed.",
						"addSuccess": "Tracer file instance {instance} has been added.",
						"editSuccess": "Tracer file instance {instance} has been edited."
					},
					"errors": {
						"instance": "Please enter name of logging service interface.",
						"filename": "Please enter logging service file name.",
						"maxSizeMb": "Please enter maximum size in MB greater or equal to 1.",
						"maxAgeMinutes": "Please enter maximum lifespan of timestamped files in minutes, greater or requal to 0.",
						"maxNumber": "Please enter maximum number of timestamped files, greated or equal than 0.",
						"verbosityLevels": {
							"channel": "Please enter the verbosity channel.",
							"level": "Please select the verbosity level."
						}
					}
				}
			}
		},
		"translator": {
			"title": "IQRF GW translator",
			"description": "Translator configuration",
			"form": {
				"rest": {
					"title": "REST API client configuration",
					"port": "Port",
					"apiKey": "API key"
				},
				"mqtt": {
					"title": "MQTT client configuration",
					"port": "Broker port"
				}
			},
			"messages": {
				"disabled": "IQRF Gateway Translator service is disabled.",
				"loadFailed": "Failed to retrieve Translator configuration."
			},
			"errors": {
				"port": "Please enter an integer between 1 and 49151 for port number.",
				"restAddr": "Please enter the REST API address.",
				"apiKey": "Please enter the REST API client key.",
				"apiKeyInvalid": "Invalid REST API key format. The API key format should match [./A-Za-z0-9]{22}\\.[A-Za-z0-9+/=]{44}.",
				"requestTopic": "Please enter the MQTT request topic.",
				"requestTopicInvalid": "Invalid MQTT request topic format. The request topic format should be: gateway/{GWID}/rest/requests/ (GWID is 16 hexadecimal characters).",
				"responseTopic": "Please enter the MQTT response topic.",
				"responseTopicInvalid": "Invalid MQTT response topic format. The response topic format should be: gateway/{GWID}/rest/responses/ (GWID is 16 hexadecaimal characters).",
				"clientId": "Please enter the MQTT client ID.",
				"clientIdInvalid": "Invalid MQTT client ID. The client ID should be the GWID (16 hexadecimal digits).",
				"brokerAddr": "Please enter the MQTT broker address.",
				"brokerUser": "Please enter the MQTT client username.",
				"brokerPassword": "Please enter the MQTT client password."
			}
		},
		"controller": {
			"title": "IQRF GW controller",
			"description": "Controller configuration",
			"form": {
				"daemonApi": {
					"autoNetwork": {
						"title": "AutoNetwork API call",
						"stopConditions": {
							"title": "AutoNetwork stop conditions"
						}
					},
					"discovery": {
						"title": "Discovery API call"
					}
				},
				"factoryReset": {
					"title": "Factory reset",
					"daemon": "Daemon",
					"network": "IP network",
					"webapp": "Web application"
				},
				"resetButton": {
					"title": "Button",
					"api": "Daemon API call",
					"noCall": "No API call"
				},
				"logger": {
					"title": "Logger",
					"filePath": "Path to log file",
					"severity": "Severity level"
				},
				"wsServers": {
					"title": "Websocket",
					"api": "Daemon API server",
					"monitor": "Monitor server"
				}
			},
			"errors": {
				"disabled": "IQRF Gateway Controller service is disabled.",
				"daEwaves": "Please enter an integer between 1 and 127 for empty waves stop condition.",
				"daWaves": "Please enter an integer between 1 and 127 for maximum waves stop condition.",
				"ddMaxAddr": "Please enter an integer between 0 and 239 for Discovery process.",
				"invalid": {
					"ws_format": "Invalid websocket server address format. Example: ws://example:1883."
				},
				"missing": {
					"ws_api": "Please enter the Daemon API websocket server address.",
					"ws_monitor": "Please enter the Monitor websocket server address",
					"l_file": "Please enter path to log file.",
					"l_severity": "Please select log severity level.",
					"rb_custom": "Please enter API call identifier."
				}
			},
			"messages": {
				"successRestart": "IQRF controller configuration has been successfully saved. Controller service has been restarted.",
				"loadFailed": "Failed to retrieve Controller configuration."
			}
		},
		"selectedComponents": {
			"title": "Selected components",
			"description": "Manage selected components."
		},
		"mender": {
			"title": "Mender client",
			"description": "Mender client configuration",
			"form": {
				"inventoryPollInterval": "Inventory update interval (seconds)",
				"retryPollInterval": "Communication retry interval (seconds)",
				"server": "Server address",
				"tenantToken": "Tenant token",
				"updatePollInterval": "Update check interval (seconds)",
				"placeholders": {
					"inventoryPollInterval": 28000,
					"retryPollInterval": 300,
					"server": "https://hosted.mender.io",
					"tenantToken": "exampleToken",
					"updatePollInterval": 1800
				}
			},
			"messages": {
				"disabled": "Mender service is disabled.",
				"loadFailed": "Failed to retrieve Mender configuration."
			},
			"errors": {
				"inventoryPollInterval": "Please enter an integer greater or equal to 0 for for inventory update interval.",
				"retryPollInterval": "Please enter an integer greater or equal to 0 for communication retry interval.",
				"updatePollInterval": "Please enter an integer greater or equal to 0 for update check interval",
				"missing": {
					"server": "Please enter the server address.",
					"tenantToken": "Please enter the tenant token."
				},
				"invalid": {
					"server": "Server address should contain the HTTP protocol."
				}
			}
		}
	},
	"core": {
		"title": "IQRF Gateway Webapp",
		"dashboard": "Dashboard",
		"documentation": {
			"title": "Documentation",
			"description": "Opens the documentation in a new tab."
		},
		"error": {
			"404": {
				"title": "Page not found",
				"header": "Error 404",
				"message": "'The page you requested could not be found. It is possible that the address is incorrect, or that the page no longer exists. Please use a search engine to find what you are looking for."
			}
		},
		"grafana": {
			"title": "Grafana",
			"description": "Open Grafana dashboard."
		},
		"navigation": {
			"toggle": "Toggle navigation"
		},
		"nodeRed": {
			"title": "Node-RED",
			"dashboard": {
				"title": "Node-RED dashboard",
				"description": "Open Node-RED dashboard."
			},
			"workflow": {
				"title": "Node-RED workflow",
				"description": "Open Node-RED workflow."
			}
		},
		"languages": {
			"title": "Language",
			"cs": "Czech",
			"en": "English"
		},
		"apiKey": {
			"title": "API key manager",
			"description": "Manage API keys.",
			"add": "Add API key",
			"edit": "Edit API key",
			"form": {
				"id": "ID",
				"description": "Description",
				"expiration": "Expiration"
			},
			"messages": {
				"invalid": "Invalid API key metadata.",
				"notFound": "API key with this ID does not exist.",
				"deleteTitle": "Delete API key",
				"deletePrompt": "Do you really want to delete API key ID {key}?",
				"deleteSuccess": "API key ID {key} has been successfully deleted.",
				"editSuccess": "API key ID {key} metadata have been successfully changed.",
				"addSuccess": "New API key has been successfully added."
			},
			"errors": {
				"description": "Please enter API key description."
			}
		},
		"user": {
			"title": "User manager",
			"description": "Manage users of this webapp.",
			"add": "Add a new user",
			"edit": "Edit an existing user",
			"id": "User ID",
			"role": "User role",
			"roles": {
				"normal": "Normal user",
				"power": "Power user"
			},
			"language": "Language",
			"languages": {
				"en": "English"
			},
			"oldPassword": "Old password (only if you want change password)",
			"newPassword": "New password (only if you want change password)",
			"messages": {
				"usernameExists": "Username is already used.",
				"oldPassMismatch": "The old password is incorrect.",
				"addSuccess": "User {username} has been added successfully.",
				"deletePrompt": "Do you really want to delete user {username}?",
				"deleteTitle": "Delete user",
				"deleteSuccess": "User {username} has been deleted successfully.",
				"editSuccess": "User {username} has been edited successfully.",
				"notFound": "User not found."
			},
			"errors": {
				"oldPassword": "Please enter the old password.",
				"newPassword": "Please enter the new password.",
				"language": "Please select the language.",
				"role": "Please select the user role."
			}
		},
		"sign": {
			"in": {
				"title": "Sign in",
				"remember": "Keep me signed in",
				"send": "Sign in",
				"messages": {
					"username": "Please enter your username.",
					"password": "Please enter your password.",
					"incorrectUsernameOrPassword": "The username or password you entered is incorrect.",
					"success": "You have been signed in successfully."
				}
			},
			"out": {
				"title": "Sign out",
				"message": "You have been signed out."
			}
		},
		"supervisor": {
			"title": "Supervisor Dashboard",
			"description": "Open Supervisor Dashboard."
		}
	},
	"gateway": {
		"title": "Gateway",
		"description": "Control this gateway.",
		"info": {
			"title": "Information",
			"description": "Show information about this gateway.",
			"board": "Board",
			"gwId": "IQRF Gateway ID",
			"gwImage": "IQRF Gateway image",
			"gwmonId": "PIXLA token",
			"version": {
				"iqrfGatewayController": "IQRF Gateway Controller",
				"iqrfGatewayDaemon": "IQRF Gateway Daemon",
				"iqrfGatewayWebapp": "IQRF Gateway Webapp"
			},
			"hostname": "Hostname",
			"uptime": "Uptime",
			"addresses": {
				"ip": "IP addresses",
				"mac": "MAC addresses"
			},
			"tr": {
				"title": "TR info",
				"error": "Cannot get information about the Coordinator.",
				"moduleType": "Module type",
				"mcuType": "MCU type",
				"moduleId": "MID",
				"os": "OS",
				"dpa": "DPA",
				"rfMode": "RF mode",
				"networkType": "Network type",
				"voltage": "Supply voltage"
			},
			"usages": {
				"memory": "Memory usage",
				"disks": "Disk usages",
				"swap": "Swap usage",
				"used": "Used"
			},
			"gwMode": "Gateway mode",
			"diagnostics": "Download diagnostics"
		},
		"datetime": {
			"title": "Date & Time",
			"description": "Gateway date and time settings.",
			"currentTime": "Current gateway time",
			"currentTimezone": "Current gateway timezone",
			"clockFormat": "Use 12-hour clock format",
			"form": {
				"timezone": "Change timezone",
				"timezonePlaceholder": "Select a timezone"
			},
			"errors": {
				"timezone": "Please select a timezone."
			},
			"messages": {
				"timeSuccess": "Gateway time has been successfully changed.",
				"timeFailure": "An error has occured while changing gateway time",
				"timezoneSuccess": "Gateway timezone has been successfully changed.",
				"timezoneFailure": "An error has occured while changing gateway timezone."
			}
		},
		"log": {
			"title": "Log files",
			"description": "Shows log of IQRF Gateway Controller and Daemon.",
			"download": "Download",
			"messages": {
				"nonExistingDir": "IQRF Gateway's log directory does not exist.",
				"readError": "Cannot read IQRF Gateway's log file.",
				"notFound": "IQRF Gateway log file cannot be found."
			}
		},
		"mode": {
			"title": "Change mode",
			"description": "Change gateway mode.",
			"modes": {
				"forwarding": "Forwarding mode",
				"operational": "Operational mode",
				"service": "Service mode"
			},
			"messages": {
				"getFailed": "An error occurred while getting the current gateway mode.",
				"setFailed": "An error occurred while setting a new gateway mode.",
				"forwarding": "IQRF Gateway Daemon's mode has been changed to forwarding mode.",
				"operational": "IQRF Gateway Daemon's mode has been changed to operational mode.",
				"service": "IQRF Gateway Daemon's mode has been changed to service mode."
			}
		},
		"power": {
			"title": "Power control",
			"description": "Powers off or reboots this gateway.",
			"reboot": "Reboot",
			"powerOff": "Power off",
			"messages": {
				"powerOffSuccess": "Your device will be powered off at {time}.",
				"rebootSuccess": "Your device will be rebooted at {time}, the reboot may take tens of seconds."
			}
		},
		"rootPass": {
			"title": "Change root password",
			"messages": {
				"success": "Gateway root password has been successfully changed.",
				"failure": "Failed to change root password."
			}
		},
		"updater": {
			"title": "System updater",
			"description": "System updater.",
			"warning": "System updater is an experimental feature and could change at any time. Please wait until the process displays its output.",
			"update": "Update packages list",
			"listUpgradable": "List upgradable packages",
			"upgrade": "Upgrade packages",
			"upgradablePackages": {
				"title": "List of upgradable packages",
				"packageName": "Name",
				"oldVersion": "Old version",
				"newVersion": "New version"
			},
			"output": "Command output",
			"messages": {
				"disabled": "System updater is disabled.",
				"unsupportedManager": "This device is using an unsupported package manager."
			}
		},
		"errors": {
			"log-read": "Cannot read log file."
		}
	},
	"iqrfnet": {
		"title": "IQRF network",
		"description": "Control IQRF network.",
		"addressChange": {
			"title": "Change network address",
			"messages": {
				"address": "Address has to be an integer from 0 to 239."
			}
		},
		"enumeration": {
			"title": "Device enumeration",
			"deviceInfo": "Device info",
			"deviceAddr": "Device address",
			"hwpid": "HWPID",
			"manufacturer": "Manufacturer",
			"product": "Product name",
			"picture": "Product picture",
			"trInfo": "TR info",
			"trType": "TR type",
			"mid": "Module ID",
			"osVersion": "IQRF OS version",
			"dpaVersion": "DPA version",
			"rfMode": "RF mode",
			"rfModes": {
				"lp": "LP",
				"std": "STD"
			},
			"rssi": "RSSI",
			"supplyVoltage": "Supply voltage",
			"back": "Back to Network manager",
			"messages": {
				"failure": "An error occurred during the device enumeration.",
				"repositoryUnavailable": "IQRF Repository is unavailable."
			}
		},
		"networkManager": {
			"title": "Network manager",
			"description": "Network manager.",
			"iqmesh": "IQMESH",
			"backupRestore": "Backup/Restore",
			"autoNetwork": {
				"title": "AutoNetwork",
				"form": {
					"discoveryTxPower": "TX power to use in discovery process",
					"discoveryBeforeStart": "Run discovery before start",
					"skipDiscoveryEachWave": "Skip discovery in each wave",
					"actionRetries": "Number of retry DPA transactions",
					"bondingControl": "Bonding control",
					"overlappingNetworks": "Overlapping networks",
					"networks": "Number of networks",
					"network": "Network number",
					"hwpidFiltering": "HWPID filtering conditions",
					"hwpidEnable": "Enable HWPID filtering",
					"hwpids": "HWPIDs",
					"stopConditions": "Stop conditions",
					"waves": "Maximum number of waves",
					"emptyWaves": "Number of empty waves",
					"nodes": "Node count conditions",
					"numberOfTotalNodes": "Number of total nodes",
					"numberOfNewNodes": "Number of new nodes",
					"abortOnTooManyNodesFound": "Abort the AutoNetwork if too many nodes were found"
				}
			},
			"backup": {
				"title": "Network backup",
				"form": {
					"node": "Node",
					"network": "Whole network",
					"messages": {
						"select": "Please select backup target.",
						"address": "Please enter a node address integer between 1 and 239."
					}
				},
				"messages": {
					"timeout": "The backup process request timed out.",
					"success": "The backup process has been successfully completed.",
					"partialSuccess": "All online devices have been successfully backed up. Offine devices: {devices}.",
					"statusRunning": "Backup in progress",
					"statusInitPercentage": "Backup in progress [0 %]",
					"statusRunningPercentage": "Backup in progress [{progress} %]",
					"statusSuccess": "Backup of device {deviceAddr} completed.",
					"statusFailed": "Backup of device {deviceAddr} failed. Device is offline."
				}
			},
			"restore": {
				"title": "Coordinator restore",
				"form": {
					"backupFile": "Backup file",
					"restartOnRestore": "Restart Coordinator on restore",
					"messages": {
						"backupFile": "Please insert a TR backup file.",
						"address": "Please enter integer between 1 and 239 to restore a node device."
					}
				},
				"messages": {
					"timeout": "The restore process request timed out.",
					"success": "The restore process has been successfully completed.",
					"corruptedFile": "The contents of uploaded file are corrupted.",
					"invalidContent": "The uploaded file does not contain valid IQMESH backup data.",
					"missingProp": "Entry {item} does not contain property {property}.",
					"missingCoordinator": "Uploaded file does not contain coordinator device backup data entry.",
					"missingNode": "Uploaded file does not contain backup data of node device at address {address}.",
					"statusCoordinator": "Restoring coordinator device.",
					"invalidSize": "Invalid coordinator backup data size.",
					"checksumMismatch": "Incorrect coordinator backup data checksum."
				}
			},
			"bondingManager": {
				"title": "Bonding",
				"form": {
					"autoAddress": "Auto address",
					"bondMethod": "Bonding method",
					"bondMethodLocal": "Local bonding",
					"bondMethodSmart": "Smart Connect",
					"bondingRetries": "Bonding test retries",
					"smartConnect": "IQRF Smart Connect Code",
					"unbondCoordinatorOnly": "Unbonds the Node only on Coordinator side"
				},
				"errors": {
					"address": "Please enter an integer between 1 and 239 for new node address.",
					"bondingRetries": "Please enter an integer between 0 and 255 for number of bonding test retry requests.",
					"scCodeMissing": "Please enter the IQRF Smart Connect code.",
					"scCodeInvalid": "IQRF Smart Connect code should be a string of 34 alphanumeric characters."
				},
				"messages": {
					"bondLocalAction": "Press node device button within 10 seconds to invoke bonding.",
					"bondSuccess": "A new device has been successfully bonded to address {address}.",
					"bondExists": "Another device is already bonded to address {address}.",
					"timeout": "Request to bond a new device has timed out.",
					"genericBondError": "An error has occured during the bonding process.",
					"unbondPrompt": "Do you really want to remove device at address {address} from the network?",
					"clearAllPrompt": "Do you really want to clear all bonds?",
					"unbondSuccess": "Device at address {address} has been successfully removed.",
					"unbondSuccessC": "Device at address {address} has been successfully removed from Coordinator memory.",
					"noDevices": "There are no devices bonded in the network.",
					"unbondFailure": "Failed to remove device at address {address} from network.",
					"clearAllStatus": "Removing all nodes from network.",
					"clearAllCStatus": "Removing all nodes from coordinator memory.",
					"clearAllSuccess": "All bonds have been cleared successfully.",
					"clearAllCSuccess": "All bonds have been successfully cleared from Coordinator memory.",
					"clearAllPartialSuccess": "All online devices have been removed. Offline devices: {nodes}."
				}
			},
			"devicesInfo": {
				"title": "Devices Info",
				"icons": {
					"bonded": "Bonded device",
					"bondedOnline": "Online bonded device",
					"discovered": "Discovered device",
					"discoveredOnline": "Online discovered device",
					"unbonded": "Unbonded device"
				},
				"messages": {
					"empty": "No response from IQRF Network",
					"getBonded": "Retrieving list of bonded devices",
					"getDiscovered": "Retrieving list of discovered devices",
					"getOnline": "Retrieving status of devices",
					"bondedFailed": "Failed to retrieve list of bonded devices.",
					"discoveredFailed": "Failed to retrieve list of discovered devices.",
					"pingFailed": "Failed to retrieve status of devices."
				}
			},
			"discovery": {
				"title": "Discovery",
				"form": {
					"txPower": "TX Power",
					"maxAddr": "Max. Node address"
				},
				"errors": {
					"txPower": "Please enter an integer between 0 and 7 for Discovery TX power.",
					"maxAddr": "Please enter an integer between 0 and 239 for Discovery maximum node address."
				},
				"messages": {
					"success": "The discovery process has finished successfully.",
					"genericError": "An error has occured during the Discovery process.",
					"spinnerNote": "Discovery is running, the process may take tens of minutes for large networks.",
					"timeout": "The Discovery request has timed out."
				}
			},
			"otaUpload": {
				"title": "OTA upload",
				"form": {
					"file": "File",
					"fileType": "File type",
					"fileTypes": {
						"hex": "Custom DPA handler"
					},
					"target": "Upload target",
					"targets": {
						"coordinator": "Coordinator",
						"node": "Node",
						"network": "Network"
					},
					"hwpidFilter": "Filter nodes by HWPID*",
					"nodeAddress": "Node address",
					"eeepromAddress": "External EEPROM address",
					"manualUpload": "Manual upload",
					"automaticUpload": "Automatic upload",
					"uploadSteps": {
						"uploadEeeprom": "Step 1: Upload to external EEPROM",
						"verifyEeeprom": "Step 2: Verify data in external EEPROM",
						"loadFlash": "Step 3: Load from to external EEPROM to Flash"
					}
				},
				"errors": {
					"file": "Please select a file to upload.",
					"nodeAddress": "Please enter an integer between 1 and 239 for target node address.",
					"hwpid": "Please enter an integer between 0 and 65535 for device HWPID.",
					"eeepromAddress": "Please enter an integer between 0 and 16383 for external EEPROM start address."
				},
				"messages": {
					"genericError": "An error has occured during the OTA upload process.",
					"hwpid": "* HWPID 65535 includes all devices.",
					"gwUploadFail": "Failed to upload file to gateway.",
					"invalidFile": "Uploaded file is not HEX or IQRF file.",
					"invalidContent": "Invalid file content.",
					"uploadRunning": "Uploading data to external EEPROM.",
					"verifyRunning": "Verifying data in external EEPROM.",
					"loadRunning": "Loading data from external EEPROM to Flash memory.",
					"coordinator": {
						"uploadStepSuccess": "Upload step has been successfully completed for coordinator.",
						"verifyStepSuccess": "Verification step has been successfully completed for coordinator.",
						"loadStepSuccess": "Flash load step has been successfully completed for coordinator.",
						"runAllSuccess": "All OTA upload steps have been successfully completed for coordinator."
					},
					"node": {
						"uploadStepSuccess": "Upload step has been successfully completed for node at address {address}.",
						"verifyStepSuccess": "Verification step has been successfully completed for node at address {address}.",
						"loadStepSuccess": "Flash load step has been successfully completed for node at address {address}.",
						"runAllSuccess": "All OTA upload steps have been successfully completed node at address {address}."
					},
					"network": {
						"uploadStepSuccess": "Upload step has been successfully completed for all online devices.",
						"verifyStepSuccess": "Verification step has been successfully completed for all online devices. Offline devices: {devices}.",
						"loadStepSuccess": "Flash load step has been successfully completed for all online devices. Offline devices: {devices}.",
						"runAllSuccess": "All OTA upload steps have been successfully completed for all online devices. Offline devices: {devices}."
					},
					"uploadStepFail": "An error has occured during the upload step.",
					"verifyStepFail": "An error has occured during the verification step.",
					"loadStepFail": "An error has occured during the flash load step."
				}
			},
			"messages": {
				"submit": {
					"autoNetwork": {
						"success": "The AutoNetwork process has finished successfully.",
						"failure": "An error occurred during the AutoNetwork process."
					},
					"invalidMessage": "Invalid request.",
					"timeout": "Request timed out."
				},
				"invalid": {
					"autoNetwork": {
						"hwpidFilter": "HWPID filter should be a list of integers from between 0 and 65535 separated by a space."
					}
				},
				"autoNetwork": {
					"actionRetries": "Please enter an integer between 0 and 3 for number retry DPA transactions.",
					"networks": "Please enter an integer between 1 and 50 for number of networks.",
					"network": "Please enter an integer between 1 and 50 for network number.",
					"waves": "Please enter an integer between 1 and 127 for maximum number of waves.",
					"emptyWaves": "Please enter an integer between 1 and 127 for maximum number of consecutive empty waves.",
					"totalNodes": "Please enter an integer between 1 and 239 for total number of nodes.",
					"newNodes": "Please enter an integer between 1 and 239 for number of new nodes.",
					"statusTotalNodes": "Total number of nodes in network: ",
					"statusAddedNodes": "Number of nodes added in last wave: ",
					"statusWave": "Wave "
				},
				"versionInvalid": "Please upgrade to IQRF Gateway Daemon version 2.3.0 or higher to use this service.",
				"versionMissing": "Could not retrieve version of IQRF Gateway Daemon.",
				"versionCurrent": "Current version: "
			}
		},
		"sendJson": {
			"title": "Send JSON request",
			"description": "Send JSON request.",
			"documentation": "Show API documentation.",
			"notAvailable": "The IQRF Gateway Daemon service is currently not available, attempting reconnect ({attempt}).",
			"form": {
				"json": "JSON request",
				"messages": {
					"timeout": "Daemon API request timed out.",
					"invalid": "Invalid JSON API request.",
					"missing": "Please enter JSON request.",
					"mType": "JSON object does not have mType key.",
					"success": "JSON request has been sent successfully.",
					"autoNetworkStart": "AutoNetwork request sent, multiple responses will be received.",
					"autoNetworkFinish": "The AutoNetwork process has concluded.",
					"error": {
						"timeout": "Request timed out.",
						"fail": "An error occurred while processing JSON request.",
						"pcmd": "Sent JSON request contains incorrect PCMD.",
						"pnum": "Sent JSON request contains incorrect PNUM.",
						"addr": "Sent JSON request contains incorrect address parameter.",
						"dataLen": "Sent JSON request contains incorrect data length.",
						"data": "Sent JSON request contains incorrect data.",
						"hwpid": "Sent JSON request contains incorrect HWPID.",
						"nadr": "Sent JSON request contains incorrect NADR.",
						"invalidMessage": "Sent JSON request is not valid.",
						"messageQueueFull": "The IQRF Gateway Daemon message queue is full.",
						"validatorErrors": "JSON request is not valid, detected violations:"
					}
				}
			}
		},
		"sendPacket": {
			"title": "Send DPA packet",
			"description": "Send DPA packet.",
			"macros": "Macros",
			"form": {
				"nadr": "NADR",
				"pnum": "PNUM",
				"pcmd": "PCMD",
				"hwpid": "HWPID",
				"pdata": "PDATA",
				"packet": "DPA packet",
				"address": "Custom NADR",
				"addressOverwrite": "Use custom NADR",
				"timeout": "Custom DPA timeout (ms)",
				"timeoutOverwrite": "Use custom DPA timeout",
				"autoRepeat": "Auto Repeat",
				"autoRepeatInterval": "Repeat interval",
				"autoRepeatTime": "x 100 ms",
				"messages": {
					"invalid": {
						"address": "Invalid custom NADR has been entered. It has to be a decimal number from 0 to 239.",
						"packet": "Invalid DPA packet has been entered.",
						"timeout": "Invalid custom DPA timeout has been entered.",
						"nadr": "NADR bytes should be 2 hexadecimal characters long.",
						"pnum": "PNUM byte should be 2 hexadecimal characters long.",
						"pcmd": "PCMD byte should be 2 hexadecimal characters long, higher nibble can be a character between 0 and 7.",
						"hwpid": "HWPID bytes should be 4 hexadecimal characters long.",
						"pdata": "PDATA should be 0 to 57 hexadecimal bytes long, separated by a dot.",
						"autoRepeatInterval": "Auto repeat interval should be an integer between 1 and 36000."
					},
					"missing": {
						"address": "Please enter the custom NADR.",
						"packet": "Please enter the DPA packet.",
						"timeout": "Please enter the custom DPA timeout."
					}
				}
			},
			"messages": {
				"failure": "An error occurred while DPA packet sending. The device may be offline.",
				"success": "DPA packet has been sent successfully.",
				"incorrect": {
					"pcmd": "Sent DPA packet contains incorrect PCMD.",
					"pnum": "Sent DPA packet contains incorrect PNUM.",
					"hwpid": "Sent DPA packet contains incorrect HWPID.",
					"data": "Sent DPA packet contains incorrect data,",
					"dataLength": "Sent DPA packet contains incorrect data length."
				}
			}
		},
		"jsonMessage": {
			"request": "Request",
			"response": "Response",
			"copy": {
				"request": "Copy request to the clipboard",
				"response": "Copy response to the clipboard"
			},
			"copySuccess": {
				"dpa":{
					"request": "DPA request has been copied to the clipboard.",
					"response": "DPA response has been copied to the clipboard."
				},
				"json": {
					"request": "JSON request has been copied to the clipboard.",
					"response": "JSON response has been copied to the clipboard."
				}
			}
		},
		"standard": {
			"title": "Standard manager",
			"description": "IQRF Standard manager.",
			"form": {
				"address": "Address",
				"messages": {
					"address": "Address has to be an integer between 1 and 239"
				}
			},
			"binaryOutput": {
				"title": "IQRF Binary Output",
				"outputs": "Outputs",
				"index": "Index",
				"state": "State",
				"prev": "Previous output states",
				"enum": "Binary Output enumeration",
				"form": {
					"index": "Index of the binary output",
					"state": "State of the binary output",
					"enabled": "ON",
					"disabled": "OFF",
					"getStates": "Get states",
					"setState": "Set state",
					"messages": {
						"index": "Index has to be an integer between 0 and 31"
					}
				},
				"messages": {
					"timeout": "Binary output request timed out. The device may be offline.",
					"success": "Binary output request has been sent successfully.",
					"failure": "An error occurred during the Binary output request.",
					"pnum": "Device does not support the Binary Output standard."
				}
			},
			"dali": {
				"title": "IQRF DALI",
				"answers": "Answers",
				"status": "Status",
				"value": "Value",
				"form": {
					"command": "DALI command",
					"addCommand": "Add command",
					"removeCommand": "Remove command",
					"sendCommand": "Send commands",
					"messages": {
						"command": "DALI command has to be an integer between 0 and 65535."
					}
				},
				"messages": {
					"timeout": "DALI request timed out. The device may be offline",
					"success": "DALI request has been sent successfully.",
					"failure": "An error occurred during the DALI request.",
					"pnum": "Device does not support the DALI standard."
				}
			},
			"light": {
				"title": "IQRF Light",
				"lights": "Lights",
				"index": "Index",
				"power": "Previous power",
				"enum": "Light enumeration",
				"powerInfo": "Power info",
				"form": {
					"index": "Index of the light",
					"power": "Power of the light",
					"getPower": "Get power",
					"setPower": "Set power",
					"increment": "Increment power",
					"decrement": "Decrement power",
					"messages": {
						"index": "Light index has to be an integer between 0 and 31.",
						"power": "Light power has to be an integer between 0 and 100."
					}
				},
				"messages": {
					"timeout": "Light request timed out. The device may be offline.",
					"success": "Light request has been sent successfully.",
					"failure": "An error occurred during the Light request.",
					"pnum": "Device does not support the Light standard."
				}
			},
			"sensor": {
				"title": "IQRF Sensor",
				"sensors": "Sensors",
				"type": "Type",
				"unit": "Unit",
				"value": "Value",
				"readAll": "Read all",
				"enum": "Sensor enumeration",
				"messages": {
					"timeout": "Sensor request timed out. The device may be offline.",
					"success": "Sensor request has been sent successfully.",
					"failure": "An error occurred during the Sensor request.",
					"pnum": "Device does not support the Sensor standard."
				}
			}
		},
		"trConfiguration": {
			"title": "TR configuration",
			"description": "Edit TR configuration.",
			"security": {
				"title": "Security",
				"form": {
					"ascii": "ASCII",
					"hex": "HEX",
					"format": "Input format",
					"setPassword": "Set Access Password",
					"setKey": "Set User Key"
				},
				"messages": {
					"success": "IQMESH security has been successfully set. Device restarted.",
					"failure": "Could not update IQMESH security settings.",
					"resetFailure": "IQMESH security has been successfully set, but device could not be restarted."
				}
			},
			"form": {
				"rf": "RF",
				"rfBand": "RF Band",
				"rfBands": {
					"443": "443 MHz",
					"868": "868 MHz",
					"916": "916 MHz"
				},
				"rfChannelA": "RF channel A",
				"rfChannelB": "RF channel B",
				"rfSubChannelA": "RF channel 2nd network",
				"rfSubChannelB": "Alternative DSM channel",
				"rfAltDsmChannel": "Alternative DSM channel",
				"networkType": "Network type",
				"networkTypes": {
					"std": "STD",
					"stdLp": "STD and LP"
				},
				"txPower": "TX power",
				"rxFilter": "RX filter",
				"lpRxTimeout": "LP RX timeout",
				"rfPgm": "RFPGM",
				"rfPgmEnableAfterReset": "Enable after reset",
				"rfPgmTerminateAfter1Min": "Termination after ~1 minute",
				"rfPgmTerminateMcuPin": "Termination by MCU pin",
				"rfPgmDualChannel": "Dual channel",
				"rfPgmLpMode": "LP mode",
				"rfPgmIncorrectUpload": "Incorrect upload",
				"dpa": {
					"embeddedPeripherals": "DPA - Embedded peripherals",
					"other": "DPA - Other"
				},
				"embPers": {
					"coordinator": "Coordinator",
					"node": "Node",
					"os": "OS",
					"eeprom": "EEPROM",
					"eeeprom": "EEEPROM",
					"ram": "RAM",
					"ledr": "LEDR",
					"ledg": "LEDG",
					"spi": "SPI",
					"io": "IO",
					"thermometer": "Thermometer",
					"pwm": "PWM",
					"uart": "UART",
					"frc": "FRC"
				},
				"customDpaHandler": "Custom DPA Handler",
				"ioSetup": "IO Setup",
				"dpaAutoexec": "Autoexec",
				"routingOff": "Routing off",
				"peerToPeer": "User Peer-to-Peer",
				"localFrcReception": "Local FRC",
				"dpaPeerToPeer": "DPA Peer-to-Peer",
				"neverSleep": "Stay awake when not bonded",
				"uartBaudRate": "UART interface baud rate",
				"uartBaudrates": {
					"1200": "1200 Bd",
					"2400": "2400 Bd",
					"4800": "4800 Bd",
					"9600": "9600 Bd",
					"19200": "19200 Bd",
					"38400": "38400 Bd",
					"57600": "57600 Bd",
					"115200": "115200 Bd",
					"230400": "230400 Bd"
				},
				"nodeDpaInterface": "Node DPA interface",
				"messages": {
					"breakInteroperability": "You will break interoperability if you disable STD and LP network.",
					"lpRxTimeout": "LP RX timeout has to be in range from 1 to 255.",
					"rfChannel": {
						"433": "RF Channel has to be in range from 0 to 16.",
						"868": "RF Channel has to be in range from 0 to 67.",
						"916": "RF Channel has to be in range from 0 to 255."
					},
					"rxFilter": "RX filter have to be integer from 0 to 64.",
					"txPower": "TX Power have to be integer from 0 to 7.",
					"uartBaudRate": "Please select UART interface baud rate."
				}
			},
			"messages": {
				"modalTitle": "Custom DPA handler issue detected",
				"modalPrompt": "Custom DPA handler has been enabled in transciever configuration, but not detected. Do you wish to disable Custom DPA handler? The transciever will then be restarted.",
				"disableFailure": "An error has occured while disabling Custom DPA handler.",
				"osReadFailure": "Could not retrieve OS information.",
				"readFailure": "An error has occurred while reading TR configuration.",
				"readSuccess": "The TR configuration has been read successfully.",
				"writeFailure": "An error has occured while saving TR configuration.",
				"writeSuccess": "The TR configuration has been saved successfully.",
				"restartFailure": "The TR configuration has been saved successfully, but device could not be restarted.",
				"restartSuccess": "The TR configuration has been saved successfully. Device restarted."
			}
		},
		"trUpload": {
			"title": "Coordinator upload",
			"description": "IQRF Coordinator upload.",
			"dpaUpload": {
				"title": "DPA plug-in",
				"form": {
					"version": "DPA version"
				},
				"errors": {
					"version": "Please select DPA version to upload."
				},
				"messages": {
					"dpaFileDownloaded": "DPA file {file} has been successfully downloaded to gateway.",
					"dpaFetchFailure": "Failed to retrieve current DPA version or DPA upgrades.",
					"uploadError": "An error has occured during upload: \n{error}",
					"uploadSuccess": "DPA plug-in has been successfully changed.",
					"downloadFailure": "The webapp has not been able to download the DPA file.",
					"moveFailure": "The file has not been uploaded due wrong permissions.",
					"notFound": "DPA file not found.",
					"badRequest": "Invalid combination of DPA version and RF mode.",
					"modalTitle": "DPA plug-in upload",
					"modalPrompt": "The device already uses DPA version {version}, do you want to proceed with upload anyway?"
				}
			},
			"hexUpload": {
				"title": "Custom DPA handler",
				"form": {
					"file":"File to upload"
				},
				"errors": {
					"file": "Please select the file to upload."
				},
				"messages": {
					"gatewayUpload": "Uploading file {file} to gateway ...",
					"gatewayUploadFailure": "An error has occured during upload to gateway.",
					"gatewayUploadSuccess": "File {file} has been successfully uploaded to gateway.",
					"invalidFormat": "The uploaded file is not a .hex file.",
					"uploadSuccess": "Custom DPA handler has been successfully uploaded.",
					"uploadSuccessTr": "Custom DPA handler has been successfully uploaded to TR."
				}
			},
			"osUpload": {
				"title": "IQRF OS and DPA",
				"form": {
					"current": "Current OS version:",
					"version": "Target OS version"
				},
				"errors": {
					"version": "Please select IQRF OS version to upload."
				},
				"messages": {
					"newest": "Your device has the latest version of IQRF OS.",
					"fetchFail": "Failed to retrieve current version of IQRF OS.",
					"upgradeSuccess": "IQRF OS has been successfully upgraded.",
					"fileUploading": "Uploading {file} file to TR ...",
					"fileUploaded": "{file} file has been successfully uploaded to TR."
				}
			},
			"messages": {
				"disabled": "TR upload is disabled.",
				"info": "These actions can take tens of seconds.",
				"failure": "An error occurred during the file upload.",
				"timeout": "Daemon API file upload request timed out.",
				"success": "The file has been successfully uploaded into the coordinator.",
				"genericError": "An error has occured while processing request.",
				"osBuildFail": "Failed to retrieve OS builds information.",
				"osInfoFail": "Embed OS read request failed.",
				"postUpload": "Restarting IQRF Gateway Daemon and refreshing OS information."
			}
		}
	},
	"install": {
		"title": "Installation wizard",
		"invitation": "Welcome to IQRF Gateway Webapp. Before getting started, you have to create the first webapp's user.",
		"createUser": {
			"title": "Create a new user"
		},
		"error": {
			"missingMigration": {
				"title": "Some database table is missing",
				"description": "IQRF Gateway Webapp cannot find some table in the SQLite3 database.",
				"howToFix": "How to fix it",
				"fixDescription": "Run these commands in terminal:"
			}
		},
		"gwInfo": {
			"title": "Some information about this gateway",
			"button": "Show GW info",
			"download": "Download as JSON"
		}
	},
	"network": {
		"title": "IP network",
		"description": "IP network management.",
		"ethernet": {
			"multipleInterfaces": "Multiple Wi-Fi interfaces detected, select interface to use.",
			"title": "Ethernet connections",
			"description": "Ethernet connections management.",
			"add": "Add Ethernet connection",
			"edit": "Edit Ethernet connection",
			"messages": {
				"noInterfaces": "No ethernet network interface detected."
			}
		},
		"wireless": {
			"title": "Wireless connections",
			"description": "Wireless connections management.",
			"table": {
				"accessPoints": "Available access points",
				"noAccessPoints": "No available access points.",
				"ssid": "Name",
				"signal": "Signal strength",
				"security": "Network security"
			},
			"multipleInterfaces": "Multiple Wi-Fi interfaces detected, select interface to use.",
			"modal": {
				"title": "Wi-Fi configuration",
				"modalTitle": "Connect to {accessPoint}",
				"form": {
					"security": "Security",
					"securityTypes": {
						"open": "Open",
						"wep": "Wep",
						"wpa-psk": "WPA-Personal",
						"wpa-eap": "WPA-Enterprise"
					},
					"authPhaseOne": "Phase one authentication",
					"phaseOneAlgorithm": {
						"peap": "Protected EAP"
					},
					"phaseTwoAlgorithm": {
						"mschapv2": "MSCHAPv2"
					},
					"wep": {
						"length": "WEP key length",
						"lengths": {
							"64bit": "64 bit (5 ASCII / 10 hex)",
							"128bit": "128 bit (13 ASCII / 26 hex)"
						},
						"type": "Type",
						"types": {
							"key": "Key",
							"passphrase": "Passphrase"
						},
						"index": "Default WEP key",
						"keyNum": "WEP Key {index}"
					},
					"noCaCert": "No CA certificate required",
					"caCert": "CA certificate",
					"authPhaseTwo": "Phase two authentication",
					"anonymousIdentity": "Anonymous identity",
					"username": "Username",
					"password": "Password",
					"psk": "Pre-shared key"
				},
				"errors": {
					"password": "Please enter the password.",
					"psk": "Please enter pre-shared key.",
					"pskInvalid": "Pre-shared key should be 8-63 characters long ASCII string, or 64 characters long hex string.",
					"wepKeyType": "Please select WEP security type.",
					"wepIndex": "Please enter default key index.",
					"wepIndexInvalid": "Default key index should be between 0 and 3.",
					"wepIndexKeyMissing": "WEP key at specified index missing.",
					"wepKey": "Please enter a WEP key.",
					"wepPassphrase": "Please enter a WEP passphrase",
					"wepKey64Invalid": "64bit WEP key should be 5 ASCII characters or 10 hexadecimal characters long.",
					"wepKey128Invalid": "128bit WEP key should be 13 ASCII characters or 26 hexadecimal characters long."
				}
			},
			"messages": {
				"noInterfaces": "No Wi-Fi network interface detected.",
				"interfacesFailed": "Failed to retrieve list of interfaces",
				"listFailed": "Failed to retrieve list of available access points.",
				"connectionsFailed": "Failed to retrieve access point connection details."
			}
		},
		"wireguard": {
			"title": "Wireguard VPN",
			"description": "VPN management.",
			"tunnels": {
				"title": "Tunnels",
				"add": "Add Wireguard tunnel",
				"edit": "Edit Wireguard tunnel",
				"table": {
					"noTunnels": "No Wireguard tunnels detected.",
					"name": "Name",
					"state": "State",
					"states": {
						"active": "Active",
						"inactive": "Inactive"
					},
					"autostart": "Activate on startup",
					"action": {
						"activate": "Activate",
						"deactivate": "Deactivate"
					}
				},
				"form": {
					"addPeer": "Add another peer",
					"removePeer": "Remove peer",
					"interface": "Interface configuration",
					"name": "Tunnel name",
					"generateKeys": "Generate key pair",
					"privateKey": "Private key",
					"publicKey": "Public key",
					"publicKeyIface": "Derived public key",
					"stack": "Stack",
					"stackTypes": {
						"ipv4": "Single stack (IPv4 only)",
						"ipv6": "Single stack (IPv6 only)",
						"both": "Dual stack (IPv4 and IPv6)"
					},
					"ipv4": "IPv4 address",
					"ipv4Prefix": "IPv4 address prefix",
					"ipv6": "IPv6 address",
					"ipv6Prefix": "IPv6 address prefix",
					"port": "Listen port",
					"portOptional": "Specify listen port",
					"peers": "Peer configuration",
					"psk": "Pre-shared key (optional)",
					"keepalive": "Persistent keepalive in seconds *",
					"keepaliveNote": "* 0 = disabled",
					"endpoint": "Endpoint",
					"allowedIPv4Addrs": "Allowed peer IPv4 addresses",
					"allowedIPv6Addrs": "Allowed peer IPv6 addresses"
				},
				"errors": {
					"name": "Please enter interface name.",
					"privateKey": "Please enter interface private key.",
					"publicKey": "Please enter interface public key.",
					"ipv4": "Please enter interface IPv4 address.",
					"ipv4Invalid": "Invalid IPv4 address format.",
					"ipv4Prefix": "Please enter IPv4 address prefix.",
					"ipv4PrefixInvalid": "IPv4 address prefix should be an integer between 1 and 32.",
					"ipv6": "Please enter interface IPv6 address.",
					"ipv6Invalid": "Invalid IPv6 address format.",
					"ipv6Prefix": "Please enter IPv6 address prefix.",
					"ipv6PrefixInvalid": "IPv6 address prefix should be an integer between 48 and 128.",
					"portIface": "Please enter interface listen port.",
					"endpoint": "Please enter peer endpoint.",
					"publicKeyPeer": "Please enter peer public key.",
					"portPeer": "Please enter peer listen port.",
					"portInvalid": "Port number should be an integer between 0 and 65535.",
					"keepalive": "Please enter the peer keepalive interval.",
					"keepaliveInvalid": "Persistent keepalive should be an integer between 0 and 65535 seconds.",
					"base64Key": "Invalid key format, the key should be 32-byte Curve25519 key."
				},
				"messages": {
					"addSuccess": "Wireguard tunnel {tunnel} has been successfully created.",
					"addFailed": "Failed to create Wireguard tunnel: {error}.",
					"editSuccess": "Wireguard tunnel {tunnel} has been successfully edited.",
					"editFailed": "Failed to edit Wireguard tunnel: {error}.",
					"activateSuccess": "Wireguard tunnel {tunnel} has been successfully activated.",
					"activateFailed": "Failed to activate Wireguard tunnel {tunnel}.",
					"deactivateSuccess": "Wireguard tunnel {tunnel} has been successfully deactivated.",
					"deactivateFailed": "Failed to deactivate Wireguard tunnel {tunnel}.",
					"disableSuccess": "Wireguard tunnel {tunnel} startup activation has been successfully disabled.",
					"disableFailed": "Failed to disable startup activation of Wireguard tunnel {tunnel}.",
					"enableSuccess": "Wiregguard tunnel {tunnel} startup activation has been successfully enabled.",
					"enableFailed": "Failed to enable startup activation of Wireguard tunnel {tunnel}.",
					"getFailed": "Failed to retrieve configuraiton of Wireguard tunnel {tunnel}.",
					"listFailed": "Failed to retrieve list of existing Wireguard tunnels.",
					"removeSuccess": "Wireguard tunnel {tunnel} has been successfully remove.",
					"removeFailed": "Failed to remove Wireguard tunnel {tunnel}."
				}
			}
		},
		"connection": {
			"title": "Available connections",
			"name": "Name",
			"edit": "Edit connection",
			"errors": {
				"name": "Please enter a connection name.",
				"interface": "Please select an interface."
			},
			"interface": "Interface",
			"ipv4": {
				"title": "IPv4 configuration",
				"method": "Connection method",
				"methods": {
					"null": "Please select IPv4 connection method",
					"auto": "Automatic (DHCP)",
					"manual": "Static",
					"link-local": "Link-local",
					"shared": "Shared with other computers"
				},
				"address": "IPv4 address",
				"addresses": {
					"add": "Add IPv4 address",
					"remove": "Remove IPv4 address"
				},
				"mask": "Subnet mask",
				"gateway": "IPv4 Gateway address",
				"dns": {
					"title": "IPv4 DNS servers",
					"address": "DNS server IPv4 address",
					"add": "Add DNS server",
					"remove": "Remove DNS server"
				},
				"errors": {
					"address": "Please enter a valid IPv4 address.",
					"addressInvalid": "Invalid IPv4 address.",
					"dns": "Please enter a valid IPv4 DNS server address.",
					"gateway": "Please enter a valid IPv4 gateway address.",
					"mask": "Please enter a valid IPv4 subnet mask.",
					"maskInvalid": "Invalid subnet mask."
				}
			},
			"ipv6": {
				"title": "IPv6 configuration",
				"method": "Connection method",
				"methods": {
					"null": "Please select IPv6 connection method",
					"auto": "Automatic (SLAAC)",
					"dhcp": "Automatic, DHCPv6 only",
					"ignore": "Ignore",
					"link-local": "Link-local",
					"manual": "Static",
					"shared": "Shared with other computers"
				},
				"address": "IPv6 address",
				"addresses": {
					"add": "Add IPv6 address",
					"remove": "Remove IPv6 address"
				},
				"prefix": "Prefix length",
				"gateway": "IPv6 Gateway address",
				"dns": {
					"title": "IPv6 DNS servers",
					"address": "DNS server IPv6 address",
					"add": "Add DNS server",
					"remove": "Remove DNS server"
				},
				"errors": {
					"method": "Please select the IPv6 connection method",
					"address": "Please enter a valid IPv6 address.",
					"addressInvalid": "Invalid IPv6 address.",
					"dns": "Please enter at least one IPv6 DNS server address.",
					"gateway": "Please enter a valid IPv6 gateway address.",
					"prefix": "Please enter a valid IPv6 prefix.",
					"prefixInvalid": "IPv6 prefix should be between 48 and 128 bits."
				}
			},
			"state": "Connection state",
			"states": {
				"connected": "Connected",
				"notConnected": "Not connected"
			},
			"messages": {
				"interfacesFetchFailed": "Failed to retrieve interfaces.",
				"connectionFetchFailed": "Failed to retrieve connection details.",
				"createFailed": "Failed to create connection {connection}.",
				"add": {
					"failure": "Failed to create new connection.",
					"success": "Network connection {connection} has been created."
				},
				"edit": {
					"failure": "An error occurred while saving the network connection settings.",
					"success": "Network connection {connection} has been edited."
				},
				"connect": {
					"success": "Network connection {connection} has been connected at network interface {interface}."
				},
				"disconnect": {
					"success": "Network connection {connection} has been disconnected at network interface {interface}."
				},
				"removeSuccess": "Network connection {connection} has been removed.",
				"removeFailed": "Failed to delete network connection {connection}."
			}
		},
		"table": {
			"connect": "Connect",
			"disconnect": "Disconnect"
		}
	},
	"service": {
		"actions": {
			"disable": "Disable",
			"enable": "Enable",
			"start": "Start",
			"stop": "Stop",
			"restart": "Restart",
			"status": "Refresh status"
		},
		"status": "Service status",
		"states": {
			"active": "active",
			"inactive": "inactive",
			"missing": "Missing",
			"unsupported": "Unsupported",
			"unknown": "Unknown"
		},
		"iqrf": {
			"title": "IQRF services",
			"description": "Control IQRF Gateway's services."
		},
		"iqrf-gateway-controller": {
			"title": "Controller",
			"description": "Control IQRF Gateway Controller's service.",
			"messages": {
				"disable": "IQRF Gateway Controller has been disabled.",
				"enable": "IQRF Gateway Controller has been enabled.",
				"start": "IQRF Gateway Controller has been started.",
				"stop": "IQRF Gateway Controller has been stopped.",
				"restart": "IQRF Gateway Controller has been restarted."
			}
		},
		"iqrf-gateway-daemon": {
			"title": "Daemon",
			"description": "Control IQRF Gateway Daemon's service.",
			"messages": {
				"disable": "IQRF Gateway Daemon has been disabled.",
				"enable": "IQRF Gateway Daemon has been enabled.",
				"start": "IQRF Gateway Daemon has been started.",
				"stop": "IQRF Gateway Daemon has been stopped.",
				"restart": "IQRF Gateway Daemon has been restarted. It takes tens of seconds before the system is ready."
			}
		},
		"iqrf-gateway-translator": {
			"title": "Translator",
			"description": "Control IQRF Gateway Translator's service.",
			"messages": {
				"disable": "IQRF Gateway Translator has been disabled.",
				"enable": "IQRF Gateway Translator has been enabled.",
				"start": "IQRF Gateway Translator has been started.",
				"stop": "IQRF Gateway Translator has been stopped.",
				"restart": "IQRF Gateway Translator has been restarted."
			}
		},
		"gwman-client": {
			"messages": {
				"disabled": "PIXLA service is disabled.",
				"disable": "PIXLA client service has been disabled.",
				"enable": "PIXLA client service has been enabled.",
				"start": "PIXLA client service has been started.",
				"stop": "PIXLA client service has been stopped.",
				"restart": "PIXLA client service has been restarted."
			}
		},
		"mender-client": {
			"title": "Mender service",
			"description": "Control the Mender service.",
			"messages": {
				"disable": "Mender service has been disabled.",
				"enable": "Mender service has been enabled.",
				"start": "Mender service has been started.",
				"stop": "Mender service has been stopped.",
				"restart": "Mender service has been restarted."
			}
		},
		"ssh": {
			"title": "SSH service",
			"description": "Controls the SSH daemon service.",
			"messages": {
				"disabled": "SSH daemon service is disabled.",
				"disable": "SSH daemon service has been disabled.",
				"enable": "SSH daemon service has been enabled.",
				"start": "SSH daemon service has been started.",
				"stop": "SSH daemon service has been stopped.",
				"restart": "SSH daemon service has been restarted."
			}
		},
		"unattended-upgrades": {
			"title": "Automatic upgrades",
			"description": "Controls the automatic unattended upgrades service.",
			"configuration": "Automatic upgrades configuration",
			"form": {
				"intervalNote": "* Interval in days, 0 = disabled",
				"listUpdateInterval": "Package list update interval *",
				"upgradeInterval": "Package upgrade interval *",
				"removeInterval": "Unnecessary package removal interval *",
				"rebootOnKernelUpdate": "Reboot after updating kernel"
			},
			"errors": {
				"listUpdateInterval": "Please enter package list update interval greater or equal to 0.",
				"upgradeInterval": "Please enter package upgrade interval greater or equal to 0.",
				"removeInterval": "Please enter package removal interval greater or equal to 0."
			},
			"messages": {
				"disabled": "Automatic upgrades are disabled.",
				"disable": "Automatic upgrades service has been disabled.",
				"enable": "Automatic upgrades service has been enabled.",
				"start": "Automatic upgrades service has been started.",
				"stop": "Automatic upgrades service has been stopped.",
				"restart": "Automatic upgrades service has been restarted.",
				"success": "Automatic upgrades configuration has been successfully saved.",
				"failure": "Unable to save automatic upgrades configuration."
			}
		},
		"unsupported": {
			"title": "Unsupported service"
		},
		"errors": {
			"unsupportedInit": "Not supported init system is used.",
			"processTimeout": "Service manager process timed out.",
			"missingService": "Requested service not found",
			"unsupportedService": "Unsupported service"
		},
		"messages": {
			"refreshSuccess": "Service status successfully refreshed."
		}
	},
	"table": {
		"actions": {
			"title": "Actions",
			"add": "Add",
			"delete": "Delete",
			"edit": "Edit",
			"enable": "Enable",
			"disable": "Disable"
		},
		"messages": {
			"noRecords": "No records have been found."
		}
	}
}
