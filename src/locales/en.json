{
	"account": {
		"recovery": {
			"title": "Account recovery",
			"changePassword": "Change password",
			"changePrompt": "Please enter new password.",
			"requestPrompt": "Please enter username and a password recovery email will be sent to the associated address.",
			"sendEmail": "Send email",
			"messages": {
				"changeFailed": "Failed to change password: {error}",
				"changeSuccess": "Password has been successfully changed.",
				"sendFailed": "Failed to send password recovery email: {error}",
				"sendSuccess": "An email containing further instructions to reset your password was sent to the address associated with the account."
			}
		},
		"email": {
			"add": "Add e-mail address",
			"messages":{
				"missing": "Your account does not have an e-mail address set up. Without the verified e-mail address, you can not reset your password if it is forgotten.",
				"unverified": "Your e-mail address ({email}) is not verified. Without the verified e-mail address, you can not reset your password if it is forgotten."
			}
		}
	},
	"cloud": {
		"title": "Clouds",
		"description": "Add a connection into cloud services.",
		"messages": {
			"downloadFailure": "The webapp has not been able to download the root CA certificate. Probably the gateway has not been connected into the Internet.",
			"cannotCreateDir": "The webapp has not been able to create a directory for the certificates.",
			"success": "The new connection to the cloud service has been created successfully.",
			"timeout": "Request to create new connection has timed out."
		},
		"amazonAws": {
			"title": "Amazon AWS IoT",
			"description": "Adds a new MQTT connection into Amazon AWS IoT.",
			"form": {
				"title": "Amazon AWS IoT MQTT connection wizard",
				"endpoint": "Endpoint"
			},
			"messages": {
				"saveFailed": "Failed to save Amazon AWS IoT MQTT connection configuration: {error}",
				"mismatchedCrtAndKey": "The private key does not correspond to the certificate."
			},
			"errors": {
				"endpoint": "Please enter the endpoint.",
				"certificate": "Please enter the certificate.",
				"key": "Please enter the private key."
			}
		},
		"hexio": {
			"title": "Hexio IoT Platform",
			"description": "Adds a new MQTT connection into Hexio IoT Platform.",
			"form": {
				"title": "Hexio IoT Platform MQTT connection wizard"
			},
			"messages": {
				"saveFailed": "Failed to save Hexio IoT Platform MQTT connection configuration: {error}"
			}
		},
		"ibmCloud": {
			"title": "IBM Cloud",
			"description": "Adds a new MQTT connection into IBM Cloud.",
			"form": {
				"title": "IBM Cloud MQTT connection wizard",
				"organizationId": "Organization ID",
				"deviceType": "Device type",
				"deviceId": "Device ID",
				"token": "Authentication token",
				"eventId": "Command and event ID"
			},
			"errors": {
				"organizationId": "Please enter the organization ID.",
				"deviceType": "Please enter the device type.",
				"deviceId": "Please enter the device ID.",
				"token": "Please enter the authentication token.",
				"eventId": "Please enter command and event ID."
			},
			"messages": {
				"saveFailed": "Failed to save IBM Cloud MQTT connection configuration: {error}"
			}
		},
		"intelimentsInteliGlue": {
			"title": "Inteliments InteliGlue",
			"description": "Adds a new MQTT connection into Inteliments InteliGlue.",
			"form": {
				"title": "Inteliments InteliGlue MQTT connection wizard",
				"rootTopic": "Root Topic",
				"assignedPort": "Assigned Port"
			},
			"errors": {
				"rootTopic": "Please enter the root topic.",
				"assignedPort": "Please enter the assigned port.",
				"assignedPortRange": "Port has to be an integer in range from 0 to 65535."
			},
			"messages": {
				"saveFailed": "Failed to save InteliGlue MQTT connection configuration: {error}"
			}
		},
		"msAzure": {
			"title": "Microsoft Azure IoT hub",
			"description": "Adds a new MQTT connection into Microsoft Azure IoT Hub.",
			"form": {
				"title": "Microsoft Azure IoT Hub MQTT connection wizard",
				"connectionString": "IoT Hub Connection String for Device"
			},
			"messages": {
				"saveFailed": "Failed to save Azure IoT hub connection configuration: {error}",
				"invalidConnectionString": "Invalid MS Azure IoT Hub connection string for device."
			},
			"errors": {
				"connectionString": "Please enter IoT Hub Connection String for Device."
			}
		},
		"guides": {
			"pdf": "PDF guide",
			"video": "Video guide"
		}
	},
	"daemonStatus": {
		"mode": "Daemon mode",
		"modes": {
			"operational": "Operational",
			"forwarding": "Forwarding",
			"service": "Service",
			"unknown": "Unknown"
		},
		"websocket": {
			"title": "Daemon status",
			"connected": "Connected",
			"notConnected": "Not connected"
		},
		"queue": "Daemon queue",
		"modalTitle": "Daemon mode notice",
		"modalPrompt": "IQRF GW Daemon is in service mode. Change Daemon mode to operational or forwarding before using this feature."
	},
	"states": {
		"disabled": "Disabled",
		"enabled": "Enabled"
	},
	"forms": {
		"fields": {
			"address": "Address",
			"id": "ID",
			"email": "E-mail address",
			"username": "Username",
			"password": "Password",
			"certificate": "Certificate",
			"privateKey": "Private Key",
			"clientId":"Client ID",
			"requestTopic": "Topic for requests",
			"responseTopic": "Topic for responses",
			"instanceName": "Name of instance",
			"messageLevel": {
				"trace": "Trace",
				"debug": "Debug",
				"info": "Info",
				"warning": "Warning",
				"error": "Error"
			},
			"verbose": "Verbose mode",
			"coordinator": "Coordinator"
		},
		"errors": {
			"email": "Please enter the e-mail address.",
			"emailFormat": "Invalid format of the e-mail address.",
			"username": "Please enter the username.",
			"password": "Please enter the password.",
			"clientId": "Please enter the client ID.",
			"requestTopic": "Please enter the topic for requests.",
			"responseTopic": "Please enter the topic for responses.",
			"integer": "This parameter should be an integer.",
			"credentials": "Please enter both username and password, or leave both fields empty."
		},
		"import": "Import",
		"export": "Export",
		"ok": "OK",
		"add": "Add",
		"close": "Close",
		"cancel": "Cancel",
		"edit": "Edit",
		"delete": "Delete",
		"clear": "Clear",
		"back": "Back",
		"indicateCoordinator": "Indicate coordinator",
		"pingNodes": "Ping nodes",
		"restartNodes": "Restart nodes",
		"no": "No",
		"refresh": "Refresh",
		"read": "Read",
		"save": "Save",
		"saveRestart": "Save and restart",
		"scan": "Scan",
		"send": "Send",
		"yes": "Yes",
		"write": "Write",
		"runAutonetwork": "Run AutoNetwork",
		"runDiscovery": "Run Discovery",
		"bond": "Bond Node",
		"unbond": "Unbond Node",
		"clearBonds": "Clear All Bonds",
		"enumerate": "Enumerate",
		"upload": "Upload",
		"update": "Update",
		"backup": "Backup",
		"restore": "Restore",
		"verify": "Verify",
		"load": "Load",
		"allSteps": "Run All Steps",
		"on": "On",
		"off": "Off",
		"skip": "Skip",
		"clipboardCopy": "Copy to clipboard",
		"changePassword": "Change password",
		"downloadBackup": "Download backup",
		"get": "Get",
		"set": "Set",
		"unknown": "Unknown",
		"retry": "Retry",
		"start": "Start",
		"stop": "Stop",
		"notAvailable": "N/A",
		"messages": {
			"getConfTimeout": "The request to retrieve current configuration timed out.",
			"saveConfTimeout": "The request to save new configuration timed out.",
			"saveSuccess": "Configuration has been successfully saved.",
			"submitBadRequest": "Invalid JSON syntax.",
			"submitServerError": "Internal server error has occurred.",
			"componentNotFound": "Component or instance not found.",
			"fetchFail": "Failed to retrieve component or instance configuration.",
			"deviceOffline": "Device at address {address} is offline.",
			"noDevice": "No device is bonded at address {address}.",
			"coordinatorOffline": "Coordinator device is offline.",
			"noBondedNodes": "There are no bonded nodes in network."
		}
	},
	"config": {
		"title": "Configuration",
		"description": "Edit configuration.",
		"success": "The configuration has been saved successfully.",
		"repository": {
			"title": "IQRF repository",
			"description": "Manage configuration of IQRF repository extension.",
			"form": {
				"endpoint": "API endpoint",
				"credentials": "Use credentials"
			},
			"errors": {
				"endpointMissing": "Please enter repository API endpoint."
			},
			"messages": {
				"disabled": "IQRF repository extension configuration feature is disabled.",
				"fetchFailed": "Failed to retrieve IQRF repository configuration: {error}",
				"saveFailed": "Failed to save IQRF repository configuration: {error}",
				"saveSuccess": "IQRF repository configuration has been successfully saved."
			}
		},
		"daemon": {
			"title": "IQRF GW daemon",
			"description": "IQRF Daemon configuration",
			"main": {
				"title": "Main configuration",
				"description": "Main configuration of IQRF Gateway Daemon.",
				"form": {
					"applicationName": "Application name",
					"resourceDir": "Resource directory",
					"dataDir": "Data directory",
					"cacheDir": "Cache directory",
					"userDir": "User directory",
					"configurationDir": "Configuration directory",
					"deploymentDir": "Deployment directory"
				},
				"messages": {
					"fetchFailed": "Failed to retrieve main configuration: {error}",
					"saveFailed": "Failed to save main configuration: {error}",
					"saveSuccess": "Main configuration has been successfully saved."
				}
			},
			"components": {
				"title": "Components",
				"description": "Manage components.",
				"add": "Add component",
				"edit": "Edit component",
				"form": {
					"name": "Component name",
					"libraryPath": "Library path",
					"libraryName": "Library name",
					"startLevel": "Start level"
				},
				"messages": {
					"getFailed": "Failed to retrieve component {component} configuration: {error}.",
					"listFailed": "Failed to retrieve components configuration: {error}.",
					"saveFailed": "Failed to save component {component} configuration: {error}.",
					"saveSuccess": "Component {component} configuration successfully saved.",
					"changeEnabledFailed": "Failed to change enabled state of component {component}: {error}.",
					"changeEnabledSuccess": "Enabled state of component {component} successfully changed.",
					"deleteFailed": "Failed to delete component {component}: {error}.",
					"deletePrompt": "Do you really want to delete component {component}?",
					"deleteTitle": "Delete component",
					"deleteSuccess": "Configuration of component {component} has been successfully deleted.",
					"multipleInterfaces": "Only one IQRF interface can be enabled at a time."
				},
				"errors": {
					"name": "Please enter name of component.",
					"libraryPath": "Please enter path to component's library directory.",
					"libraryName": "Please enter name of component's library file.",
					"startLevel": "Please enter component's start level."
				}
			},
			"interfaces": {
				"title": "Interfaces",
				"description": "Configuration of IQRF communication interfaces.",
				"messages": {
					"fetchFailed": "Failed to retrieve interfaces configuration.",
					"listFailed": "Failed to retrieve list of interfaces: {error}.",
					"noInterface": "All IQRF communication interfaces are disabled.",
					"updateSuccess": "Interface {interface} has been successfully enabled. Restart IQRF Gateway Daemon for changes to take effect.",
					"updateFailed": "Failed to change active interface: {error}."
				},
				"form": {
					"interface": "Select active interface",
					"placeholder": "Please select communication interface."
				},
				"types": {
					"cdc": "CDC",
					"spi": "SPI",
					"uart": "UART"
				},
				"iqrfCdc": {
					"title": "IQRF CDC interface",
					"mappings": "Available CDC mappings",
					"form": {
						"interface": "CDC interface name"
					},
					"errors": {
						"instance": "Please enter CDC interface instance name.",
						"iqrfInterface": "Please enter CDC interface name."
					},
					"messages": {
						"saveFailed": "Failed to save CDC interface configuration: {error}.",
						"saveSuccess": "CDC interface configuration successfully saved."
					}
				},
				"iqrfSpi": {
					"title": "IQRF SPI interface",
					"mappings": "Available SPI mappings",
					"form": {
						"iqrfInterface": "SPI interface name",
						"spiReset": "Enable SPI reset"
					},
					"errors": {
						"instance": "Please enter SPI interface instance name.",
						"iqrfInterface": "Please enter SPI interface name."
					},
					"messages": {
						"saveFailed": "Failed to save SPI interface configuration: {error}.",
						"saveSuccess": "SPI interface configuration successfully saved."
					}
				},
				"iqrfUart": {
					"title": "IQRF UART interface",
					"mappings": "Available UART mappings",
					"form": {
						"iqrfInterface": "UART interface name",
						"baudRate": "UART baud rate",
						"uartReset": "UART reset"
					},
					"errors": {
						"instance": "Please enter UART interface instance name.",
						"iqrfInterface": "Please enter UART interface name.",
						"baudRate": "Please select UART baud rate."
					},
					"messages": {
						"saveFailed": "Failed to save UART interface configuration: {error}.",
						"saveSuccess": "UART interface configuration successfully saved."
					}
				},
				"iqrfDpa":{
					"title": "IQRF DPA interface",
					"form": {
						"DpaHandlerTimeout": "DPA Confirmation/Response timeout in milliseconds"
					},
					"errors": {
						"instance": "Please enter name of IQRF DPA instance.",
						"DpaHandlerTimeout": "Please enter default DPA Confirmation/Response timeout greater or equal to 0."
					},
					"messages": {
						"saveFailed": "Failed to save DPA interface configuration: {error}.",
						"saveSuccess": "DPA interface configuration successfully saved."
					}
				},
				"interfaceMapping": {
					"adapters": "Adapters",
					"boards": "Boards",
					"interfaces": "Interfaces",
					"add": "Add mapping",
					"edit": "Edit mapping",
					"set": "Set mapping",
					"delete": "Delete mapping",
					"deleteModal": {
						"title": "Mapping delete confirmation",
						"prompt": "Are you sure you want to delete mapping {mapping}?"
					},
					"form": {
						"type": "Mapping type",
						"name": "Mapping name",
						"deviceType": "Device type",
						"deviceTypes": {
							"adapter": "Adapter",
							"board": "Board"
						},
						"interface": "Device interface",
						"powerPin": "Power enable GPIO pin",
						"busPin": "Bus enable GPIO pin",
						"pgmPin": "Programming mode switch GPIO pin",
						"useAdditionalPins": "Use communication interface pins",
						"i2cPin": "I2C interface enable GPIO pin",
						"spiPin": "SPI interface enable GPIO pin",
						"uartPin": "UART interface enable GPIO pin",
						"baudRate": "UART baud rate"
					},
					"errors": {
						"typeSelect": "Please select mapping type.",
						"name": "Please enter mapping name.",
						"interface": "Please enter device name.",
						"busPin": "Bus enable GPIO pin number should be an integer.",
						"pgmPin": "Programming mode switch GPIO pin number should be an integer.",
						"powerPin": "Power enable GPIO pin number should be an integer.",
						"i2cPin": "IC2 interface enable GPIO pin number should be an integer.",
						"spiPin": "SPI interface enable GPIO pin number should be an integer.",
						"uartPin": "UART interface enable GPIO pin number should be an integer."
					},
					"messages": {
						"getFailed": "Failed to retrieve mapping {id}: {error}.",
						"listFailed": "Failed to retrieve interface mappings: {error}.",
						"deleteFailed": "Failed to delete mapping {mapping}: {error}",
						"deleteSuccess": "Mapping {mapping} has been successfully deleted.",
						"saveFailed": "Failed to save mapping {mapping}: {error}.",
						"saveSuccess": "Mapping {mapping} has been successfully saved."
					}
				}
			},
			"messagings": {
				"tlsTitle": "TLS",
				"title": "Messagings",
				"description": "Configuration of messagings.",
				"deleteDialog": {
					"title": "{messaging} messaging instance delete confirmation",
					"prompt": "Are you sure you want to delete {messaging} messaging instance {instance}?",
					"success": "{messaging} messaging instance {instance} has been deleted.",
					"failed": "Failed to delete {messaging} messaging instance {instance}: {error}"
				},
				"mqtt": {
					"title": "MQTT messaging",
					"description": "MQTT messaging settings.",
					"legend": "MQTT messaging instance",
					"add": "Add MQTT messaging instance",
					"edit": "Edit MQTT messaging instance",
					"form": {
						"BrokerAddr": "Broker address",
						"Persistence": "Persistence",
						"Persistences": {
							"0": "In-memory",
							"1": "File system-based",
							"2": "Application-specific"
						},
						"QoS": "QoS",
						"QoSes": {
							"0": "QoS 0",
							"1": "QoS 1",
							"2": "QoS 2"
						},
						"User": "User",
						"EnabledSSL": "Enabled TLS",
						"KeepAliveInterval": "Keep alive interval",
						"ConnectTimeout": "Connection timeout",
						"MinReconnect": "Minimum number of reconnects",
						"MaxReconnect": "Maximum number of reconnects",
						"TrustStore": "CA certificate",
						"PrivateKeyPassword": "Private key password",
						"EnabledCipherSuites": "Enabled cipher suites",
						"EnableServerCertAuth": "Enable server certificate authentication"
					},
					"modal": {
						"title": "MQTT messaging instance delete confirmation",
						"prompt": "Are you sure you want to delete MQTT messaging instance {instance}?"
					},
					"messages": {
						"deleteFailed": "Failed to delete MQTT messaging instance {instance}: {error}",
						"deleteSuccess": "MQTT messaging instance {instance} has been deleted.",
						"saveFailed": "Failed to save MQTT messaging instance {instance}: {error}",
						"saveSuccess": "MQTT messaging instance {instance} has been successfully saved.",
						"fetchFailed": "Failed to retrieve MQTT messaging instance {instance}: {error}",
						"listFailed": "Failed to retrieve list of MQTT messaging instances: {error}",
						"persistence": {
							"0": "State of in-flight messages is lost in case of a client shutdown or failure. Some messages may not be delivered even with QoS 1 or higher.",
							"1": "State of in-flight messages is held in persistent storage and prevents loss of messages to some degree in case of a client failure.",
							"2": "Persistence control is delegated to the application."
						},
						"qos": {
							"0": "Fastest method, but the delivery of a message is not guaranteed.",
							"1": "Messages are guaranteed to be delivered at least once by acknowledging receipt of a message.",
							"2": "Safest but slowest method. Message is guaranteed to be delivered exactly once utilizing a 4-part handshake."
						}
					},
					"errors": {
						"instance": "Please enter name of MQTT instance.",
						"BrokerAddr": "Please enter address of MQTT broker.",
						"Persistence": "Please enter persistence.",
						"QoS": "Please select QoS.",
						"KeepAliveInterval": "Please enter keep alive interval greater or equal to 0 (disabled).",
						"ConnectTimeout": "Please enter connection timeout greater or equal to 0 (disabled).",
						"MinReconnect": "Please enter minimum number of reconnects greater or equal to 0 (disabled) and less or equal to maximum number of reconnects.",
						"MaxReconnect": "Please enter maximum number of reconnects greater or equal to minimum number of reconnects."
					}
				},
				"websocket": {
					"title": "WebSocket interface",
					"description": "IQRF WebSocket interface settings.",
					"form": {
						"WebsocketPort": "WebSocket port",
						"acceptOnlyLocalhost": "Accept only connection from localhost",
						"tlsEnabled": "TLS",
						"tlsMode": "TLS mode",
						"tlsModes": {
							"intermediate": "Intermediate",
							"modern": "Modern",
							"old": "Old",
							"descriptions": {
								"intermediate": "General-purpose servers with a variety of clients, recommended for almost all systems. Supports Firefox 27, Android 4.4.2, Chrome 31, Edge, IE 11 on Windows 7, Java 8u31, OpenSSL 1.0.1, Opera 20, and Safari 9.",
								"modern": "Services with clients that support TLS 1.3 and don't need backward compatibility. Supports Firefox 63, Android 10.0, Chrome 70, Edge 75, Java 11, OpenSSL 1.1.1, Opera 57, and Safari 12.1.",
								"old": "Compatible with a number of very old clients, and should be used only as a last resort. Supports Firefox 1, Android 2.3, Chrome 1, Edge 12, IE8 on Windows XP, Java 6, OpenSSL 0.9.8, Opera 5, and Safari 1."
							}
						},
						"requiredInterfaces": "Required interfaces",
						"requiredInterface": {
							"add": "Add another interface",
							"remove": "Remove this interface",
							"name": "Required interface name",
							"instance": "Required WebSocket service"
						}
					},
					"removeDialog": {
						"title": "WebSocket {type} delete confirmation",
						"prompt": "Are you sure you want to delete WebSocket {type} instance {instance}?",
						"deleteFailed": "Failed to delete WebSocket {type} instance {instance}: {error}",
						"deleteSuccess": "WebSocket {type} instance {instance} has been successfully deleted.",
						"interfaceTitle": "WebSocket interface delete confirmation",
						"interfacePrompt": "Are you sure you want to delete WebSocket interface instance {instance}?",
						"interfaceDeleteFailed": "Failed to delete WebSocket interface instance {instance}: {error}",
						"interfaceDeleteSuccess": "WebSocket interface instance {instance} has been successfully deleted."
					},
					"interface": {
						"title": "WebSocket interfaces",
						"legend": "WebSocket interface instance",
						"add": "Add WebSocket interface",
						"edit": "Edit WebSocket interface",
						"messages": {
							"getFailed": "Failed to retrieve WebSocket interface {interface} configuration: {error}.",
							"listFailed": "Failed to retrieve list of WebSocket interfaces: {error}",
							"saveFailed": "Failed to save WebSocket interface {interface} configuration: {error}.",
							"saveSuccess": "WebSocket interface {interface} configuration successfully saved.",
							"updateFailed": "Failed to update WebSocket interface {interface} configuration: {error}.",
							"updateSuccess": "WebSocket interface {interface} configuration successfully updated."
						}
					},
					"messaging": {
						"title": "WebSocket messagings",
						"add": "Add WebSocket messaging",
						"edit": "Edit WebSocket messaging",
						"messages": {
							"getFailed": "Failed to retrieve WebSocket messaging {messaging} configuration: {error}.",
							"listFailed": "Failed to retrieve WebSocket messaging configuration: {error}.",
							"saveFailed": "Failed to save WebSocket messaging {messaging} configuration: {error}.",
							"saveSuccess": "WebSocket messaging {messaging} configuration successfully saved.",
							"updateFailed": "Failed to update WebSocket messaging {messaging} configuration: {error}.",
							"updateSuccess": "WebSocket messaging {messaging} configuration successfully  updated."
						}
					},
					"service": {
						"title": "WebSocket services",
						"legend": "WebSocket service instance",
						"add": "Add WebSocket service",
						"edit": "Edit WebSocket service",
						"messages": {
							"getFailed": "Failed to retrieve WebSocket service {service} configuration: {error}.",
							"listFailed": "Failed to retrieve WebSocket service configuration: {error}.",
							"saveFailed": "Failed to save WebSocket service {service} configuration: {error}.",
							"saveSuccess": "WebSocket service {service} configuration successfully saved.",
							"updateFailed": "Failed to update WebSocket service {service} configuration: {error}.",
							"updateSuccess": "WebSocket service {service} configuration successfully  updated."
						}
					},
					"errors": {
						"instance": "Please enter name of WebSocket interface.",
						"messagingInstance": "Please enter name of WebSocket messaging.",
						"serviceInstance": "Please enter name of WebSocket service.",
						"WebsocketPort": "Please enter WebSocket port number.",
						"WebsocketPortRange": "Please enter valid WebSocket port number - an integer between 1 and 65535.",
						"interfaceName": "Please select the name of required interface.",
						"interfaceInstance": "Please select the required WebSocket service instance.",
						"tlsMode": "Please select TLS mode.",
						"certificate": "Please enter path to the TLS certificate.",
						"privateKey": "Please enter path to the private key."
					}
				},
				"mq": {
					"title": "MQ messaging",
					"description": "MQ messaging settings.",
					"add": "Add MQ messaging instance",
					"edit": "Edit MQ messaging instance",
					"form": {
						"LocalMqName": "Local MQ name",
						"RemoteMqName": "Remote MQ name"
					},
					"modal": {
						"title": "MQ messaging instance delete confirmation",
						"prompt": "Are you sure you want to delete MQ messaging instance {instance}?"
					},
					"messages": {
						"addFailed": "Failed to create new MQ messaging instance: {error}",
						"addSuccess": "MQ messaging instance {instance} has been added.",
						"deleteFailed": "Failed to delete MQ messaging instance {instance}: {error}",
						"deleteSuccess": "MQ messaging instance {instance} has been deleted.",
						"editFailed": "Failed to edit MQ messaging instance {instance}: {error}",
						"editSuccess": "MQ messaging instance {instance} has been edited.",
						"fetchFailed": "Failed to retrieve MQ messaging instance {instance}: {error}",
						"listFailed": "Failed to retrieve list of MQ messaging instances: {error}"
					},
					"errors": {
						"instance": "Please enter name of MQ instance.",
						"LocalMqName": "Please enter local MQ name.",
						"RemoteMqName": "Please enter remote MQ name."
					}
				},
				"udp": {
					"title": "UDP messaging",
					"description": "IQRF UDP messaging settings.",
					"add": "Add UDP messaging instance",
					"edit": "Edit UDP messaging instance",
					"form": {
						"RemotePort": "Remote port",
						"LocalPort": "Local port"
					},
					"modal": {
						"title": "UDP messaging instance delete confirmation",
						"prompt": "Are you sure you want to delete UDP messaging instance {instance}?"
					},
					"messages": {
						"addFailed": "Failed to create new UDP messaging instance: {error}",
						"addSuccess": "UDP messaging instance {instance} has been added.",
						"deleteFailed": "Failed to delete UDP messaging instance {instance}: {error}",
						"deleteSuccess": "UDP messaging instance {instance} has been deleted.",
						"editFailed": "Failed to edit UDP messaging instance {instance}: {error}",
						"editSuccess": "UDP messaging instance {instance} has been edited.",
						"fetchFailed": "Failed to retrieve UDP messaging instance {instance}: {error}",
						"listFailed": "Failed to retrieve list of UDP messaging instances: {error}"
					},
					"errors": {
						"instance": "Please enter name of UDP messaging instance.",
						"RemotePort": "Please enter remote port - integer between 1 and 65535.",
						"LocalPort": "Please enter local port - integer between 1 and 65535."
					}
				},
				"acceptAsyncMsg": "Accept asynchronous messages",
				"instanceInvalid": "Messaging instance name cannot contain the ampersand symbol (&)."
			},
			"scheduler": {
				"title": "Scheduler",
				"description": "Scheduler settings.",
				"add": "Add task",
				"edit": "Edit task",
				"table": {
					"title": "Tasks",
					"active": "Active",
					"time": "Time",
					"service": "Service",
					"mType": "Message types"
				},
				"form": {
					"task": {
						"taskId": "Task ID",
						"description": "Description",
						"timeSpec": "Start time type",
						"timeSpecTypes": {
							"exact": "Oneshot - execute task once at specified time",
							"periodic": "Periodic - frequency of task execution in seconds",
							"cron": "Cron time expression - specifies when and how often a task is executed"
						},
						"cronTime": "Time in cron format",
						"period": "Period in seconds",
						"startTime": "Start time",
						"persistent": "Persistent task",
						"enabled": "Start task automatically"
					},
					"messages": {
						"title": "Messages",
						"label": "Message (JSON request)",
						"messaging": "Messaging",
						"messagingPlaceholder": "Select messaging",
						"add": "Add another message",
						"remove": "Remove message"
					},
					"messagings": {
						"add": "Add another messaging",
						"remove": "Remove messaging"
					}
				},
				"errors": {
					"taskIdMissing": "Please enter task ID.",
					"taskIdInvalid": "Task ID should be UUID v4.",
					"service": "Please select service.",
					"messaging": "Please select messaging.",
					"message": "Please enter a message.",
					"period": "Period should be an integer greater than 0.",
					"cron": "Please enter a valid 7 field cron time expression."
				},
				"import": {
					"title": "Import task(s)",
					"file": "JSON task file or ZIP archive with tasks",
					"errors": {
						"fileEmpty": "Please select file to import."
					}
				},
				"modal": {
					"title": "Scheduler task delete confirmation",
					"deletePrompt": "Are you sure you want to delete scheduler task {task}?",
					"deleteAllPrompt": "Are you sure you want to delete all scheduler tasks?"
				},
				"messages": {
					"exportFailed": "Failed to export scheduler tasks: {error}",
					"exportNoTasks": "There are not tasks to export.",
					"importFailed": "Failed to import scheduler task(s): {error}",
					"importSuccess": "The tasks has been imported successfully.",
					"deleteSuccess": "Scheduler task has been successfully deleted.",
					"deleteFail": "An error occurred while removing task.",
					"deleteFailedRest": "Failed to delete task {task}: {error}",
					"deleteAllSuccess": "All scheduler tasks have been successfully removed.",
					"deleteAllFailed": "Failed to delete all scheduler tasks.",
					"deleteAllFailedRest": "Failed to delete all scheduler tasks: {error}",
					"getFail": "Failed to retrieve task {task}: {error}",
					"listFailed": "Failed to retrieve list of scheduler tasks",
					"listFailedRest": "Failed to retrieve list of scheduler tasks: {error}",
					"addFailedRest": "Failed to create new scheduler task: {error}",
					"addSuccess": "Scheduler task has been successfully added.",
					"editFailedRest": "Failed to edit scheduler task: {error}",
					"editSuccess": "Scheduler task {task} has been successfully edited.",
					"startFailed": "Failed to start scheduler task.",
					"startSuccess": "Scheduler task {task} has been successfully started.",
					"startTimeout": "Scheduler task start request timed out.",
					"stopFailed": "Failed to stop scheduler task.",
					"stopSuccess": "Scheduler task {task} has been successfully stopped.",
					"stopTimeout": "Scheduler task stop request timed out.",
					"processError": "An error has occurred while processing Daemon API request.",
					"messagingFailed": "Failed to retrieve messaging services: {error}",
					"rest": {
						"invalidTask": "Task configuration is not valid.",
						"invalidFile": "Imported scheduler configuration is not valid.",
						"notFound": "Task does not exist.",
						"exists": "Task with this ID already exists."
					}
				}
			},
			"misc": {
				"title": "Misc",
				"description": "Configuration of miscellaneous Daemon components",
				"jsonApi": {
					"title": "JSON API",
					"messages": {
						"saveFailed": "Failed to save JSON API configuration: {error}",
						"saveSuccess": "JSON API configuration successfully saved.",
						"saveNoChanges": "No configuration changes detected."
					}
				},
				"jsonRawApi": {
					"title": "JSON Raw API",
					"description": "JSON Raw API settings.",
					"form": {
						"asyncDpaMessage": "Allow asynchronous DPA messages"
					},
					"errors": {
						"instance": "Please enter name of JSON Raw API instance."
					},
					"messages": {
						"saveFailed": "Failed to save JSON Raw API configuration: {error}.",
						"saveSuccess": "JSON Raw API configuration successfully saved."
					}
				},
				"jsonSplitter": {
					"title": "JSON Splitter",
					"description": "JSON Splitter settings.",
					"form": {
						"validateJsonResponse": "Validate JSON responses",
						"insId": "JSON Splitter instance ID"
					},
					"errors": {
						"instance": "Please enter name of JSON Splitter instance.",
						"insId": "Please enter ID of JSON Splitter instance."
					},
					"messages": {
						"saveFailed": "Failed to save JSON Splitter configuration: {error}.",
						"saveSuccess": "JSON Splitter configuration successfully saved."
					}
				},
				"iqrfRepository": {
					"title": "IQRF Repository",
					"description": "Manage IQRF Repository's settings.",
					"cacheUpdate": "Update cache",
					"form": {
						"urlRepo": "IQRF Repository URL",
						"enableCheck": "Check for updates periodically",
						"checkPeriod": "Check period in minutes",
						"downloadIfEmpty": "Download if repository cache is empty"
					},
					"errors": {
						"instance": "Please enter name of IQRF Repository instance.",
						"urlRepo": "Please enter IQRF Repository URL.",
						"checkPeriod": "Please enter an integer greater or equal to 0."
					},
					"messages": {
						"cacheUpdateFailed": "Failed to update cache: {error}",
						"cacheUpdateNotNeeded": "Cache is already up to date.",
						"cacheUpdateSuccess": "Cache successfully updated.",
						"cacheUpdateTimeout": "Cache update request timed out.",
						"saveFailed": "Failed to save IQRF repository configuration: {error}.",
						"saveSuccess": "IQRF repository configuration successfully saved."
					}
				},
				"iqrfInfo": {
					"title": "Lite DB",
					"description": "IQRF Info database settings.",
					"form": {
						"enumAtStartUp": "Enumerate network on startup",
						"enablePeriodic": "Enumerate network periodically",
						"enumPeriod": "Enumeration period in minutes",
						"enumUniformDpaVer": "Read only HWPID and HWPID version from nodes",
						"metaDataToMessages": "Include metadata in messages"
					},
					"errors": {
						"instance": "Please enter name of IQRF Info instance.",
						"enumPeriod": "Period must be greater or equal to 0."
					},
					"messages": {
						"saveFailed": "Failed to save Lite DB configuration: {error}.",
						"saveSuccess": "Lite DB configuration successfully saved."
					}
				},
				"iqmesh": "IQMESH services",
				"otaUpload": {
					"title": "IQRF OTA upload service",
					"form": {
						"uploadPath": "Path to a directory with files to upload"
					},
					"errors": {
						"instance": "Please enter name of OTA upload service instance.",
						"uploadPath": "Please enter path to a directory with files to upload."
					},
					"messages": {
						"saveFailed": "Failed to save OTA upload service configuration: {error}.",
						"saveSuccess": "OTA upload service configuration successfully saved."
					}
				},
				"monitor": {
					"title": "Monitoring service",
					"description": "Monitoring service configuration.",
					"add": "Add a new monitoring service",
					"edit": "Edit the monitoring service",
					"form": {
						"title": "Monitoring instance",
						"reportPeriod": "Reporting period in seconds",
						"WebsocketPort": "WebSocket server port",
						"acceptOnlyLocalhost": "Accept only connection from localhost"
					},
					"modal": {
						"title": "Monitoring delete confirmation",
						"prompt": "Are you sure you want to delete Monitoring service instance {instance}?"
					},
					"messages": {
						"addFailed": "Failed to create new Monitoring instance: {error}",
						"addSuccess": "Monitoring service instance {instance} has been added.",
						"deleteFailed": "Failed to delete Monitoring instance {instance}: {error}",
						"deleteSuccess": "Monitoring service instance {instance} has been deleted.",
						"editFailed": "Failed to edit Monitoring instance {instance}: {error}",
						"editSuccess": "Monitoring service instance {instance} has been edited.",
						"fetchFailed": "Failed to retrieve Monitoring instance {instance} configuration: {error}"
					},
					"errors": {
						"instance": "Please enter name of monitor instance.",
						"reportPeriod": "Please enter the reporting period in seconds.",
						"WebsocketPort": "Please enter the port of monitoring WebSocket server."
					}
				},
				"tracer": {
					"title": "Logging service",
					"description": "Logging service settings.",
					"add": "Add logging service configuration",
					"edit": "Edit logging service configuration",
					"form": {
						"title": "Logging instance",
						"path": "Path to directory with logs",
						"filename": "File name",
						"maxSize": "Maximum size in bytes",
						"maxAgeMinutes": "Maximum lifespan of timestamped files in minutes",
						"maxNumber": "Maximum number of timestamped files",
						"timestampFiles": "Enable timestamps in files",
						"verbosityLevels": {
							"title": "Logging verbosity",
							"add": "Add verbosity level",
							"remove": "Remove verbosity level"
						},
						"channel": "Verbosity channel",
						"level": "Verbosity level"
					},
					"modal": {
						"title": "Logging delete confirmation",
						"prompt": "Are you sure you want to delete Logging instance {instance}?"
					},
					"messages": {
						"zeroValues": "Disabled if value is set to 0.",
						"addFailed": "Failed to create new Logging instance: {error}",
						"addSuccess": "Logging instance {instance} has been added.",
						"deleteFailed": "Failed to delete Logging instance {instance}: {error}",
						"deleteSuccess": "Logging instance {instance} has been deleted.",
						"editFailed": "Failed to edit Logging instance {instance}: {error}",
						"editSuccess": "Logging instance {instance} has been edited.",
						"fetchFailed": "Failed to retrieve Logging instance {instance} configuration: {error}"
					},
					"errors": {
						"instance": "Please enter name of logging service interface.",
						"filename": "Please enter logging service file name.",
						"maxSizeMb": "Please enter maximum size in MB greater or equal to 1.",
						"maxAgeMinutes": "Please enter maximum lifespan of timestamped files in minutes, greater or equal to 0.",
						"maxNumber": "Please enter maximum number of timestamped files, greater than or equal to 0.",
						"verbosityLevels": {
							"channel": "Please enter the verbosity channel.",
							"level": "Please select the verbosity level."
						}
					}
				}
			},
			"messages": {
				"configMiscFetch": "Retrieving miscellaneous components configuration...",
				"configFailed": "An unexpected error has occurred: {error}",
				"configFetchFailed": "Failed to retrieve configuration for {children}.",
				"failedElement": "Failed to retrieve component configuration."
			}
		},
		"translator": {
			"title": "IQRF GW translator",
			"description": "Translator configuration",
			"form": {
				"rest": {
					"title": "REST API client configuration",
					"port": "Port",
					"apiKey": "API key"
				},
				"mqtt": {
					"title": "MQTT client configuration",
					"port": "Broker port",
					"tls": {
						"trustStore": "CA certificate",
						"keyStore": "Client certificate",
						"privateKey": "Client private key",
						"requireBrokerCert": "Broker certificate required"
					}
				}
			},
			"messages": {
				"disabled": "IQRF Gateway Translator service is disabled.",
				"saveFailed": "Failed to save Translator configuration: {error}",
				"saveSuccess": "Translator configuration has been successfully saved.",
				"fetchFailed": "Failed to retrieve Translator configuration: {error}"
			},
			"errors": {
				"port": "Please enter an integer between 1 and 49151 for port number.",
				"restAddr": "Please enter the REST API address.",
				"apiKey": "Please enter the REST API client key.",
				"apiKeyInvalid": "Invalid REST API key format. The API key format should match [./A-Za-z0-9]{22}\\.[A-Za-z0-9+/=]{44}.",
				"requestTopic": "Please enter the MQTT request topic.",
				"requestTopicInvalid": "Invalid MQTT request topic format. The request topic format should be: gateway/{GWID}/rest/requests/ (GWID is 16 hexadecimal characters).",
				"responseTopic": "Please enter the MQTT response topic.",
				"responseTopicInvalid": "Invalid MQTT response topic format. The response topic format should be: gateway/{GWID}/rest/responses/ (GWID is 16 hexadecimal characters).",
				"clientId": "Please enter the MQTT client ID.",
				"clientIdInvalid": "Invalid MQTT client ID. The client ID should be the GWID (16 hexadecimal digits).",
				"brokerAddr": "Please enter the MQTT broker address."
			}
		},
		"controller": {
			"title": "IQRF GW controller",
			"description": "Controller configuration",
			"form": {
				"daemonApi": {
					"autoNetwork": {
						"title": "AutoNetwork API call",
						"stopConditions": {
							"title": "AutoNetwork stop conditions"
						}
					},
					"discovery": {
						"title": "Discovery API call"
					}
				},
				"factoryReset": {
					"title": "Factory reset",
					"daemon": "Daemon",
					"iqaros": "IQAROS",
					"network": "IP network",
					"webapp": "Webapp"
				},
				"resetButton": {
					"title": "Button",
					"api": "Daemon API call",
					"noCall": "No API call"
				},
				"logger": {
					"title": "Logger",
					"filePath": "Path to log file",
					"severity": "Severity level",
					"sink": "Logging sinks",
					"sinks": {
						"file": "Log to file",
						"syslog": "Log to syslog"
					}
				},
				"wsServers": {
					"title": "Websocket",
					"api": "Daemon API server",
					"monitor": "Monitor server"
				}
			},
			"pins": {
				"title": "Pin configuration",
				"profiles": "Pin configuration profiles",
				"add": "Add controller pin configuration profile",
				"edit": "Edit controller pin configuration profile",
				"adapters": "Adapters",
				"boards": "Boards",
				"actions": {
					"set": "Set pin profile",
					"edit": "Edit pin profile",
					"delete": "Delete pin profile"
				},
				"form": {
					"name": "Profile name",
					"deviceType": "Device type",
					"deviceTypes": {
						"adapter": "Adapter",
						"board": "Board"
					},
					"greenLed": "Green LED pin",
					"redLed": "Red LED pin",
					"button": "Button pin",
					"useI2c": "Use hardware WDT pins",
					"sck": "I2C clock pin",
					"sda": "I2C data pin"
				},
				"errors": {
					"name": "Please enter controller pin configuration profile name.",
					"greenLed": "Green LED pin should be an integer.",
					"redLed": "Red LED pin should be an integer.",
					"button": "Button pin should be an integer.",
					"sck": "I2C clock pin should be an integer.",
					"sda": "I2C data pin should be an integer."
				},
				"messages": {
					"listFailed": "Failed to retrieve list of available pin configuration profiles: {error}",
					"deleteFailed": "Failed to delete controller pin configuration profile {profile}: {error}",
					"deleteSuccess": "Controller pin configuration profile {profile} successfully deleted.",
					"saveFailed": "Failed to save controller pin configuration profile {profile}: {error}",
					"saveSuccess": "Controller pin configuration profile {profile} successfully saved."
				}
			},
			"deleteModal": {
				"title": "Controller pin configuration profile delete confirmation",
				"prompt": "Are you sure you want to delete controller pin configuration profile {profile}?"
			},
			"errors": {
				"daEwaves": "Please enter an integer between 1 and 127 for empty waves stop condition.",
				"daWaves": "Please enter an integer between 1 and 127 for maximum waves stop condition.",
				"ddMaxAddr": "Please enter an integer between 0 and 239 for Discovery process.",
				"invalid": {
					"ws_format": "Invalid websocket server address format. Example: ws://example:1883."
				},
				"missing": {
					"ws_api": "Please enter the Daemon API websocket server address.",
					"ws_monitor": "Please enter the Monitor websocket server address",
					"l_file": "Please enter path to log file.",
					"l_severity": "Please select log severity level.",
					"rb_custom": "Please enter API call identifier."
				}
			},
			"messages": {
				"disabled": "IQRF Gateway Controller service is disabled.",
				"saveFailed": "Failed to save Controller configuration: {error}",
				"restartSuccess": "Controller configuration has been successfully saved. Controller service has been restarted.",
				"fetchFailed": "Failed to retrieve Controller configuration: {error}"
			}
		},
		"selectedComponents": {
			"title": "Selected components",
			"description": "Manage selected components."
		},
		"smtp": {
			"title": "SMTP server",
			"description": "Configure SMTP server.",
			"test": "Test configuration",
			"form": {
				"enabled": "Use SMTP",
				"host": "Host",
				"port": "Port",
				"security": "Connection security",
				"protocols": {
					"none": "None",
					"starttls": "STARTTLS",
					"tls": "TLS"
				},
				"from": "Sender"
			},
			"errors": {
				"hostMissing": "Please enter SMTP host.",
				"hostInvalid": "Invalid SMTP host address.",
				"portMissing": "Please enter SMTP port.",
				"usernameMissing": "Please enter SMTP username.",
				"passwordMissing": "Please enter SMTP password.",
				"senderMissing": "Please enter sender email.",
				"senderInvalid": "Invalid e-mail address."
			},
			"messages": {
				"testDisabled": "Your account does not have an e-mail address set up.",
				"fetchFailed": "Failed to retrieve SMTP configuration: {error}",
				"saveFailed": "Failed to save SMTP configuration: {error}",
				"saveSuccess": "SMTP configuration has been successfully saved.",
				"testFailed": "Failed to send SMTP configuration test e-mail: {error}",
				"testSuccess": "SMTP configuration test e-mail has been successfully sent."
			}
		}
	},
	"core": {
		"title": {
			"generic": "IQRF Gateway Webapp",
			"iqaros": "IQAROS"
		},
		"dashboard": "Dashboard",
		"documentation": {
			"title": "Documentation",
			"description": "Opens the documentation in a new tab."
		},
		"error": {
			"403": {
				"title": "Access denied",
				"header": "Error 403",
				"message": "You do not have permission to view this page. Please try contact the web site administrator if you believe you should be able to view this page."
			},
			"404": {
				"title": "Page not found",
				"header": "Error 404",
				"message": "The page you requested could not be found. It is possible that the address is incorrect, or that the page no longer exists. Please use a search engine to find what you are looking for."
			}
		},
		"grafana": {
			"title": "Grafana",
			"description": "Open Grafana dashboard."
		},
		"navigation": {
			"toggle": "Toggle navigation"
		},
		"nodeRed": {
			"title": "Node-RED",
			"dashboard": {
				"title": "Node-RED dashboard",
				"description": "Open Node-RED dashboard."
			},
			"workflow": {
				"title": "Node-RED workflow",
				"description": "Open Node-RED workflow."
			}
		},
		"languages": {
			"title": "Language",
			"cs": "Czech",
			"en": "English"
		},
		"security": {
			"title": "Security manager",
			"description": "Manage security measures.",
			"apiKey": {
				"title": "API keys",
				"description": "Manage API keys.",
				"add": "Add API key",
				"edit": "Edit API key",
				"noExpiration": "Never",
				"form": {
					"id": "ID",
					"description": "Description",
					"expiration": "Expiration"
				},
				"modal": {
					"title": "API key delete confirmation",
					"prompt": "Are you sure you want to delete API key ID {key}?"
				},
				"messages": {
					"invalid": "Invalid API key metadata.",
					"notFound": "API key with this ID does not exist.",
					"addFailed": "Failed to create new API key: {error}",
					"addSuccess": "New API key has been successfully added.",
					"deleteFailed": "Failed to delete API key ID {key}: {error}",
					"deleteSuccess": "API key ID {key} has been successfully deleted.",
					"editFailed": "Failed to change API key ID {key}: {error}",
					"editSuccess": "API key ID {key} has been successfully updated.",
					"fetchFailed": "Failed to retrieve API key {key}: {error}",
					"listFetchFailed": "Failed to retrieve the list of API keys: {error}"
				},
				"errors": {
					"description": "Please enter API key description."
				}
			},
			"ssh": {
				"title": "SSH keys",
				"description": "Manage SSH keys.",
				"add": "Add SSH key(s)",
				"table": {
					"details": "SSH key details",
					"id": "ID",
					"type": "Type",
					"createdAt": "Date created",
					"hash": "Hash",
					"key": "Key"
				},
				"form": {
					"description": "Description",
					"key": "SSH public key",
					"add": "Add SSH key",
					"remove": "Remove SSH key"
				},
				"errors": {
					"descriptionMissing": "Please enter SSH key description.",
					"keyMissing": "Please enter SSH public key.",
					"keyInvalid": "Invalid SSH public key format. Please enter key in format <type key>."
				},
				"modal": {
					"title": "SSH public key delete confirmation",
					"prompt": "Are you sure you want to delete SSH public key ID {id}?"
				},
				"messages": {
					"installNote": "Add SSH public keys to be used for key-based authorization when accessing the device.",
					"keyClipboard": "SSH public key has been successfully copied to clipboard.",
					"hashClipboard": "SSH key hash has been successfully copied to clipboard.",
					"typeListFailed": "Failed to retrieve list of supported SSH key types.",
					"typeListNone": "No SSH key type supported.",
					"typeListSuccess": "The following SSH key types are supported:",
					"listFailed": "Failed to retrieve list of existing SSH keys: {error}",
					"fetchFailed": "Failed to retrieve SSH public key ID {id}: {error}",
					"deleteFailed": "Failed to delete SSH public key ID {id}: {error}",
					"deleteSuccess": "SSH public key ID {id} has been successfully deleted.",
					"saveFailed": "Failed to save authorized SSH public key(s): {error}",
					"savePartialSuccess": "Authorized SSH public key(s) saved, the following duplicate keys were ignored: {keys}.",
					"saveSuccess": "Authorized SSH public key(s) has been successfully saved."
				}
			}
		},
		"profile": {
			"title": "User profile",
			"form": {
				"oldPassword": "Current password",
				"newPassword": "New password",
				"editProfile": "Edit profile",
				"changePassword": "Change password"
			},
			"messages": {
				"changePassword": "Changing password will log you out of the current session.",
				"changePasswordFailed": "Failed to change password: {error}.",
				"changePasswordSuccess": "Password successfully changed.",
				"saveFailed": "Failed to save user profile changes: {error}.",
				"saveSuccess": "User profile changes successfully saved."
			}
		},
		"user": {
			"title": "User manager",
			"description": "Manage users of this webapp.",
			"add": "Add a new user",
			"edit": "Edit an existing user",
			"resendVerification": "Re-send verification email",
			"role": "User role",
			"roles": {
				"admin": "Admin user",
				"normal": "Normal user",
				"basicadmin": "Basic admin user",
				"basic": "Basic user"
			},
			"language": "Language",
			"languages": {
				"en": "English"
			},
			"verification": {
				"title": "Account verification",
				"success": "Your account has been successfully verified.",
				"redirect": "You will be redirected to the dashboard in {countdown}.",
				"failed": "Account verification failed, {error}."
			},
			"oldPassword": "Old password (only if you want change password)",
			"newPassword": "New password (only if you want change password)",
			"modal": {
				"title": "User delete confirmation",
				"prompt": "Are you sure you want to delete user {user}?"
			},
			"messages": {
				"verifyNotice": "An email containing instructions to verify your account was sent to your address.",
				"resendFailed": "Failed to send a new verification email.",
				"resendSuccess": "A new verification email has been successfully sent.",
				"usernameExists": "Username is already used.",
				"oldPassMismatch": "The old password is incorrect.",
				"addFailed": "Failed to create new user: {error}",
				"addSuccess": "User {user} has been added successfully.",
				"deleteFailed": "Failed to delete user {user}: {error}",
				"deleteSuccess": "User {user} has been deleted successfully.",
				"editFailed": "Failed to update user {user}: {error}",
				"editSuccess": "User {user} has been edited successfully.",
				"fetchFailed": "Failed to retrieve information of user ID {user}: {error}",
				"listFetchFailed": "Failed to retrieve list of users: {error}"
			},
			"errors": {
				"oldPassword": "Please enter the old password.",
				"newPassword": "Please enter the new password.",
				"language": "Please select the language.",
				"role": "Please select the user role."
			}
		},
		"sign": {
			"in": {
				"title": "Sign in",
				"send": "Sign in",
				"recoverPassword": "Forgot password?",
				"messages": {
					"username": "Please enter your username.",
					"password": "Please enter your password.",
					"incorrectUsernameOrPassword": "The username or password you entered is incorrect.",
					"success": "You have been signed in successfully."
				}
			},
			"out": {
				"title": "Sign out",
				"message": "You have been signed out.",
				"expired": "Your sign-in session has expired. Please sign in again."
			}
		},
		"supervisor": {
			"title": "Supervisor Dashboard",
			"description": "Open Supervisor Dashboard."
		}
	},
	"gateway": {
		"title": "Gateway",
		"description": "Control this gateway.",
		"hostname": {
			"title": "Change hostname",
			"setIdeCounterpart": "Set the new hostname as IQRF IDE GW hostname",
			"setJsonSplitter": "Set the new hostname as IQRF Gateway Daemon instance ID",
			"errors": {
				"hostnameMissing": "Please enter hostname.",
				"hostnameInvalid": "Hostname should contain letters a-z (case insensitive), digits 0-9 and a hyphen (-). Cannot start with a hyphen. Cannot be longer than 64 characters."
			},
			"messages": {
				"daemonRestart": "IQRF Gateway Daemon restart is required to apply the changes.",
				"success": "Hostname configuration has been successfully changed.",
				"failed": "Failed to change hostname configuration: {error}"
			}
		},
		"info": {
			"title": "Information",
			"description": "Show information about this gateway.",
			"board": "Board",
			"os": "Operating system",
			"gwId": "IQRF Gateway ID",
			"gwImage": "IQRF Gateway image",
			"version": {
				"iqrfGatewayController": "IQRF Gateway Controller",
				"iqrfGatewayDaemon": "IQRF Gateway Daemon",
				"iqrfGatewaySetter": "IQRF Gateway Setter",
				"iqrfGatewayUploader": "IQRF Gateway Uploader",
				"iqrfGatewayWebapp": "IQRF Gateway Webapp"
			},
			"hostname": "Hostname",
			"uptime": "Uptime",
			"addresses": {
				"ip": "IP addresses",
				"mac": "MAC addresses"
			},
			"tr": {
				"title": "TR info",
				"error": "Cannot get information about the Coordinator.",
				"moduleType": "Module type",
				"mcuType": "MCU type",
				"moduleId": "MID",
				"os": "OS",
				"dpa": "DPA",
				"hwpid": "HWPID",
				"hwpidVersion": "HWPID ver.",
				"voltage": "Supply voltage"
			},
			"usages": {
				"memory": "Memory usage",
				"disks": "Disk usages",
				"swap": "Swap usage",
				"used": "Used"
			},
			"gwMode": "Daemon mode",
			"diagnostics": "Download diagnostics"
		},
		"datetime": {
			"title": "Location & Time",
			"description": "Set date and time, timezone and configure NTP.",
			"status": "Gateway date and time",
			"form": {
				"title": "Location & Time settings",
				"zone": "Timezone",
				"set": "Set time",
				"setOptions": {
					"manual": "Manually",
					"ntp": "Using NTP protocol"
				},
				"datetime": "Date and time",
				"defaultServers": "Use system default NTP servers",
				"browserTime": "Set from browser",
				"server": "NTP server address"
			},
			"errors": {
				"timezone": "Please select a timezone.",
				"serverInvalid": "Server should be either IP address or fully qualified domain name.",
				"serverMissing": "Please enter a server."
			},
			"messages": {
				"timeGetFailed": "Failed to retrieve gateway date and time: {error}",
				"timeSetFailed": "Failed to update gateway time configuration: {error}",
				"timeSetSuccess": "Gateway time configuration has been successfully updated.",
				"timezoneGetFailed": "Failed to retrieve of list of timezones.",
				"timezoneSetSuccess": "Gateway timezone has been successfully changed.",
				"timezoneSetFailed": "Failed to change timezone: {error}."
			}
		},
		"log": {
			"title": "Logs",
			"description": "Shows gateway logs.",
			"download": "Download",
			"uploader": "Uploader",
			"services": {
				"iqrf-gateway-controller": "Controller",
				"iqrf-gateway-daemon": "Daemon",
				"iqrf-gateway-setter": "Setter",
				"iqrf-gateway-translator": "Translator",
				"iqrf-gateway-uploader": "Uploader"
			},
			"messages": {
				"notAvailable": "Service not available.",
				"notLoaded": "Service logs not loaded.",
				"noLogs": "No log records available.",
				"listFailed": "Failed to retrieve list of available logs: {error}",
				"fetchFailed": "Failed to retrieve service log: {error}"
			},
			"journal": {
				"title": "Journal",
				"notLoaded": "Journal records not loaded.",
				"noRecords": "No Journal records available.",
				"noOlderRecords": "No older Journal records available.",
				"loading": "Loading older Journal records...",
				"failed": "Failed to load journal records: {error}"
			}
		},
		"mode": {
			"title": "Change mode",
			"description": "Change gateway mode.",
			"modes": {
				"forwarding": "Forwarding mode",
				"operational": "Operational mode",
				"service": "Service mode",
				"unknown": "Unknown"
			},
			"currentMode": "Current Daemon mode",
			"startupMode": "Startup Daemon mode",
			"messages": {
				"getFailed": "Failed to retrieve the current gateway mode.",
				"setFailed": "An error occurred while setting a new gateway mode.",
				"forwarding": "IQRF Gateway Daemon's mode has been changed to forwarding mode.",
				"operational": "IQRF Gateway Daemon's mode has been changed to operational mode.",
				"service": "IQRF Gateway Daemon's mode has been changed to service mode.",
				"startupFetchFailed": "Failed to retrieve Daemon startup mode: {error}",
				"startupSaveFailed": "Failed to change Daemon startup mode: {error}",
				"startupSaveSuccess": "Daemon startup mode has been successfully changed."
			}
		},
		"power": {
			"title": "Power control",
			"description": "Powers off or reboots this gateway.",
			"reboot": "Reboot",
			"powerOff": "Power off",
			"messages": {
				"powerOffSuccess": "Your device will be powered off at {time}.",
				"powerOffFailed": "Failed to schedule gateway poweroff: {error}.",
				"rebootSuccess": "Your device will be rebooted at {time}, the reboot may take tens of seconds.",
				"rebootFailed": "Failed to schedule gateway reboot: {error}."
			}
		},
		"user": {
			"title": "Change gateway user password",
			"user": "Gateway user: ",
			"messages": {
				"success": "{user} account password has been successfully changed.",
				"failure": "Failed to change {user} account password: {error}"
			}
		},
		"updater": {
			"title": "System updater",
			"description": "System updater.",
			"warning": "System updater is an experimental feature and could change at any time. Please wait until the process displays its output.",
			"update": "Update packages list",
			"listUpgradable": "List upgradable packages",
			"upgrade": "Upgrade packages",
			"upgradablePackages": {
				"title": "List of upgradable packages",
				"packageName": "Name",
				"oldVersion": "Old version",
				"newVersion": "New version"
			},
			"output": "Command output",
			"messages": {
				"disabled": "System updater is disabled.",
				"unsupportedManager": "This device is using an unsupported package manager."
			}
		},
		"errors": {
			"log-read": "Cannot read log file."
		}
	},
	"iqrfnet": {
		"title": "IQRF network",
		"description": "Control IQRF network.",
		"messages": {
			"socketError": "IQRF Gateway Daemon is currently not available. Websocket connection broken or not established. Attempting reconnect...",
			"genericError": "An unexpected error has occurred while processing the request.",
			"genericErrorMessage": "An unexpected error has occurred while processing the request: {error}"
		},
		"product": {
			"title": "Product browser",
			"browse": "Browse products",
			"noProduct": "Could not retrieve products."
		},
		"enumeration": {
			"title": "Device enumeration",
			"deviceInfo": "Device info",
			"deviceAddr": "Device address",
			"hwpid": "HWPID",
			"hwpidVer": "HWPID version",
			"manufacturer": "Manufacturer",
			"product": "Product name",
			"picture": "Product picture",
			"trInfo": "TR info",
			"trType": "TR type",
			"mid": "Module ID",
			"osVersion": "IQRF OS version",
			"dpaVersion": "DPA version",
			"rfMode": "RF mode",
			"rfModes": {
				"lp": "LP",
				"std": "STD"
			},
			"rssi": "RSSI",
			"supplyVoltage": "Supply voltage",
			"back": "Back to Network manager",
			"uncertifiedProduct": "Uncertified product",
			"messages": {
				"failure": "An error occurred during the device enumeration.",
				"repositoryUnavailable": "IQRF Repository is unavailable."
			}
		},
		"networkManager": {
			"title": "Network manager",
			"description": "Network manager.",
			"iqmesh": "IQMESH",
			"autoNetwork": {
				"title": "AutoNetwork",
				"form": {
					"params": {
						"title": "Parameters",
						"actionRetries": "Action retries",
						"discoveryTxPower": "Discovery TX power",
						"discoveryBeforeStart": "Discovery before start",
						"skipDiscoveryEachWave": "Skip discovery each wave",
						"unbondUnrespondingNodes": "Unbond unresponsive nodes",
						"abortOnTooManyNodesFound": "Abort the AutoNetwork if too many nodes were found",
						"skipPrebonding": "Skip prebonding step"
					},
					"stopConditions": {
						"title": "Stop Conditions",
						"waves": "Maximum number of waves",
						"emptyWaves": "Number of empty waves",
						"use": "Enable node count",
						"total": "Number of total nodes",
						"new": "Number of new nodes"
					},
					"bondingControl": {
						"title": "Bonding Control",
						"addressSpace": {
							"title": "Address space",
							"use": "Enable address space"
						},
						"mid": {
							"use": "Enable MID control",
							"file": "MID list file",
							"list": "MID list",
							"filter": "MID filtering",
							"manual": "Manage MIDs"
						},
						"overlappingNetworks": {
							"title": "Overlapping networks",
							"use": "Enable overlapping networks",
							"networks": "Number of networks",
							"network": "Network number"
						}
					},
					"hwpidFiltering": {
						"title": "HWPID Filtering Conditions",
						"use": "Enable HWPID filtering",
						"list": "HWPIDs"
					}
				},
				"midModal": {
					"title": "MID list",
					"table": {
						"deviceMID": "Device MID",
						"deviceAddr": "Device address",
						"note": "User note",
						"unspecified": "Not specified",
						"noItems": "No MIDs specified."
					},
					"invalid": {
						"line": "Line number",
						"content": "Content",
						"error": "Detected error"
					},
					"add": "Add item",
					"errors": {
						"address": "Device address should be an integer between 1 and 239.",
						"duplicateAddr": "This device address is already on the MID list.",
						"mid": "Device MID should be a hexadecimal string 8 characters long.",
						"duplicateMid": "This device MID is already on the MID list."
					}
				},
				"resultModal": {
					"title": "AutoNetwork progress",
					"total": "Nodes in network:",
					"new": "New nodes:",
					"wave": "Waves:",
					"emptyWaves": "Consecutive empty waves:",
					"time": "Total time:",
					"startMessage": "AutoNetwork process started.",
					"endMessage": "AutoNetwork process concluded. {message}",
					"errorMessage": "AutoNetwork process stopped. {message}"
				},
				"midListErrors": {
					"midFormat": "Invalid MID string format.",
					"midDuplicate": "MID already used on line {line}.",
					"addrFormat": "Invalid node address format.",
					"addrRange": "Node address not in range of 1 and 239.",
					"addrDuplicate": "Address already used on line {line}."
				},
				"errors": {
					"messageError": "Invalid request or response.",
					"actionRetries": "Action retries should be an integer between 0 and 3.",
					"discoveryTxPower": "Discovery TX power should be an integer between 0 and 7.",
					"networks": "Number of networks should be an integer between 2 and 50.",
					"network": "Network number should be an integer between 1 and 50.",
					"waves": "Waves should be an integer between 1 and 127.",
					"emptyWaves": "Empty waves should be an integer between 1 and 127.",
					"totalNodes": "Number of total nodes should be an integer between 1 and 239.",
					"newNodes": "Number of new nodes should be an integer between 1 and 239.",
					"addressSpace": "Invalid address space format.",
					"hwpidFilter": "HWPID filter should be a list of integers from between 0 and 65535 separated by a comma."
				},
				"messages": {
					"readFailed": "Failed to read contents of MID list file."
				},
				"notes": {
					"addressSpace": "If enabled, only specified adresses will be assigned to found nodes. If MID list is used, addresses specified in MID list but not in address space will not assigned.",
					"addressSpaceFormat": "The valid format is an enumeration of device addresses (1 - 239) separated by comma or interval <from;to>. E.g. 1,2,4,<10;20>.",
					"midControl": "If enabled, it is possible to bond nodes by their MIDs. Optionally, network address can be specified for each MID.",
					"midRule1": "1. If MID is listed with address and the address is free, this address will be assigned.",
					"midRule2": "2. If MID is listed without an address, the first free and not reserved address will be assigned.",
					"midRule3": "3. If MID is not listed and MID filtering is disabled, the first free and not reserved address will be assigned.",
					"midFilter": "If enabled, detected MIDs that are not listed will not be added to the network. This feature prevents bonding of unknown devices.",
					"hwpidFilter": "If enabled, only devices with specified HWPIDs will be added to the network..",
					"hwpidFilterFormat": "The format is an enumeration of HWPIDs (0-65535) separated by comma. E.g. 4117,4099."
				}
			},
			"backupRestore": {
				"title": "Backup/Restore",
				"backup": {
					"title": "Network backup",
					"form": {
						"target": "Backup target",
						"node": "Node",
						"network": "Whole network",
						"messages": {
							"select": "Please select backup target.",
							"address": "Please enter a node address integer between 1 and 239."
						}
					},
					"messages": {
						"coordinatorRunning": "Backing up coordinator device...",
						"coordinatorSuccess": "Backup of coordinator device completed.",
						"nodeRunning": "Backing up node device {deviceAddr}...",
						"nodeSuccess": "Backup of node device {deviceAddr} completed.",
						"nodeFailed": "Backup of node device {deviceAddr} failed. The device may be offline.",
						"networkRunning": "Backing up network [{progress} %]",
						"networkSuccess": "Network backup has been successfully completed.",
						"networkPartialSuccess": "All online devices have been successfully backed up. Offline devices: {devices}.",
						"timeout": "The backup process request timed out."
					}
				},
				"restore": {
					"title": "Coordinator restore",
					"form": {
						"backupFile": "Backup file",
						"errors": {
							"file": "Please select a backup file.",
							"invalidFile": "Selected file should be a .iqrfbkp file."
						}
					},
					"messages": {
						"accessPasswordNote": "Note: The access password of backed up and restored TR module must be the same for the restore process to finish successfully. Access password can be changed in TR configuration.",
						"invalidDevice": "Device property of entry {entry} should be Coordinator or Node, but is {device}.",
						"invalidAddr": "Address property of entry {entry} should be between 0 and 239, but is {address}.",
						"invalidCoordinatorAddr": "Device property of entry {entry} is Coordinator, but address is not 0. Address: {address}.",
						"invalidCoordinatorDataC": "Device property of entry {entry} is Coordinator, but DataC entry is missing.",
						"invalidCoordinatorDataN": "Device property of entry {entry} is Coordinator, but entry contains property DataN.",
						"invalidNodeAddr": "Device property of entry {entry} is Node, but address is 0.",
						"invalidNodeDataC": "Device property of entry {entry} is Node, but entry contains property DataC.",
						"invalidNodeDataN": "Device property of entry {entry} is Node, but property DataN is missing.",
						"invalidDataContent": "Data{device} property of entry {entry} contains non-hexadecimal characters.",
						"coordinatorRunning": "Restoring coordinator device...",
						"coordinatorSuccess": "Coordinator device has been successfully restored.",
						"readFailed": "Failed to read contents of selected file.",
						"parsingContent": "Reading and parsing content of selected file.",
						"invalidContent": "The uploaded file does not contain valid IQMESH backup data.",
						"missingProp": "Entry {item} does not contain property {property}.",
						"missingCoordinator": "Selected file does not contain coordinator device backup data entry.",
						"invalidSize": "Invalid coordinator backup data size.",
						"checksumMismatch": "Incorrect coordinator backup data checksum.",
						"failedMessage": "Restore process not started: {message}"
					}
				}
			},
			"bondingManager": {
				"title": "Bonding",
				"form": {
					"autoAddress": "Assign address automatically",
					"bondTarget": "Bonding target",
					"bondingTargets": {
						"device": "Device",
						"service": "Service device"
					},
					"toolType": "Device type",
					"toolTypes": {
						"nfc": "NFC reader"
					},
					"bondMethod": "Bonding method",
					"bondMethods": {
						"local": "Local bonding",
						"smart": "Smart connect"
					},
					"bondNfcReader": "Bond NFC reader",
					"bondingRetries": "Bonding success tests",
					"smartConnect": "IQRF Smart Connect Code",
					"unbondCoordinatorOnly": "Unbond only in Coordinator memory"
				},
				"errors": {
					"address": "Please enter an integer between 1 and 239 for new node address.",
					"bondingRetries": "Please enter an integer between 0 and 255 for number of bonding test retry requests.",
					"scCodeMissing": "Please enter the IQRF Smart Connect code.",
					"scCodeInvalid": "IQRF Smart Connect code should be a 34 characters long base57 string."
				},
				"modal": {
					"clearAllTitle": "Clear all bonds confirmation",
					"clearAllPrompt": "Are you sure you want to clear all bonds?",
					"unbondTitle": "Unbond node confirmation",
					"unbondPrompt": "Are you sure want to unbond device at address {address} from the network?"
				},
				"messages": {
					"noAddressAvailable": "No free address available for bonding.",
					"bondLocalAction": "Press node device button within 10 seconds to invoke bonding.",
					"bondSuccess": "A new device has been successfully bonded to address {address}.",
					"bondExists": "Another device is already bonded to address {address}.",
					"bondNfcFailure": "Failed to bond NFC reader.",
					"bondNfcSuccess": "NFC reader has been successfully bonded.",
					"bondTimeout": "Request to bond a new device timed out.",
					"unbondTimeout": "Request to unbond device timed out.",
					"genericBondError": "Failed to bond new node.",
					"unbondSuccess": "Device at address {address} has been successfully unbonded.",
					"unbondSuccessC": "Device at address {address} has been successfully unbonded from Coordinator memory.",
					"noDevices": "There are no devices bonded in the network.",
					"unbondFailure": "Failed to unbond device at address {address} from network.",
					"clearAllStatus": "Clearing all nodes from network.",
					"clearAllCStatus": "Clearing all nodes from coordinator memory.",
					"clearAllSuccess": "All bonds have been cleared successfully.",
					"clearAllCSuccess": "All bonds have been successfully cleared from Coordinator memory.",
					"clearAllPartialSuccess": "All online devices have been removed. Offline devices: {nodes}.",
					"smartConnectErrorMessage": "Smart Connect not started: {message}",
					"smartConnectBondExists": "Another device is already bonded to address {address}, or the device with specified Smart Connect code is already bonded to another address."
				}
			},
			"devicesInfo": {
				"title": "Devices Info",
				"icons": {
					"bonded": "Bonded device",
					"bondedOnline": "Online bonded device",
					"discovered": "Discovered device",
					"discoveredOnline": "Online discovered device",
					"unbonded": "Unbonded device"
				},
				"restart": {
					"title": "Restart result",
					"prompt": "The following node devices could not be restarted:"
				},
				"messages": {
					"clickEnumerate": "Click device icon to enumerate device.",
					"empty": "No response from IQRF Network",
					"getBonded": "Retrieving list of bonded devices",
					"getDiscovered": "Retrieving list of discovered devices",
					"getOnline": "Retrieving status of devices",
					"bondedFailed": "Failed to retrieve list of bonded devices.",
					"discoveredFailed": "Failed to retrieve list of discovered devices.",
					"pingFailed": "Failed to retrieve status of devices.",
					"indicateFailed": "Failed to indicate coordinator device.",
					"indicateSuccess": "Coordinator indication request successfully sent.",
					"restartFailed": "Failed to restart node devices in network.",
					"restartSuccess": "All node devices in network were successfully restarted."
				}
			},
			"discovery": {
				"title": "Discovery",
				"form": {
					"txPower": "TX Power",
					"maxAddr": "Max. Node address"
				},
				"errors": {
					"txPower": "Please enter an integer between 0 and 7 for Discovery TX power.",
					"maxAddr": "Please enter an integer between 0 and 239 for Discovery maximum node address."
				},
				"messages": {
					"success": "The discovery process has finished successfully.",
					"genericError": "An error has occurred during the Discovery process.",
					"spinnerNote": "Discovery is running, the process may take tens of minutes for large networks.",
					"timeout": "The Discovery request has timed out."
				}
			},
			"dpaParams": {
				"title": "DPA params",
				"dpaValue": {
					"title": "DPA Value",
					"type": "Value type",
					"types": {
						"rssi": "RSSI",
						"voltage": "Supply voltage",
						"system": "System",
						"user": "User-specified"
					},
					"messages": {
						"get": "Retrieving current DPA value type...",
						"getFailed": "Failed to get current DPA value type: {error}",
						"getSuccess": "Current DPA value type successfully retrieved.",
						"set": "Setting DPA value type...",
						"setFailed": "Failed to set DPA value type: {error}",
						"setSuccess": "DPA value type successfully set.",
						"timeout": "DPA value request timed out.",
						"genericError": "DPA value request failed: {error}"
					},
					"notes": {
						"value": "Specifies which type of DPA Value is returned in every DPA request or DPA confirmation message."
					}
				},
				"dpaHops": {
					"title": "DPA Hops",
					"requestHops": "Request hops",
					"responseHops": "Response hops",
					"optimizeDom": "Optimize DOM",
					"optimizeDrm": "Optimize DRM",
					"errors": {
						"requestHops": "Request hops should be an integer between 1 and 239.",
						"responseHops": "Response hops should be an integer between 1 and 239."
					},
					"messages": {
						"get": "Retrieving DPA hops...",
						"getFailed": "Failed to retrieve DPA hops: {error}",
						"getSuccess": "DPA hops successfully retrieved.",
						"set": "Setting DPA hops...",
						"setFailed": "Failed to set DPA hops: {error}",
						"setSuccess": "DPA hops successfully set.",
						"timeout": "DPA hops request timed out.",
						"genericError": "DPA hops request failed: {error}"
					},
					"notes": {
						"hops": "Specifies fixed number of hops used to send a DPA request or response, or an optimization algorithm to compute number of hops.",
						"dom": "Discovered Optimized Mesh.",
						"drm": "Discovered Reduced Mesh."
					}
				},
				"frcParams": {
					"title": "FRC params",
					"responseTime": "FRC response time",
					"offlineFrc": "Offline FRC",
					"responseTimes": {
						"0": "40 ms",
						"16": "360 ms",
						"32": "680 ms",
						"48": "1320 ms",
						"64": "2600 ms",
						"80": "5160 ms",
						"96": "10280 ms",
						"112": "20620 ms"
					},
					"messages": {
						"get": "Retrieving FRC params...",
						"getFailed": "Failed to retrieve FRC params: {error}",
						"getSuccess": "FRC params successfully retrieved.",
						"set": "Setting FRC params...",
						"setFailed": "Failed to set FRC params: {error}",
						"setSuccess": "FRC params successfully set.",
						"timeout": "FRC Params request timed out.",
						"genericError": "FRC params request failed: {error}"
					},
					"notes": {
						"responseTime": "Specifies FRC response time i.e. a maximum time reserved for preparing return FRC value.",
						"offlineFrc": "Offline FRC takes less time. Enable this feature only for downloading data from Beaming sensors (in Offline mode)."
					}
				}
			},
			"otaUpload": {
				"title": "OTA upload",
				"form": {
					"file": "File",
					"fileType": "File type",
					"fileTypes": {
						"hex": "Custom DPA handler",
						"iqrf": "IQRF plug-in"
					},
					"target": "Upload target",
					"targets": {
						"coordinator": "Coordinator",
						"node": "Node",
						"network": "Network"
					},
					"hwpidFilter": "Filter nodes by HWPID",
					"nodeAddress": "Node address",
					"eeepromAddress": "External EEPROM address",
					"uploadEeprom": "Upload EEPROM data",
					"uploadEeeprom": "Upload EEEPROM data",
					"uploadSteps": {
						"uploadEeeprom": "Step 1: Upload to external EEPROM",
						"verifyEeeprom": "Step 2: Verify data in external EEPROM",
						"loadFlash": "Step 3: Load from to external EEPROM to Flash"
					}
				},
				"resultModal": {
					"verifyTitle": "Verify step results",
					"loadTitle": "Load step results",
					"address": "Device address",
					"success": "Success"
				},
				"errors": {
					"file": "Please select a file to upload.",
					"notHexFile": "Selected file is not HEX file.",
					"notIqrfFile": "Selected file is not IQRF plugin file.",
					"nodeAddress": "Please enter an integer between 1 and 239 for target node address.",
					"hwpid": "Please enter an integer between 0 and 65535 for device HWPID.",
					"eeepromAddress": "Please enter an integer between 768 and 16383 for external EEPROM start address."
				},
				"notes": {
					"network": "Note: Network upload does not include Coordinator device. Uploading DPA handlers or IQRF plugins to the entire network requires all devices to use the same OS version and be online.",
					"hwpid": "Note: HWPID 65535 includes all devices."
				},
				"messages": {
					"generalError": "An error has occured during OTA upload process: {error}",
					"gatewayUploadFailed": "Failed to upload file to gateway: {error}",
					"genericError": "An error has occurred during the OTA upload process.",
					"networkNote": "Warning: Uploading IQRF plug-ins to the entire network requires all devices to use the same OS version.",
					"hwpid": "* HWPID 65535 includes all devices.",
					"notHexFile": "Selected file is not .hex file.",
					"notIqrfFile": "Selected file is not .iqrf file.",
					"invalidRequest": "OTA upload request is not valid: {error}",
					"invalidFile": "Invalid OTA upload file: {error}",
					"invalidContent": "An error has occurred during file content parsing: {error}",
					"invalidMemory": "Invalid memory operation: {error}",
					"compatibilityError": "Compatibility error: {error}",
					"deviceOfflineError": "One or more devices were offline during the upload process.",
					"noDevicesError": "There are no devices bonded in the network.",
					"noHwpidMatch": "No device in network matched specified HWPID.",
					"uploadRunning": "Uploading data to external EEPROM.",
					"verifyRunning": "Verifying data in external EEPROM.",
					"loadRunning": "Loading data from external EEPROM to Flash memory.",
					"coordinator": {
						"uploadStepSuccess": "Data successfully uploaded to coordinator device.",
						"verifyStepSuccess": "Data successfully verified in coordinator device.",
						"loadStepSuccess": "Data successfully loaded to flash in coordinator device."
					},
					"node": {
						"uploadStepSuccess": "Data successfully uploaded to device at address {address}.",
						"verifyStepSuccess": "Data successfully verified on device at address {address}.",
						"loadStepSuccess": "Data successfully loaded to flash on device at address {address}."
					},
					"network": {
						"uploadStepSuccess": "Data successfully uploaded to network devices.",
						"verifyStepSuccess": "Data successfully verified in network devices.",
						"loadStepSuccess": "Data successfully loaded to flash of network devices."
					},
					"uploadStepFail": "An error has occurred during the upload step.",
					"verifyStepFail": "An error has occurred during the verification step.",
					"loadStepFail": "An error has occurred during the flash load step."
				}
			},
			"maintenance": {
				"title": "Maintenance",
				"frcResponseTime": {
					"title": "FRC Response Time",
					"command": "FRC Command",
					"commands": {
						"iqrf2bits": "IQRF Standard 2-bits FRC",
						"iqrf1byte": "IQRF Standard 1-byte FRC",
						"iqrf2byte": "IQRF Standard 2-byte FRC",
						"iqrf4byte": "IQRF Standard 4-byte FRC",
						"user2bits": "User 2-bits FRC",
						"user1byte": "User 1-byte FRC",
						"user2byte": "User 2-byte FRC",
						"user4byte": "User 4-byte FRC"
					},
					"showResult": "Show last result",
					"modal": {
						"title": "FRC Response Time Result",
						"prompt": "Do you wish to set recommended FRC response time?",
						"command": "FRC command:",
						"inaccessibleNodes": "Inaccessible nodes:",
						"unhandledNodes": "Nodes ignored event:",
						"current": "Current FRC response time (ms):",
						"recommended": "Recommended FRC response time (ms):",
						"fields": {
							"address": "Node address",
							"responded": "Responded",
							"handled": "Event handled",
							"responseTime": "FRC response time (ms)"
						},
						"notAvailable": "N/A"
					},
					"messages": {
						"setProgress": "Setting FRC response time...",
						"setTimeout": "Set FRC response time request timed out.",
						"setFailed": "Failed to set FRC response time.",
						"setSuccess": "FRC response time successfully set.",
						"progress": "Checking FRC response time...\nThis process may take several minutes for large networks.",
						"timeout": "Request to determine best FRC response time timed out.",
						"failed": "Failed to determine best FRC response time: {error}"
					}
				},
				"rfSignal": {
					"title": "RF Signal",
					"options": {
						"coordinator": "Coordinator",
						"allNodes": "All nodes"
					},
					"rfChannel": "RF channel",
					"rxFilter": "RX filter",
					"timeLabel": "Measurement time",
					"time": "{time} ms",
					"test": "Test",
					"showResults": "Show last results",
					"errors": {
						"rxFilter": "RX Filter has to be in range from 0 to 64."
					},
					"modal": {
						"title": "RF Signal Test Results",
						"address": "Device address",
						"online": "Online",
						"counter": "Count"
					},
					"messages": {
						"progress": "Testing RF Signal...\nThis process may take several minutes for large networks.",
						"noNodes": "RF Signal test failed, no bonded nodes in network.",
						"failed": "RF Signal test failed."
					}
				},
				"networkIssues": {
					"title": "Network Issues",
					"options": {
						"inconsistentMidsInCoordinator": "Inconsistent MIDs in Coordinator",
						"duplicatedAddresses": "Duplicated addresses",
						"uselessPrebondedNodes": "Useless prebonded nodes"
					},
					"resolve": "Resolve",
					"messages": {
						"inconsistentMids": "Resolving inconsistent MIDs in coordinator...\nThis process may take several minutes for large networks.",
						"inconsistentMidsFailed": "Failed to resolve inconsistent MIDs in coordinator.",
						"inconsistentMidsSuccess": "Inconsistent MIDs in coordinator successfully resolved.",
						"duplicatedAddresses": "Resolving duplicated addresses...\nThis process may take several minutes for large networks.",
						"duplicatedAddressesFailed": "Failed to resolve duplicated addresses.",
						"duplicatedAddressesSuccess": "Duplicated addresses successfully resolved.",
						"prebondedNodes": "Resolving useless prebonded nodes...",
						"prebondedNodesFailed": "Failed to resolve useless prebonded nodes.",
						"prebondedNodesSuccess": "Useless prebonded nodes successfully resolved."
					},
					"help": {
						"inconsistentMidsInCoordinator": "Sets MIDs in coordinator to MIDs of the bonded nodes. This may occur during upgrade of OS or DPA.",
						"duplicatedAddresses": "Unbonds nodes with MIDs that mismatch MIDs in coordinator memory. This may occur in some situations during Autonetwork.",
						"uselessPrebondedNodes": "Unbonds ramaining nodes with the universal address used in prebonding, from the network. This may occur during Autonetwork when creating overlapping network."
					}
				}
			},
			"messages": {
				"submit": {
					"invalidMessage": "Invalid request.",
					"timeout": "Request timed out."
				},
				"versionInvalid": "Please upgrade to IQRF Gateway Daemon version 2.3.0 or higher to use this service.",
				"versionMissing": "Could not retrieve version of IQRF Gateway Daemon.",
				"versionCurrent": "Current version: "
			}
		},
		"sendJson": {
			"title": "Send JSON request",
			"description": "Send JSON request.",
			"documentation": "Show API documentation.",
			"form": {
				"json": "JSON request",
				"activeMessage": "Request history"
			},
			"messages": {
				"timeout": "Daemon API request timed out.",
				"invalid": "Invalid JSON API request.",
				"missing": "Please enter JSON request.",
				"mType": "JSON object does not have mType key.",
				"success": "JSON request has been sent successfully.",
				"autoNetworkFinish": "The AutoNetwork process has concluded.",
				"backupFinish": "The Backup process has concluded.",
				"enumerationFinish": "The database enumeration process has concluded.",
				"error": {
					"timeout": "Request timed out.",
					"fail": "An error occurred while processing JSON request.",
					"pcmd": "Sent JSON request contains incorrect PCMD.",
					"pnum": "Sent JSON request contains incorrect PNUM.",
					"addr": "Sent JSON request contains incorrect address parameter.",
					"dataLen": "Sent JSON request contains incorrect data length.",
					"data": "Sent JSON request contains incorrect data.",
					"hwpid": "Sent JSON request contains incorrect HWPID.",
					"nadr": "Sent JSON request contains incorrect NADR.",
					"invalidMessage": "Sent JSON request is not valid.",
					"messageQueueFull": "The IQRF Gateway Daemon message queue is full.",
					"validatorErrors": "JSON request is not valid, detected violations:"
				}
			},
			"violations": {
				"additional": "Additional property violation: Object {object} {message} ({path}). Additional property: {property}.\n",
				"range": "Value range violation: Property: {property} {message} ({path})\n",
				"required": "Required property violation: Object {object} {message} ({path}).\n",
				"type": "Type violation: Property {property} {message} ({path}).\n"
			}
		},
		"sendPacket": {
			"title": "Send DPA packet",
			"description": "Send DPA packet.",
			"macros": "Macros",
			"form": {
				"nadr": "NADR",
				"pnum": "PNUM",
				"pcmd": "PCMD",
				"hwpid": "HWPID",
				"pdata": "PDATA",
				"address": "Custom NADR",
				"addressOverwrite": "Use custom NADR",
				"timeout": "Custom DPA timeout (ms)",
				"timeoutOverwrite": "Use custom DPA timeout",
				"activeMessage": "Packet history",
				"messages": {
					"invalid": {
						"address": "Invalid custom NADR has been entered. It has to be a decimal number from 0 to 239.",
						"timeout": "Invalid custom DPA timeout has been entered.",
						"nadr": "NADR bytes should be 2 hexadecimal characters long.",
						"pnum": "PNUM byte should be 2 hexadecimal characters long.",
						"pcmd": "PCMD byte should be 2 hexadecimal characters long, higher nibble can be a character between 0 and 7.",
						"hwpid": "HWPID bytes should be 4 hexadecimal characters long.",
						"pdata": "PDATA should be 0 to 57 hexadecimal bytes long, separated by a dot."
					},
					"missing": {
						"address": "Please enter the custom NADR.",
						"packet": "Please enter the DPA packet.",
						"timeout": "Please enter the custom DPA timeout."
					}
				}
			},
			"messages": {
				"queueFull": "IQRF Daemon message queue full, DPA request discarded.",
				"failure": "An error has occurred while processing DPA request.",
				"success": "DPA packet has been sent successfully.",
				"incorrect": {
					"pcmd": "Sent DPA packet contains incorrect PCMD.",
					"pnum": "Sent DPA packet contains incorrect PNUM.",
					"hwpid": "Sent DPA packet contains incorrect HWPID.",
					"data": "Sent DPA packet contains incorrect data,",
					"dataLength": "Sent DPA packet contains incorrect data length."
				}
			}
		},
		"jsonMessage": {
			"request": "Request",
			"response": "Response",
			"copy": {
				"request": "Copy request to the clipboard",
				"response": "Copy response to the clipboard"
			},
			"copySuccess": {
				"dpa":{
					"request": "DPA request has been copied to the clipboard.",
					"response": "DPA response has been copied to the clipboard."
				},
				"json": {
					"request": "JSON request has been copied to the clipboard.",
					"response": "JSON response has been copied to the clipboard."
				}
			}
		},
		"standard": {
			"title": "Standard manager",
			"description": "IQRF Standard manager.",
			"form": {
				"address": "Address",
				"messages": {
					"address": "Address has to be an integer between 1 and 239"
				}
			},
			"binaryOutput": {
				"title": "IQRF Binary Output",
				"outputs": "Outputs",
				"index": "Index",
				"state": "State",
				"prev": "Previous output states",
				"enum": "Binary Output enumeration",
				"form": {
					"index": "Index of the binary output",
					"state": "State of the binary output",
					"enabled": "ON",
					"disabled": "OFF",
					"getStates": "Get states",
					"setState": "Set state",
					"messages": {
						"index": "Index has to be an integer between 0 and 31"
					}
				},
				"messages": {
					"timeout": "Binary output request timed out. The device may be offline.",
					"success": "Binary output request has been sent successfully.",
					"failure": "An error occurred during the Binary output request.",
					"pnum": "Device does not support the Binary Output standard."
				}
			},
			"dali": {
				"title": "IQRF DALI",
				"answers": "Answers",
				"status": "Status",
				"value": "Value",
				"form": {
					"command": "DALI command",
					"addCommand": "Add command",
					"removeCommand": "Remove command",
					"sendCommand": "Send commands",
					"messages": {
						"command": "DALI command has to be an integer between 0 and 65535."
					}
				},
				"messages": {
					"timeout": "DALI request timed out. The device may be offline",
					"success": "DALI request has been sent successfully.",
					"failure": "An error occurred during the DALI request.",
					"pnum": "Device does not support the DALI standard."
				}
			},
			"light": {
				"title": "IQRF Light",
				"lights": "Lights",
				"index": "Index",
				"power": "Previous power",
				"enum": "Light enumeration",
				"powerInfo": "Power info",
				"form": {
					"index": "Index of the light",
					"power": "Power of the light",
					"getPower": "Get power",
					"setPower": "Set power",
					"increment": "Increment power",
					"decrement": "Decrement power",
					"messages": {
						"index": "Light index has to be an integer between 0 and 31.",
						"power": "Light power has to be an integer between 0 and 100."
					}
				},
				"messages": {
					"timeout": "Light request timed out. The device may be offline.",
					"success": "Light request has been sent successfully.",
					"failure": "An error occurred during the Light request.",
					"pnum": "Device does not support the Light standard."
				}
			},
			"sensor": {
				"title": "IQRF Sensor",
				"sensors": "Sensors",
				"type": "Type",
				"unit": "Unit",
				"value": "Value",
				"readAll": "Read all",
				"enum": "Sensor enumeration",
				"messages": {
					"timeout": "Sensor request timed out. The device may be offline.",
					"success": "Sensor request has been sent successfully.",
					"failure": "An error occurred during the Sensor request.",
					"pnum": "Device does not support the Sensor standard."
				}
			},
			"modal": {
				"title": "Reset confirmation",
				"prompt": "Are you sure you want to reset the device database?"
			},
			"table": {
				"title": "Standard devices",
				"actions": {
					"enumerate": "Enumerate",
					"refresh": "Refresh",
					"reset": "Reset"
				},
				"info": "Product details",
				"supported": "Supported",
				"unsupported": "Unsupported",
				"fields": {
					"address": "Address",
					"manufacturer": "Manufacturer",
					"product": "Product",
					"name": "Product name",
					"dpa": "DPA",
					"os": "OS",
					"mid": "Module ID",
					"hwpid": "HWPID",
					"hwpidVer": "HWPID ver.",
					"status": "Status",
					"sensor": "Sensor",
					"binout": "Binary Output",
					"light": "Light",
					"dali": "DALI",
					"noDevices": "No devices implementing standards detected."
				},
				"sensor": {
					"title": "Sensors",
					"name": "Name",
					"index": "Index",
					"type": "Type"
				},
				"messages": {
					"device": {
						"general": "General information\nHWPID: {hwpid}\nMID: {mid}",
						"details": "MID: {mid}\nHWPID: {hwpid}\nHWPID version: {hwpidVer}\nOS build: {os}\nDPA: {dpa}",
						"fetch": "Retrieving devices in network...",
						"fetchFailed": "Failed to retrieve devices in network.",
						"fetchTimeout": "Request to receive devices in network timed out."
					},
					"binout": {
						"fetch": "Retrieving devices implementing Binary Output standard...",
						"fetchFailed": "Failed to retrieve devices implementing Binary Output standard.",
						"fetchTimeout": "Request to retrieve Binary Output devices timed out.",
						"implemented": "Binary outputs implemented: {binouts}",
						"notImplemented": "Device does not implement the Binary Output standard."
					},
					"dali": {
						"fetch": "Retrieving devices implementing DALI standard...",
						"fetchFailed": "Failed to retrieve devices implementing DALI standard.",
						"fetchTimeout": "Request to retrieve DALI devices timed out.",
						"implemented": "Device implements DALI standard.",
						"notImplemented": "Device does not implement the DALI standard."
					},
					"light": {
						"fetch": "Retrieving devices implementing Light standard...",
						"fetchFailed": "Failed to retrieve devices implementing Light standard.",
						"fetchTimeout": "Request to retrieve Light devices timed out.",
						"implemented": "Lights implemented: {lights}",
						"notImplemented": "Device does not implement the Light standard."
					},
					"sensor": {
						"detail": "Name: {name} [{short}]\nType: {type}\nUnit: {unit}\nFRC commands: {commands}",
						"fetch": "Retrieving devices implementing Sensor standard...",
						"fetchFailed": "Failed to retrieve devices implementing Sensor standard.",
						"fetchTimeout": "Request to retrieve Sensor devices timed out.",
						"implemented": "Device implements the following sensor types:",
						"notImplemented": "Device does not implement the Sensor standard."
					},
					"ping": {
						"fetch": "Checking online status of devices...",
						"fetchFailed": "Failed to retrieve status of devices."
					},
					"enumNowFailed": "Network enumeration process failed: {error}",
					"enumNowProgress": "Enumerating network [{progress} %]\nPhase: {phase}\nStep: {current}/{total}\nThis process may take tens of minutes for large networks.",
					"enumNowSuccess": "Network enumeration has been successfully completed.",
					"resetFailed": "Failed to reset database: {error}",
					"resetSuccess": "Database has been successfully reset.",
					"resetTimeout": "Request to reset database timed out."
				}
			}
		},
		"trConfiguration": {
			"title": "TR configuration",
			"description": "Edit TR configuration.",
			"security": {
				"title": "Security",
				"form": {
					"ascii": "ASCII",
					"hex": "HEX",
					"format": "Format",
					"value": "Value *",
					"accessPassword": "Access Password",
					"userKey": "User Key"
				},
				"errors": {
					"password": "Access password should only contain printable ascii characters.",
					"passwordLen": "Access password should be at most 16 characters long.",
					"key": "User key should only contain printable ascii characters.",
					"keyLen": "User key should be at most 16 characters long."
				},
				"messages": {
					"note": "* Leave blank to use default value.",
					"success": "IQMESH security has been successfully set. Device restarted.",
					"failure": "Could not update IQMESH security settings.",
					"resetFailure": "IQMESH security has been successfully set, but device could not be restarted.",
					"invalid": "Password string is not valid for the selected format."
				}
			},
			"form": {
				"rf": "RF",
				"rfBand": "RF Band",
				"rfBands": {
					"443": "443 MHz",
					"868": "868 MHz",
					"916": "916 MHz"
				},
				"target": "Target",
				"targets": {
					"device": "Device",
					"network": "Network"
				},
				"rfChannelA": "RF channel A",
				"rfChannelB": "RF channel B",
				"rfSubChannelA": "RF channel A subnetwork",
				"rfSubChannelB": "RF channel B subnetwork",
				"rfAltDsmChannel": "Alternative DSM channel",
				"networkType": "Network type (*6)",
				"networkTypes": {
					"std": "STD",
					"stdLp": "STD and LP"
				},
				"txPower": "TX power",
				"rxFilter": "RX filter",
				"lpRxTimeout": "LP RX timeout (*7)",
				"rfPgm": "RFPGM",
				"rfPgmEnableAfterReset": "Enable after reset",
				"rfPgmTerminateAfter1Min": "Termination after ~1 minute",
				"rfPgmTerminateMcuPin": "Termination by MCU pin",
				"rfPgmDualChannel": "Dual channel",
				"rfPgmLpMode": "LP mode",
				"rfPgmIncorrectUpload": "Incorrect upload (*9)",
				"dpa": {
					"embeddedPeripherals": "DPA - Embedded peripherals",
					"other": "DPA - Other"
				},
				"embPers": {
					"coordinator": "Coordinator",
					"node": "Node",
					"os": "OS",
					"eeprom": "EEPROM",
					"eeeprom": "EEEPROM",
					"ram": "RAM",
					"ledr": "LEDR",
					"ledg": "LEDG",
					"spi": "SPI (*4, *7)",
					"io": "IO",
					"thermometer": "Thermometer",
					"pwm": "PWM",
					"uart": "UART (*7)",
					"frc": "FRC"
				},
				"customDpaHandler": "Custom DPA Handler",
				"ioSetup": "IO Setup",
				"dpaAutoexec": "Autoexec (*4)",
				"routingOff": "Routing off (*7)",
				"peerToPeer": "User Peer-to-Peer",
				"localFrcReception": "Local FRC (*5, *7)",
				"dpaPeerToPeer": "DPA Peer-to-Peer (*3, *7)",
				"neverSleep": "Stay awake when not bonded (*1, *7)",
				"uartBaudRate": "UART interface baud rate (*8)",
				"uartBaudrates": {
					"1200": "1200 Bd",
					"2400": "2400 Bd",
					"4800": "4800 Bd",
					"9600": "9600 Bd",
					"19200": "19200 Bd",
					"38400": "38400 Bd",
					"57600": "57600 Bd",
					"115200": "115200 Bd",
					"230400": "230400 Bd"
				},
				"nodeDpaInterface": "Node DPA interface (*2)",
				"notes": {
					"dpa3Higher": "*1 Only for DPA 3.03 or higher.",
					"dpa4Lower": "*2 Only for DPA lower than 4.00.",
					"dpa410": "*3 Only for DPA 4.10 or higher.",
					"dpa414": "*4 Only for DPA 4.14 or lower.",
					"dpa415": "*5 Only for DPA 4.15 or higher.",
					"coordinatorOnly": "*6 Coordinator only.",
					"nodeOnly": "*7 Node only.",
					"uart": "*8 For UART interface. For UART peripheral DPA 4.11 or higher.",
					"readOnly": "*9 Read only."
				},
				"messages": {
					"breakInteroperability": "Disabling STD and LP network will break interoperability.",
					"lpRxTimeout": "LP RX timeout has to be in range from 1 to 255.",
					"rfChannel": {
						"433": "RF Channel has to be in range from 0 to 16.",
						"868": "RF Channel has to be in range from 0 to 67.",
						"916": "RF Channel has to be in range from 0 to 255."
					},
					"address": "Address has to be an integer from 0 to 239.",
					"rxFilter": "RX filter have to be integer from 0 to 64.",
					"txPower": "TX Power have to be integer from 0 to 7.",
					"uartBaudRate": "Please select UART interface baud rate."
				}
			},
			"messages": {
				"targetNote": "Network target does not include coordinator device.",
				"notMatched": "The following nodes did not match the selected HWPID: {nodes}.",
				"notResponded": "The following nodes did not respond to the request: {nodes}.",
				"invalidAddress": "Address {address} is not a valid device address.",
				"noConfig": "Failed to read device TR configuration.",
				"modalTitle": "Custom DPA handler issue detected",
				"modalPrompt": "Custom DPA handler has been enabled in transceiver configuration, but not detected. Do you wish to disable Custom DPA handler? The transceiver will then be restarted.",
				"disableFailure": "An error has occurred while disabling Custom DPA handler.",
				"osReadFailure": "Could not retrieve OS information.",
				"readFailure": "An error has occurred while reading TR configuration.",
				"readSuccess": "The TR configuration has been read successfully.",
				"writeFailure": "An error has occurred while saving TR configuration.",
				"writeSuccess": "TR configuration has been saved successfully.",
				"restartFailure": "TR configuration has been saved successfully, but device could not be restarted.",
				"restartSuccess": "TR configuration has been saved successfully. Device restarted."
			}
		},
		"trUpload": {
			"title": "Coordinator upload",
			"description": "IQRF Coordinator upload.",
			"dpaUpload": {
				"title": "DPA plug-in",
				"form": {
					"version": "DPA version"
				},
				"modal": {
					"title": "DPA plug-in upload confirmation",
					"prompt": "The device already uses DPA version {version}, are you sure you want to proceed with upload?"
				},
				"errors": {
					"version": "Please select DPA version to upload."
				},
				"messages": {
					"noUpgrades": "No DPA version upgrade or downgrade available for this OS version.",
					"gatewayUpload": "Downloading DPA file to gateway...",
					"gatewayUploadFailed": "Failed to download DPA file to gateway: {error}",
					"gatewayUploadSuccess": "DPA file successfully downloaded to gateway.",
					"trUpload": "Uploading DPA file to TR...",
					"trUploadFailed": "Failed to upload DPA file to TR: {error}",
					"trUploadSuccess": "DPA file successfully uploaded to TR.",
					"dpaFetchFailure": "Failed to retrieve current DPA version or DPA upgrades."
				}
			},
			"hexUpload": {
				"title": "Custom DPA handler",
				"form": {
					"file":"File to upload"
				},
				"errors": {
					"file": "Please select the file to upload."
				},
				"messages": {
					"gatewayUpload": "Uploading HEX file to gateway...",
					"gatewayUploadFailed": "Failed to upload HEX file to gateway: {error}",
					"gatewayUploadSuccess": "Hex file successfully uploaded to gateway.",
					"trUpload": "Uploading HEX file to TR...",
					"trUploadFailed": "Failed to upload HEX file to TR: {error}",
					"trUploadSuccess": "Hex file successfully uploaded to TR.",
					"invalidFormat": "The uploaded file is not a .hex file."
				}
			},
			"osUpload": {
				"title": "IQRF OS and DPA",
				"form": {
					"current": "Current OS version:",
					"version": "Target OS version"
				},
				"errors": {
					"version": "Please select IQRF OS version to upload."
				},
				"messages": {
					"newest": "Your device has the latest version of IQRF OS.",
					"fetchFailed": "Failed to retrieve current version of IQRF OS or OS upgrades.",
					"upgrade": "Upgrading OS and DPA...",
					"upgradeFailed": "Failed to upgrade OS and DPA: {error}",
					"upgradeSuccess": "OS and DPA successfully upgraded."
				}
			},
			"messages": {
				"coordinatorFailed": "Failed to retrieve coordinator device information.",
				"notAvailable": "Coordinator upload service not available.",
				"disabled": "TR upload is disabled.",
				"info": "These actions can take tens of seconds.",
				"failure": "An error occurred during the file upload.",
				"timeout": "Daemon API file upload request timed out.",
				"success": "The file has been successfully uploaded into the coordinator.",
				"genericError": "An error has occurred while processing request.",
				"osBuildFail": "Failed to retrieve OS builds information.",
				"osInfoFail": "Embed OS read request failed.",
				"fetchFail": "The following component(s) failed to fetch information: {children}",
				"postUpload": "Restarting IQRF Gateway Daemon and refreshing OS information."
			}
		}
	},
	"install": {
		"title": "Installation wizard",
		"invitation": "Welcome to IQRF Gateway Webapp. Before getting started, you have to create the webapp's first user.",
		"steps": {
			"introduction": "Introduction",
			"smtp": "Configure SMTP server",
			"webappUser": "Create webapp user",
			"gatewayUser": "Set gateway user",
			"sshKey": "Add SSH keys",
			"sshService": "SSH service"
		},
		"createUser": {
			"title": "Create a new user",
			"failure": "Failed to create new webapp user: {error}",
			"note": "Create a new Webapp user to access the web interface.",
			"createButton": "Create user"
		},
		"gwUser": {
			"title": "Set gateway user password",
			"note": "Set gateway user password to access the device via login shell."
		},
		"ssh": {
			"title": "Set SSH service status",
			"states": {
				"enable": "Start SSH service on every boot.",
				"start": "Start SSH service now, once.",
				"disable": "Do not start SSH service."
			},
			"state": "Service status *",
			"messages": {
				"serviceError": "Failed to set service status: {error}",
				"note": "Set SSH service status to access the device via SSH.",
				"reminder": "* SSH service status can be changed later in the Gateway menu."
			}
		},
		"error": {
			"howToFix": "How to fix it",
			"missingDependency":{
				"title": "One or more dependencies are missing",
				"description": "IQRF Gateway Webapp did not detect the following dependencies: {dependencies}.",
				"details": "Details",
				"command": "Missing command",
				"package": "Package"
			},
			"missingExtension": {
				"title": "One or more PHP extensions are missing",
				"description": "IQRF Gateway Webapp did not detect the following required extensions: {extensions}.",
				"fixDescription": "Install packages containing missing PHP extensions.",
				"fixDescriptionDebian": "Use the following commands to install packages containing the required PHP extensions:"
			},
			"missingMigration": {
				"title": "Some database table is missing",
				"description": "IQRF Gateway Webapp cannot find some table in the SQLite3 database.",
				"fixDescription": "Run these commands in terminal:"
			},
			"sudo": {
				"title": "Sudo error",
				"missing": "IQRF Gateway Webapp did not detect the sudo utility.",
				"invalid": "IQRF Gateway Webapp cannot execute commands with sudo.",
				"fixMissing": "Enter interactive shell as root and install sudo utility using the following commands:",
				"fixInvalid": "Allow user www-data to execute commands with sudo using the following commands:"
			}
		},
		"gwInfo": {
			"title": "Some information about this gateway",
			"button": "Show GW info",
			"download": "Download as JSON"
		},
		"restore": {
			"title": "Restore gateway from backup",
			"button": "Restore gateway"
		},
		"messages": {
			"check": "Running installation check...",
			"finished": "Installation process successfully completed."
		}
	},
	"network": {
		"title": "IP network",
		"description": "IP network management.",
		"interface": {
			"title": "Network interfaces",
			"name": "Name",
			"manufacturer": "Manufacturer",
			"model": "Model",
			"macAddress": "MAC address",
			"state": "State",
			"states" : {
				"connected": "Connected",
				"connecting": "Connecting",
				"connecting (checking IP connectivity)": "Checking IP connectivity",
				"connecting (configuring)": "Configuring",
				"connecting (getting IP configuration)": "Getting IP configuration",
				"connecting (prepare)": "Prepare",
				"connecting (need authentication)": "Need authentication",
				"connecting (starting secondary connections)": "Starting secondary connections",
				"connection failed": "Failed",
				"deactivating": "Deactivating",
				"disconnected": "Disconnected",
				"unavailable": "Unavailable",
				"unmanaged": "Unmanaged",
				"unknown": "Unknown"
			},
			"types": {
				"802-3-ethernet": "Ethernet",
				"802-11-wireless": "WiFi",
				"gsm": "GSM"
			},
			"messages": {
				"noInterfaces": "No active interface detected."
			}
		},
		"ethernet": {
			"title": "Ethernet connections",
			"description": "Ethernet connections management.",
			"messages": {
				"noInterfaces": "No active ethernet network interface detected.",
				"disconnectUnavailable": "Web interface is no longer available at this address as the disconnected connection profile uses this address."
			},
			"modal": {
				"title": "Ethernet connection disconnect confirmation",
				"prompt": "If you're accessing the web interface from address used by this ethernet connection profile, disconnecting will result in the web interface not being available at this address. Are you sure you want to disconnect connection?"
			}
		},
		"wireless": {
			"title": "Wireless connections",
			"description": "Wireless connections management.",
			"table": {
				"accessPoints": "Available access points",
				"noAccessPoints": "No available access points.",
				"ssid": "Name",
				"signal": "Signal strength",
				"security": "Network security",
				"details": "Access point details",
				"bssid": "BSSID",
				"mode": "Mode",
				"channel": "Channel",
				"rate": "Rate",
				"hidden": "Hidden SSID"
			},
			"multipleInterfaces": "Multiple Wi-Fi interfaces detected, select interface to use.",
			"modal": {
				"titleDisconnect": "Wi-Fi connection disconnect confirmation",
				"titleDelete": "Wi-Fi connection delete confirmation",
				"promptDisconnect": "If you're accessing the web interface from address used by this Wi-Fi connection profile, disconnecting will result in the web interface not being available at this address. Are you sure you want to disconnect connection?",
				"promptDelete": "If you're accessing the web interface from address used by this Wi-Fi connection profile, deleting it will result in web interface no longer being available at this address. Are you sure you want to delete connection?"
			},
			"form": {
				"title": "Wi-Fi configuration",
				"security": "Security",
				"securityTypes": {
					"open": "Open",
					"wep": "Wep",
					"wpa-psk": "WPA-Personal",
					"wpa-eap": "WPA-Enterprise"
				},
				"authPhaseOne": "Phase one authentication",
				"phaseOneAlgorithm": {
					"peap": "Protected EAP"
				},
				"phaseTwoAlgorithm": {
					"mschapv2": "MSCHAPv2"
				},
				"wep": {
					"length": "WEP key length",
					"lengths": {
						"64bit": "64 bit (5 ASCII / 10 hex)",
						"128bit": "128 bit (13 ASCII / 26 hex)"
					},
					"type": "Type",
					"types": {
						"key": "Key",
						"passphrase": "Passphrase"
					},
					"index": "Default WEP key",
					"keyNum": "WEP Key {index}"
				},
				"noCaCert": "No CA certificate required",
				"caCert": "CA certificate",
				"authPhaseTwo": "Phase two authentication",
				"anonymousIdentity": "Anonymous identity",
				"username": "Username",
				"password": "Password",
				"psk": "Pre-shared key"
			},
			"errors": {
				"password": "Please enter the password.",
				"psk": "Please enter pre-shared key.",
				"pskInvalid": "Pre-shared key should be 8-63 characters long ASCII string, or 64 characters long hex string.",
				"wepKeyType": "Please select WEP security type.",
				"wepIndex": "Please enter default key index.",
				"wepIndexInvalid": "Default key index should be between 0 and 3.",
				"wepIndexKeyMissing": "WEP key at specified index missing.",
				"wepKey": "Please enter a WEP key.",
				"wepPassphrase": "Please enter a WEP passphrase",
				"wepKey64Invalid": "64bit WEP key should be 5 ASCII characters or 10 hexadecimal characters long.",
				"wepKey128Invalid": "128bit WEP key should be 13 ASCII characters or 26 hexadecimal characters long."
			},
			"messages": {
				"noInterfaces": "No active Wi-Fi network interface detected.",
				"listFailed": "Failed to retrieve list of available access points: {error}",
				"connectionsFailed": "Failed to retrieve access point connection details: {error}",
				"disconnectUnavailable": "Web interface is no longer available at this address as the disconnected connection profile uses this address.",
				"removeUnavailable": "Web interface is no longer available at this address as the removed connection profile used this address."
			}
		},
		"mobile": {
			"title": "Mobile connections",
			"description": "Mobile connections management.",
			"add": "Add GSM connection",
			"edit": "Edit GSM connection",
			"modems": {
				"title": "Modems",
				"interface": "Interface name",
				"manufacturer": "Manufacturer",
				"model": "Model",
				"imei": "IMEI",
				"state": "State",
				"states": {
					"failed": "Modem is unusable",
					"unknown": "Unknown",
					"initializing": "Initializing",
					"locked": "Locked",
					"disabled": "Disabled",
					"disabling": "Disabling",
					"enabling": "Enabling",
					"enabled": "Enabled",
					"searching": "Searching network",
					"registered": "Registered to network",
					"disconnecting": "Disconnecting",
					"connecting": "Connecting",
					"connected": "Connected"
				},
				"failedReasons": {
					"esim-without-profiles": "eSIM without profiles",
					"none": "No error",
					"sim-error": "SIM card unusable",
					"sim-missing": "SIM card missing",
					"unknown": "Unknown error",
					"unknown-capabilities": "Unknown capabilities"
				},
				"signal": "Signal strength",
				"rssi": "RSSI"
			},
			"table": {
				"signal": "Signal strength",
				"rssi": "RSSI",
				"restartModemManager": "Restart Modem",
				"startMonit": "Enable watchdog",
				"stopMonit": "Disable watchdog"
			},
			"form": {
				"title": "GSM configuration",
				"interface": "Select GSM interface",
				"apn": "Access Point Name",
				"pin": "PIN"
			},
			"errors": {
				"interfaceMissing": "Please select a GSM interface.",
				"apnMissing": "Please enter access point name.",
				"apnInvalid": "Access point name can only contain lowercase letters, numbers, dashes and dots.",
				"pinInvalid": "PIN can only contain 4-8 digits.",
				"credentialsMissing": "Please enter both username and password, or leave both fields empty."
			},
			"messages": {
				"noInterfaces": "No active GSM network interface detected.",
				"noConnections": "No available GSM connections.",
				"monitEnabledSuccessfully": "Watchdog has been successfully enabled.",
				"monitEnableFailed": "Failed to enable watchdog.",
				"monitDisabledSuccessfully": "Watchdog has been successfully disabled.",
				"monitDisableFailed": "Failed to disable watchdog."
			},
			"modals": {
				"enableMonitWithoutConnection": {
					"title": "Failed to enable watchdog",
					"body": "Watchdog can only be enabled when there is at least one mobile connection."
				},
				"enableMonitWithoutActiveConnection": {
					"title": "Watchdog enablement confirmation",
					"body": "Are you sure you want to enable watchdog? There are no active mobile connections."
				}
			}
		},
		"serial": {
			"errors": {
				"baudRateMissing": "Please select a baud rate."
			},
			"form": {
				"title": "Serial link configuration",
				"baudRate": "Baud rate"
			}
		},
		"wireguard": {
			"title": "WireGuard VPN",
			"description": "VPN management.",
			"tunnels": {
				"title": "Tunnels",
				"add": "Add WireGuard tunnel",
				"edit": "Edit WireGuard tunnel",
				"table": {
					"noTunnels": "No WireGuard tunnels detected.",
					"name": "Name",
					"state": "State",
					"states": {
						"active": "Active",
						"inactive": "Inactive"
					},
					"action": {
						"activate": "Activate",
						"deactivate": "Deactivate"
					}
				},
				"form": {
					"addPeer": "Add another peer",
					"removePeer": "Remove peer",
					"interface": "Interface configuration",
					"name": "Tunnel name",
					"generateKeys": "Generate key pair",
					"privateKey": "Private key",
					"publicKey": "Public key",
					"publicKeyIface": "Derived public key",
					"stack": "Stack",
					"stackTypes": {
						"ipv4": "Single stack (IPv4 only)",
						"ipv6": "Single stack (IPv6 only)",
						"both": "Dual stack (IPv4 and IPv6)"
					},
					"ipv4": "IPv4 address",
					"ipv4Prefix": "IPv4 address prefix",
					"ipv6": "IPv6 address",
					"ipv6Prefix": "IPv6 address prefix",
					"port": "Listen port",
					"portOptional": "Specify listen port",
					"peers": "Peer configuration",
					"psk": "Pre-shared key (optional)",
					"keepalive": "Persistent keepalive in seconds *",
					"keepaliveNote": "* 0 = disabled",
					"endpoint": "Endpoint",
					"copyPublicKey": "Copy key to clipboard"
				},
				"errors": {
					"name": "Please enter interface name.",
					"privateKey": "Please enter interface private key.",
					"publicKey": "Please enter interface public key.",
					"ipv4": "Please enter interface IPv4 address.",
					"ipv4Invalid": "Invalid IPv4 address format.",
					"ipv4Prefix": "Please enter IPv4 address prefix.",
					"ipv4PrefixInvalid": "IPv4 address prefix should be an integer between 1 and 32.",
					"ipv6": "Please enter interface IPv6 address.",
					"ipv6Invalid": "Invalid IPv6 address format.",
					"ipv6Prefix": "Please enter IPv6 address prefix.",
					"ipv6PrefixInvalid": "IPv6 address prefix should be an integer between 48 and 128.",
					"portIface": "Please enter interface listen port.",
					"endpoint": "Please enter peer endpoint.",
					"publicKeyPeer": "Please enter peer public key.",
					"portPeer": "Please enter peer listen port.",
					"portInvalid": "Port number should be an integer between 0 and 65535.",
					"keepalive": "Please enter the peer keepalive interval.",
					"keepaliveInvalid": "Persistent keepalive should be an integer between 0 and 65535 seconds.",
					"base64Key": "Invalid key format, the key should be 32-byte Curve25519 key."
				},
				"modal": {
					"title": "WireGuard tunnel delete confirmation",
					"prompt": "Are you sure you want to delete WireGuard tunnel {tunnel}?"
				},
				"messages": {
					"addSuccess": "WireGuard tunnel {tunnel} has been successfully created.",
					"addFailed": "Failed to create new WireGuard tunnel: {error}",
					"editSuccess": "WireGuard tunnel {tunnel} has been successfully edited.",
					"editFailed": "Failed to edit WireGuard tunnel {tunnel}: {error}",
					"activateSuccess": "WireGuard tunnel {tunnel} has been successfully activated.",
					"activateFailed": "Failed to activate WireGuard tunnel {tunnel}: {error}",
					"deactivateSuccess": "WireGuard tunnel {tunnel} has been successfully deactivated.",
					"deactivateFailed": "Failed to deactivate WireGuard tunnel {tunnel}: {error}",
					"disableSuccess": "WireGuard tunnel {tunnel} startup activation has been successfully disabled.",
					"disableFailed": "Failed to disable startup activation of WireGuard tunnel {tunnel}: {error}",
					"enableSuccess": "WireGuard tunnel {tunnel} startup activation has been successfully enabled.",
					"enableFailed": "Failed to enable startup activation of WireGuard tunnel {tunnel}: {error}",
					"fetchFailed": "Failed to retrieve configuration of WireGuard tunnel ID {tunnel}: {error}.",
					"listFailed": "Failed to retrieve list of existing WireGuard tunnels: {error}",
					"deleteSuccess": "WireGuard tunnel {tunnel} has been successfully deleted.",
					"deleteFailed": "Failed to delete WireGuard tunnel {tunnel}: {error}",
					"copyPublicKey": "Public key has been successfully copied to clipboard.",
					"keyPairFailed": "Failed to generate key pair: {error}"
				}
			}
		},
		"connection": {
			"title": "Available connections",
			"name": "Name",
			"add": "Add {type} connection",
			"edit": "Edit {type} connection",
			"errors": {
				"name": "Please enter a connection name.",
				"interface": "Please select an interface."
			},
			"interface": "Interface",
			"autoConnect": "Establish connection automatically",
			"ipv4": {
				"title": "IPv4 configuration",
				"method": "Connection method",
				"methods": {
					"null": "Please select IPv4 connection method",
					"auto": "Automatic (DHCP)",
					"disabled": "Disabled",
					"manual": "Static",
					"link-local": "Link-local",
					"shared": "Shared with other computers"
				},
				"address": "IPv4 address",
				"addresses": {
					"add": "Add IPv4 address",
					"remove": "Remove IPv4 address"
				},
				"mask": "Subnet mask",
				"gateway": "IPv4 Gateway address",
				"dns": {
					"address": "DNS server IPv4 address",
					"add": "Add DNS server",
					"remove": "Remove DNS server"
				},
				"errors": {
					"method": "Please select the IPv4 connection method",
					"address": "Please enter a valid IPv4 address.",
					"addressInvalid": "Invalid IPv4 address.",
					"dns": "Please enter a valid IPv4 DNS server address.",
					"gateway": "Please enter a valid IPv4 gateway address.",
					"mask": "Please enter a valid IPv4 subnet mask.",
					"maskInvalid": "Invalid subnet mask."
				},
				"ipNotInSubnet": "IPv4 address and gateway address are not in the same subnet."
			},
			"ipv6": {
				"title": "IPv6 configuration",
				"method": "Connection method",
				"methods": {
					"null": "Please select IPv6 connection method",
					"auto": "Automatic (SLAAC)",
					"disabled": "Disabled",
					"dhcp": "Automatic, DHCPv6 only",
					"ignore": "Ignore",
					"link-local": "Link-local",
					"manual": "Static",
					"shared": "Shared with other computers"
				},
				"address": "IPv6 address",
				"addresses": {
					"add": "Add IPv6 address",
					"remove": "Remove IPv6 address"
				},
				"prefix": "Prefix length",
				"gateway": "IPv6 Gateway address",
				"dns": {
					"address": "DNS server IPv6 address",
					"add": "Add DNS server",
					"remove": "Remove DNS server"
				},
				"errors": {
					"method": "Please select the IPv6 connection method",
					"address": "Please enter a valid IPv6 address.",
					"addressInvalid": "Invalid IPv6 address.",
					"dns": "Please enter at least one IPv6 DNS server address.",
					"gateway": "Please enter a valid IPv6 gateway address.",
					"prefix": "Please enter a valid IPv6 prefix.",
					"prefixInvalid": "IPv6 prefix should be between 48 and 128 bits."
				}
			},
			"modal": {
				"title": "Connection configuration changed",
				"ipv4": {
					"autoToStatic": "IPv4 method changed from auto to static, the web interface will be available at the following address: ",
					"staticIpChange": "IPv4 address change detected, the web interface will be available at the following address: ",
					"staticToAuto": "IPv4 method changed from static to auto, the web interface may be available at a different address as a result."
				},
				"confirmPrompt": "Are you sure you want to save connection configuration?"
			},
			"saveAndConnect": "Save and connect",
			"state": "Connection state",
			"states": {
				"connected": "Connected",
				"notConnected": "Not connected"
			},
			"messages": {
				"saveAndConnect": "Saving configuration and attempting to connect...",
				"save": "Saving configuration...",
				"ipChange": {
					"error": "Unable to confirm web interface availability.",
					"autoToStatic": "IPv4 method switched from auto to static, web interface is available at {address}",
					"staticToAuto": "Switching IPv4 method from static to auto resulted in the web interface no longer being available at this address.",
					"staticToStatic": "IPv4 address changed, web interface is available at {address}",
					"backendCheck": "Checking availability of web interface..."
				},
				"disabledBothIpStacks": "Both IPv4 and IPv6 have been disabled. The gateway is unable to connect to the Internet until at least one of them is enabled.",
				"interfacesFetchFailed": "Failed to retrieve list of interfaces: {error}",
				"connectionFetchFailed": "Failed to retrieve list of connections: {error}",
				"fetchFailed": "Failed to retrieve connection {connection}: {error}",
				"createFailed": "Failed to create connection {connection}.",
				"noConnections": "No available ethernet connections.",
				"add": {
					"failed": "Failed to create new connection: {error}",
					"success": "Network connection {connection} has been created."
				},
				"edit": {
					"failed": "Failed to edit network connection {connection}: {error}",
					"success": "Network connection {connection} has been edited."
				},
				"connect": {
					"success": "Network connection {connection} has been activated.",
					"failed": "Failed to activate connection {connection}: {error}"
				},
				"disconnect": {
					"success": "Network connection {connection} has been deactivated at network interface {interface}.",
					"failed": "Failed to deactivate connection {connection}: {error}"
				},
				"removeSuccess": "Network connection {connection} has been removed.",
				"removeFailed": "Failed to delete network connection {connection}: {error}"
			},
			"modals": {
				"disconnectWithWatchdog": {
					"title": "Connection disconnect confirmation",
					"body": "Are you sure you want to disconnect connection {connection}? This will also disable watchdog for this connection."
				},
				"deleteWithWatchdog": {
					"title": "Connection delete confirmation",
					"body": "Are you sure you want to delete connection {connection}? This will also disable watchdog for this connection."
				},
				"delete": {
					"title": "Connection delete confirmation",
					"body": "Are you sure you want to delete connection {connection}?"
				}
			}
		},
		"operators": {
			"title": "Network operators",
			"apply": "Apply operator",
			"edit": "Edit operator",
			"delete": "Remove operator",
			"form": {
				"add": "Add network operator",
				"edit": "Edit network operator",
				"name": "Operator name",
				"code": "Operator MCC-MCN code",
				"apn": "Access Point Name (APN)",
				"username": "APN username",
				"password": "APN password"
			},
			"modal": {
				"title": "Network operator delete confirmation",
				"prompt": "Are you sure you want to delete network operator {name}?"
			},
			"errors": {
				"apnRequired": "Please enter network operator APN.",
				"codeDigits": "MCC-MNC code should be 5 digits long.",
				"codeRequired": "Please enter network operator code.",
				"nameRequired": "Please enter network operator name."
			},
			"messages": {
				"addFailed": "Failed to add new network operator: {error}.",
				"addSuccess": "New network operator {operator} has been successfully added.",
				"deleteFailed": "Failed to delete network operator {name}: {error}.",
				"deleteSuccess": "Network operator {operator} has been successfully deleted.",
				"editFailed": "Failed to edit network operator {operator}: {error}.",
				"editSuccess": "Network operator {operator} has been successfully edited.",
				"getFailed": "Failed to retrieve network operator configuration: {error}.",
				"listFailed": "Failed to retrieve list of available network operators: {error}."
			}
		},
		"table": {
			"connect": "Connect",
			"disconnect": "Disconnect"
		}
	},
	"maintenance": {
		"title": "Maintenance",
		"description": "Tools for gateway management, updates and monitoring.",
		"disabled": "No maintenance feature enabled.",
		"backup": {
			"title": "Backup & Restore",
			"description": "Gateway backup and restore management.",
			"backupTitle": "Backup gateway",
			"restoreTitle": "Restore gateway",
			"headings": {
				"software": "Software configuration",
				"system": "System configuration"
			},
			"form": {
				"software": {
					"iqrf": "IQRF Gateway Software",
					"mender": "Mender client",
					"monit": "Monit client"
				},
				"system": {
					"hostname": "Hostname",
					"network": "Network manager",
					"time": "Time synchronization",
					"journal": "Journal"
				},
				"selectAll": "Select all",
				"deselectAll": "Deselect all",
				"archive": "Archive to restore from",
				"backup": "Backup",
				"restore": "Restore & Restart"
			},
			"messages": {
				"backup": "Gateway backup in progress.",
				"restore": "Restoring gateway configuration from backup archive.",
				"backupFailed": "Failed to create gateway backup archive: {error}",
				"restoreFailed": "Failed to restore gateway: {error}",
				"restoreSuccess": "Gateway successfully restored from backup archive and will reboot at {time}."
			},
			"errors": {
				"restoreArchive": "Please select backup archive to restore from."
			}
		},
		"mender": {
			"title": "Mender update",
			"description": "Manages Mender service, configuration and client.",
			"service": {
				"title": "Remote",
				"pageTitle": "Client service",
				"description": "Manages Mender service and configuration.",
				"form": {
					"connection": "Connection",
					"inventory": "Inventory",
					"features": "Enabled features",
					"client": {
						"server": "Server address",
						"cert": "Path to certificate",
						"newCert": "Certificate to upload",
						"uploadCert": "Upload new certificate",
						"tenantToken": "Tenant token",
						"inventoryPollInterval": "Inventory update interval (seconds)",
						"retryPollInterval": "Communication retry interval (seconds)",
						"updatePollInterval": "Update check interval (seconds)"
					},
					"connect": {
						"fileTransfer": "File Transfer",
						"portForward": "Port Forwarding"
					},
					"placeholders": {
						"server": "https://hosted.mender.io",
						"tenantToken": "exampleToken"
					}
				},
				"messages": {
					"fetchFailed": "Failed to retrieve Mender configuration: {error}",
					"saveFailed": "Failed to save Mender configuration: {error}",
					"saveSuccess": "Mender configuration has been successfully saved. Restart the service for changes to take effect.",
					"serviceStatusFailed": "Failed to retrieve service status: {error}",
					"serviceFailed": "Failed to change service state: {error}",
					"certificateFailed": "Failed to upload certificate: {error}",
					"certificateNote": "Note: "
				},
				"errors": {
					"inventoryPollInterval": "Please enter an integer greater or equal to 0 for for inventory update interval.",
					"retryPollInterval": "Please enter an integer greater or equal to 0 for communication retry interval.",
					"updatePollInterval": "Please enter an integer greater or equal to 0 for update check interval",
					"serverMissing": "Please enter the server address.",
					"serverInvalid": "Invalid server URL.",
					"tenantToken": "Please enter the tenant token."
				}
			},
			"update": {
				"title": "Local",
				"pageTitle": "Local update",
				"description": "Manages Mender artifact updates.",
				"log": {
					"title": "Output log",
					"noLog": "No Mender action has been performed."
				},
				"update": "Update",
				"control": "Control",
				"remountRo": "Mount fs read-only",
				"remountRw": "Mount fs read-write",
				"form": {
					"artifact": "Artifact to install",
					"install": "Install artifact",
					"commit": "Commit update",
					"rollback": "Rollback update"
				},
				"errors": {
					"missingArtifact": "Please select a Mender artifact file.",
					"invalidArtifact": "Selected file is not a Mender artifact file."
				},
				"messages": {
					"update": "Uploading and installing Mender artifact, this may take up to 30 minutes.",
					"commitFailed": "Failed to commit currently installed Mender artifact update, see output log for details.",
					"commitSuccess": "Currently installed Mender artifact update has been successfully committed, reboot the gateway for the changes to take effect.",
					"installFailed": "Failed to install Mender artifact, see output log for details.",
					"installSuccess": "Mender artifact has been successfully installed, see output log for further instructions.",
					"rollbackFailed": "Failed to roll currently installed Mender artifact back, see output log for details.",
					"rollbackSuccess": "Currently installed Mender artifact update has been successfully rolled back.",
					"remountSuccess": "Filesystem has been successfully remounted.",
					"remountFailed": "Failed to remount filesystem: {error}"
				}
			}
		},
		"monit": {
			"title": "M/Monit monitoring",
			"description": "Manager M/Monit monitoring service and configuration.",
			"checks": {
				"title": "M/Monit checks",
				"name": "Check name",
				"enable": "Enabled"
			},
			"mmonit": {
				"title": "M/Monit server connection",
				"enable": "Enable M/Monit server",
				"server": "M/Monit server URL",
				"credentials": {
					"title": "M/Monit server credentials",
					"username": "Username",
					"password": "Password",
					"messages": {
						"emptyUsername": "Please enter M/Monit server username.",
						"emptyPassword": "Please enter M/Monit server password."
					}
				},
				"messages": {
					"emptyServer": "Please enter M/Monit server URL.",
					"invalidServer": "Invalid M/Monit server URL."
				}
			},
			"messages": {
				"fetchFailed": "Failed to retrieve MMonit configuration: {error}",
				"saveFailed": "Failed to save MMonit configuration: {error}",
				"saveSuccess": "MMonit configuration has been successfully saved."
			}
		}
	},
	"service": {
		"actions": {
			"disable": "Disable",
			"enable": "Enable",
			"start": "Start",
			"stop": "Stop",
			"restart": "Restart",
			"status": "Refresh status"
		},
		"status": "Service status",
		"states": {
			"active": "active",
			"inactive": "inactive",
			"missing": "Missing",
			"unsupported": "Unsupported",
			"unknown": "Unknown"
		},
		"apcupsd": {
			"title": "UPS daemon",
			"description": "Control UPS daemon service.",
			"messages": {
				"disabled": "UPS daemon is disabled.",
				"disable": "UPS daemon has been disabled.",
				"enable": "UPS daemon has been enabled.",
				"start": "UPS daemon has been started.",
				"stop": "UPS daemon has been stopped.",
				"restart": "UPS daemon has been restarted."
			}
		},
		"iqrf": {
			"title": "IQRF services",
			"description": "Control IQRF Gateway's services."
		},
		"iqrf-gateway-controller": {
			"title": "Controller",
			"description": "Control IQRF Gateway Controller's service.",
			"messages": {
				"disabled": "IQRF Gateway Controller is disabled.",
				"disable": "IQRF Gateway Controller has been disabled.",
				"enable": "IQRF Gateway Controller has been enabled.",
				"start": "IQRF Gateway Controller has been started.",
				"stop": "IQRF Gateway Controller has been stopped.",
				"restart": "IQRF Gateway Controller has been restarted."
			}
		},
		"iqrf-gateway-daemon": {
			"title": "Daemon",
			"description": "Control IQRF Gateway Daemon's service.",
			"messages": {
				"disable": "IQRF Gateway Daemon has been disabled.",
				"enable": "IQRF Gateway Daemon has been enabled.",
				"start": "IQRF Gateway Daemon has been started.",
				"stop": "IQRF Gateway Daemon has been stopped.",
				"restart": "IQRF Gateway Daemon has been restarted. It takes tens of seconds before the system is ready."
			}
		},
		"iqrf-gateway-translator": {
			"title": "Translator",
			"description": "Control IQRF Gateway Translator's service.",
			"messages": {
				"disabled": "IQRF Gateway Translator is disabled.",
				"disable": "IQRF Gateway Translator has been disabled.",
				"enable": "IQRF Gateway Translator has been enabled.",
				"start": "IQRF Gateway Translator has been started.",
				"stop": "IQRF Gateway Translator has been stopped.",
				"restart": "IQRF Gateway Translator has been restarted."
			}
		},
		"mender-client": {
			"title": "Mender service",
			"description": "Control the Mender service.",
			"messages": {
				"disabled": "Mender service is disabled.",
				"disable": "Mender service has been disabled.",
				"enable": "Mender service has been enabled.",
				"start": "Mender service has been started.",
				"stop": "Mender service has been stopped.",
				"restart": "Mender service has been restarted."
			}
		},
		"monit": {
			"title": "Monit service",
			"description": "Control the Monit service.",
			"messages": {
				"disabled": "Monit service is disabled.",
				"disable": "Monit service has been disabled.",
				"enable": "Monit service has been enabled.",
				"start": "Monit service has been started.",
				"stop": "Monit service has been stopped.",
				"restart": "Monit service has been restarted."
			}
		},
		"nodered": {
			"title": "Node-RED service",
			"description": "Controls the Node-RED service.",
			"messages": {
				"disabled": "Node-RED service is disabled.",
				"disable": "Node-RED service has been disabled.",
				"enable": "Node-RED service has been enabled.",
				"start": "Node-RED service has been started.",
				"stop": "Node-RED service has been stopped.",
				"restart": "Node-RED service has been restarted."
			}
		},
		"ssh": {
			"title": "SSH service",
			"description": "Controls the SSH daemon service.",
			"messages": {
				"disabled": "SSH daemon service is disabled.",
				"disable": "SSH daemon service has been disabled.",
				"enable": "SSH daemon service has been enabled.",
				"start": "SSH daemon service has been started.",
				"stop": "SSH daemon service has been stopped.",
				"restart": "SSH daemon service has been restarted."
			}
		},
		"tempgw": {
			"title": "iTemp service",
			"description": "Controls the iTemp cloud daemon service.",
			"messages": {
				"disabled": "iTemp service is disabled.",
				"disable": "iTemp service has been disabled.",
				"enable": "iTemp service has been enabled.",
				"start": "iTemp service has been started.",
				"stop": "iTemp service has been stopped.",
				"restart": "iTemp service has been restarted."
			}
		},
		"unattended-upgrades": {
			"title": "Automatic upgrades",
			"description": "Controls the automatic unattended upgrades service.",
			"configuration": "Automatic upgrades configuration",
			"form": {
				"intervalNote": "* Interval in days, 0 = disabled",
				"listUpdateInterval": "Package list update interval *",
				"upgradeInterval": "Package upgrade interval *",
				"removeInterval": "Unnecessary package removal interval *",
				"rebootOnKernelUpdate": "Reboot after updating kernel"
			},
			"errors": {
				"listUpdateInterval": "Please enter package list update interval greater or equal to 0.",
				"upgradeInterval": "Please enter package upgrade interval greater or equal to 0.",
				"removeInterval": "Please enter package removal interval greater or equal to 0."
			},
			"messages": {
				"getFailed": "Failed to retrieve automatic upgrades configuration service configuration: {error}",
				"disabled": "Automatic upgrades are disabled.",
				"disable": "Automatic upgrades service has been disabled.",
				"enable": "Automatic upgrades service has been enabled.",
				"start": "Automatic upgrades service has been started.",
				"stop": "Automatic upgrades service has been stopped.",
				"restart": "Automatic upgrades service has been restarted.",
				"saveSuccess": "Automatic upgrades configuration successfully saved.",
				"saveFailed": "Failed to save automatic upgrades configuration: {error}."
			}
		},
		"systemd-journald": {
			"title": "Journal service",
			"description": "Controls the systemd journald service.",
			"config": {
				"title": "Systemd journald configuration",
				"restart": "Restart service",
				"form": {
					"forwardToSyslog": "Forward journal to syslog",
					"storage": "Storage method",
					"storageMethods": {
						"persistent": "Filesystem persistence",
						"volatile": "In-memory persistence"
					},
					"maxDisk": "Maximum disk space used by journal in MB*",
					"sizeRotation": "File size-based log rotation",
					"maxFiles": "Maximum number of log files to keep *",
					"maxFilesNote": "* Systemd default value is 100 files.",
					"maxFileSize": "Maximum log file size in MB *",
					"timeRotation": "Time-based log rotation",
					"defaultNote": "* Set value to 0 to use systemd default.",
					"unit": "Time unit",
					"units": {
						"seconds": "Seconds",
						"minutes": "Minutes",
						"hours": "Hours",
						"days": "Days",
						"weeks": "Weeks",
						"months": "Months",
						"years": "Years"
					},
					"count": "Unit count"
				},
				"errors": {
					"maxDisk": "Please enter maximum disk space usable by journal.",
					"maxDiskInvalid": "Maximum disk size should be an integer greater or equal to 0.",
					"maxFiles": "Please enter maximum number of log files to keep.",
					"maxFilesInvalid": "Maximum number of log files should be an integer greater or equal to 1.",
					"maxFileSize": "Please enter maximum log file size.",
					"maxFileSizeInvalid": "Maximum log file size should be an integer greater or equal to 0.",
					"count": "Please enter unit count.",
					"countInvalid": "Unit count should be an integer greater or equal to 1."
				},
				"messages": {
					"fetchFailed": "Failed to retrieve systemd journal configuration.",
					"fetchFailedError": "Failed to retrieve systemd journal configuration: {error}",
					"restartFailed": "Failed to restart systemd journal service: {error}",
					"restartSuccess": "Systemd journal service has been successfully restarted.",
					"saveFailed": "Failed to save systemd journal configuration: {error}",
					"saveSuccess": "Systemd journal configuration successfully saved."
				}
			},
			"messages": {
				"disabled": "Systemd journald service is disabled.",
				"disable": "Systemd journald service has been disabled.",
				"enable": "Systemd journald service has been enabled.",
				"start": "Systemd journald service has been enabled.",
				"stop": "Systemd journald service has been stopped.",
				"restart": "Systemd journald service has been restarted."
			}
		},
		"unsupported": {
			"title": "Unsupported service"
		},
		"errors": {
			"unsupportedInit": "Not supported init system is used.",
			"processTimeout": "Service manager process timed out.",
			"missingService": "Requested service not found",
			"unsupportedService": "Unsupported service"
		},
		"messages": {
			"statusFailed": "Failed to retrieve {service} service status: {error}",
			"refreshSuccess": "Service status successfully refreshed.",
			"disableFailed": "Failed to disable {service} service: {error}",
			"enableFailed": "Failed to enable {service} service: {error}",
			"startFailed": "Failed to start {service} service: {error}",
			"stopFailed": "Failed to stop {service} service: {error}",
			"restartFailed": "Failed to restart {service} service: {error}"
		}
	},
	"table": {
		"actions": {
			"title": "Actions",
			"add": "Add",
			"delete": "Delete",
			"edit": "Edit",
			"enable": "Enable",
			"disable": "Disable",
			"deleteAll": "Delete all",
			"details": "Details"
		},
		"messages": {
			"noRecords": "No records have been found."
		}
	},
	"time": {
		"second": "{count} second | {count} seconds"
	},
	"messageError": "Request could not be processed: {error}",
	"forbiddenAccess": "You do not have sufficient permission to access this page.",
	"sessionExpiration": {
		"title": "Session expiration warning",
		"prompt": "Your session is about to expire and you will be logged out. Click the renew session button to renew the session and dismiss this windows.",
		"renew": "Renew session",
		"success": "Your session has been successfully renewed.",
		"failed": "Failed to renew session."
	}
}
